{"version":3,"sources":["app/modules/profile/crud.ts","app/modules/dashboard/graphQueries/index.ts","app/modules/dashboard/components/RoyaltyChart.tsx","_metronic/partials/content/dropdown/Dropdown1.tsx","app/modules/dashboard/api/index.ts","app/modules/dashboard/components/AccountBalance.tsx","app/modules/dashboard/components/AboutUsPage.tsx","app/modules/dashboard/components/YourTokens.tsx","app/modules/dashboard/Dashboard.tsx"],"names":["GET_KLAYTN_TOKENS_DATA_BY_WALLET_URL","process","UPDATE_USER_COVER_IMAGE_URL","UPDATE_USER_AVATAR_IMAGE_URL","TRANSFER_NFT_URL","getKlaytnTokensDataByWallet","walletAddresses","axios","method","url","headers","data","JSON","stringify","updateUserCoverImage","formData","updateUserAvatarImage","transferNFT","collectionID","tier","custWalletAddress","userWalletAddress","userID","tokenIDs","blockchain","password","APIURL","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","getDepositQuery","getRoyaltyClaimQuery","tokenID","depositNumber","getTokenBalancesForWallet","tierID","walletAddress","getDepositData","a","gql","depositData","deposits","getRoyaltyClaimData","royaltyClaimData","royaltyClaims","getCollectorsCut","depositedAmount","totalOwnershipOffered","collectorsCut","percent","totaltOwnershipOffered","parseInt","getCorrectPercent","calculateRoyaltyAmount","tokenList","ownershipOffered","withdrawAmount","unclaimedTokens","i","length","claimData","undefined","claimedAmount","push","getTokenBalanceIDs","tokenData","tokenIds","tokenBalances","map","balanceData","tokenId","getAccountBalanceData","console","log","accountBalanceData","temp","depositAmount","unclaimedIds","RoyaltyChart","className","chartData","walletName","chartRef","useRef","useEffect","current","getCSS","chart","ApexCharts","height","labelColor","getCSSVariableValue","borderColor","baseColor","lightColor","currencyType","series","name","y","fontFamily","type","toolbar","show","plotOptions","legend","dataLabels","enabled","fill","opacity","stroke","curve","width","colors","xaxis","categories","x","axisBorder","axisTicks","labels","style","fontSize","crosshairs","position","color","dashArray","tooltip","formatter","offsetY","yaxis","states","normal","filter","value","hover","active","allowMultipleDataPointsSelection","val","grid","strokeDashArray","lines","markers","strokeColors","strokeWidth","getChartOptions","render","destroy","id","ref","Dropdown1","defaultValue","defaultChecked","GET_KLAYTN_ACCOUNT_BALANCE_DATA","GET_KLAYTN_ROYALTY_CLAIM_TRANSACTION_HISTORY","SEND_ROYALTY_CLAIM_EMAIL","getKlaytnAccountBalanceData","parseFloat","toString","sendRoyaltyClaimEmail","email","quantity","royaltyAmount","txHash","claimer","claimerID","getKlaytnRoyaltyClaimTransactionHistory","getOrganizedData","list","result","currentYear","Date","getFullYear","createdAt","toDateString","month","getMonth","year","amount","created","claimed_amount","getMergedData","lst","existInList","recordExist","index","temp2","getFinalData","monthName","Number","toFixed","extractData","months","amounts","getRoyaltyClaimDataForChart","chartDataResponse","getETHRoyaltyClaimHistoryData","organizedData","mergedData","finalData","klaytn","window","caver","Caver","AccountBalance","selectedTier","royaltyData","ownedTokenIds","accountBalanceLoading","useState","setTxHash","snackBarContent","setSnackBarContent","open","vertical","horizontal","snackbarState","setSnackbarState","navigate","useNavigate","intl","useIntl","useSelector","auth","user","userName","username","shallowEqual","displaySnackbar","content","_txHash","setTimeout","renderSnackBar","Snackbar","anchorOrigin","ContentProps","message","href","checkTransactionOnKlaytn","transactionHash","rpc","klay","getTransactionReceipt","receipt","status","formatMessage","then","response","success","checkTransaction","web3","Web3","eth","claimRoyaltyOnEthereum","royaltyContract","Contract","ethereumRoyaltyABI","ethereum","request","accounts","params","methods","claimRoyaltyAmount","encodeABI","catch","error","claimRoyaltyOnKlaytn","myContract","royaltyABIKlaytn","enable","account","selectedAddress","send","from","gas","path","disabled","onClick","marginTop","overflow","CircularProgress","AboutUs","description","videoURL","controls","controlsList","playsInline","objectFit","src","tokenType","YourTokens","tokensMeta","handleTokenSelect","checkMathcingCollectionTier","_selectedCollection","currentCollection","_selectedTier","currentTier","maxHeight","tokenMeta","collection","token_tier","shareData","token_image","alt","collection_name","balance","collection_id","ownership_offered","Dashboard","props","setTokensMeta","setSelectedTier","setChartData","setOwnedTokenIds","setRoyaltyData","loading","setLoading","setAccountBalanceLoading","featuredCollectionData","setFeaturedCollectionData","platformDescription","setPlatformDescription","platformVideoURL","setPlatformVideoURL","tokenBalancesForWallet","d","state","getMusicianMetaForHomePage","featured_collection_data","musicianDescriptArr","parse","musician_description","replace","musician_video_url","backgroundImage","collection_cover_image","collectionType","collection_type"],"mappings":"uGAAA,6JAEMA,EAAoC,UAAMC,6CAAN,qCACpCC,EAA2B,UAAMD,6CAAN,gCAC3BE,EAA4B,UAAMF,6CAAN,6BAC5BG,EAAgB,UAAMH,6BAAN,iBAEf,SAASI,EAA4BC,GACxC,OAAOC,IAAM,CACTC,OAAQ,OACRC,IAAKT,EACLU,QAAS,CACL,eAAgB,qCAEpBC,KAAM,CACFL,gBAAiBM,KAAKC,UAAUP,MAKrC,SAASQ,EAAqBC,GACjC,OAAOR,IAAM,CACTC,OAAQ,OACRC,IAAKP,EACLQ,QAAS,CACL,eAAgB,uBAEpBC,KAAMI,IAIP,SAASC,EAAsBD,GAClC,OAAOR,IAAM,CACTC,OAAQ,OACRC,IAAKN,EACLO,QAAS,CACL,eAAgB,uBAEpBC,KAAMI,IAIP,IAAME,EAAc,SACvBC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,OAAOlB,IAAM,CACTC,OAAQ,OACRC,IAAKL,EACLM,QAAS,CACL,eAAgB,oBAEpBC,KAAM,CACFO,eACAC,OACAC,oBACAC,oBACAC,SACAC,WACAC,aACAC,gB,+JChENC,EAAM,UAAMzB,iEAaZ0B,EAAS,IAAIC,IAAa,CAC5BC,IAAKH,EACLI,MAAO,IAAIC,IACXC,eAdwB,CACxBC,WAAY,CACVC,YAAa,WACbC,YAAa,UAEfC,MAAO,CACLF,YAAa,WACbC,YAAa,UAYNE,EAAoC,SAACnB,GAgB9C,MAfkB,+GAIaA,EAJb,kOAoBToB,EAA8C,SAACC,EAAiBC,GAezE,MAduB,gHAIID,EAJJ,iDAKUC,EALV,wKAiBdC,EAA4B,SAACvB,EAAqBwB,EAAgBC,GAgB3E,MAfuB,qHAIQzB,EAJR,0CAKEwB,EALF,mDAMWC,EANX,4JAkBdC,EAAc,uCAAG,WAAO1B,GAAP,eAAA2B,EAAA,sEACFlB,EAAOS,MAAM,CAAEA,MAAOU,YAAIT,EAAgBnB,MADxC,cACtB6B,EADsB,yBAGrBA,EAAYpC,KAAKqC,UAHI,2CAAH,sDAMrBC,EAAmB,uCAAG,WAAOV,EAAiBC,GAAxB,eAAAK,EAAA,sEACOlB,EAAOS,MAAM,CAAEA,MAAOU,YAAIR,EAAqBC,EAASC,MAD/D,cAClBU,EADkB,yBAGjBA,EAAiBvC,KAAKwC,cAAc,IAHnB,2CAAH,wDAWnBC,EAAmB,SAACC,EAAyBC,EAA+BC,GAC9E,IAAMC,EANgB,SAACC,EAAgCF,GAEvD,OADgB,aAAQ,GAAI,IAAOG,SAASD,GAC1BC,SAASH,GAAjB,SAAkC,GAAK,IAAxC,SAA8C,GAAI,GAAnD,SAAwD,GAAI,IAIpDI,CAAkBL,EAAuBC,GAEzD,OAASC,EAAUE,SAASL,GAApB,SAAwC,GAAI,KAGlDO,EAAsB,uCAAG,WAC3BP,EACAb,EACAqB,EACAC,EACAR,GAL2B,qBAAAT,EAAA,sDAOvBkB,EAAiB,EACjBC,EAAkB,GACbC,EAAI,EATc,YASXA,EAAIJ,EAAUK,QATH,iCAUIjB,EAAoBY,EAAUI,GAAIzB,GAVtC,aAUnB2B,EAVmB,cAYoBC,GAA3BD,EAAUE,eAA8BF,EAAUE,cAAgB,GAZ3D,wDAenBN,GAAkBX,EAAiBC,EAAiBC,EAAuBQ,GAE3EE,EAAgBM,KAAKT,EAAUI,IAjBZ,QASWA,IATX,gDAoBpB,CAACF,iBAAgBC,oBApBG,4CAAH,8DAuBfO,EAAkB,uCAAG,WAAOrD,EAAsBwB,EAAgBC,GAA7C,iBAAAE,EAAA,sEACNlB,EAAOS,MAAM,CAACA,MAAOU,YAAIL,EAA0BvB,EAAcwB,EAAQC,MADnE,cACxB6B,EADwB,OAE1BC,EAAuB,GAE3BD,EAAU7D,KAAK+D,cAAcC,KAAI,SAACC,GAC9BH,EAASH,KAAKM,EAAYC,YALA,kBAOvBJ,GAPuB,2CAAH,0DAUlBK,EAAqB,uCAAG,WAAO5D,EAAsBwB,EAAgBC,EAAuBmB,GAApE,6BAAAjB,EAAA,sEACPD,EAAe1B,GADR,cAC3B6B,EAD2B,OAEjCgC,QAAQC,IAAIjC,GAFqB,SAGVwB,EAAmBrD,EAAcwB,EAAQC,GAH/B,OAG3B8B,EAH2B,OAI7BQ,EAAqB,GAEhBhB,EAAI,EANoB,YAMjBA,EAAIlB,EAAYmB,QANC,wBAOzBgB,EAAY,IACX1C,cAAgBO,EAAYkB,GAAGzB,cARP,UASmBoB,EAC5Cb,EAAYkB,GAAGkB,cACfpC,EAAYkB,GAAGzB,cACfiC,EACAX,EACAf,EAAYkB,GAAGX,uBAdU,iBAStBS,EATsB,EAStBA,eAAgBC,EATM,EASNA,gBAOvBe,QAAQC,IAAIjB,GACZmB,EAAKnB,eAAiBA,EACtBmB,EAAKE,aAAepB,EAEpBiB,EAAmBX,KAAKY,GApBK,QAMOjB,IANP,gDAuB1B,CAACgB,qBAAoBR,aAvBK,4CAAH,6D,8IC5H5BY,EAAgC,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,UAAWC,EAA2B,EAA3BA,UAAWC,EAAgB,EAAhBA,WACtDC,EAAWC,iBAA8B,MAqB/C,OAnBAC,qBAAU,WACR,GAAKF,EAASG,QAAd,CAIelC,SAASmC,YAAOJ,EAASG,QAAS,WAAjD,IAEME,EAAQ,IAAIC,IAAWN,EAASG,QA4D1C,SAAyBI,EAAgBT,EAA2BC,GAClE,IAAMS,EAAaC,YAAoB,iBACjCC,EAAcD,YAAoB,iBAClCE,EAAYF,YAAoB,aAChCG,EAAaH,YAAoB,mBACjCI,EAA6B,YAAdd,EAA2B,MAAQ,OAExD,MAAO,CACLe,OAAQ,CACN,CACEC,KAAM,mBACN7F,KAAM4E,EAAUkB,IAGpBX,MAAO,CACLY,WAAY,UACZC,KAAM,OACNX,OAAQ,IACRY,QAAS,CACPC,MAAM,IAGVC,YAAa,GACbC,OAAQ,CACNF,MAAM,GAERG,WAAY,CACVC,SAAS,GAEXC,KAAM,CACJP,KAAM,QACNQ,QAAS,GAEXC,OAAQ,CACNC,MAAO,SACPR,MAAM,EACNS,MAAO,EACPC,OAAQ,CAACnB,IAEXoB,MAAO,CACLC,WAAYlC,EAAUmC,EACtBC,WAAY,CACVd,MAAM,GAERe,UAAW,CACTf,MAAM,GAERgB,OAAQ,CACNC,MAAO,CACLP,OAAQtB,EACR8B,SAAU,SAGdC,WAAY,CACVC,SAAU,QACVb,OAAQ,CACNc,MAAO9B,EACPkB,MAAO,EACPa,UAAW,IAGfC,QAAS,CACPnB,SAAS,EACToB,eAAWjE,EACXkE,QAAS,EACTR,MAAO,CACLC,SAAU,UAIhBQ,MAAO,CACLV,OAAQ,CACNC,MAAO,CACLP,OAAQtB,EACR8B,SAAU,UAIhBS,OAAQ,CACNC,OAAQ,CACNC,OAAQ,CACN/B,KAAM,OACNgC,MAAO,IAGXC,MAAO,CACLF,OAAQ,CACN/B,KAAM,OACNgC,MAAO,IAGXE,OAAQ,CACNC,kCAAkC,EAClCJ,OAAQ,CACN/B,KAAM,OACNgC,MAAO,KAIbP,QAAS,CACPN,MAAO,CACLC,SAAU,QAEZtB,EAAG,CACD4B,UAAW,SAAUU,GAEnB,OADAhE,QAAQC,IAAI,UAAW+D,GAChBA,EAAM,IAAMzC,KAIzBiB,OAAQ,CAAClB,GACT2C,KAAM,CACJ7C,YAAaA,EACb8C,gBAAiB,EACjBV,MAAO,CACLW,MAAO,CACLrC,MAAM,KAIZsC,QAAS,CACPC,aAAchD,EACdiD,YAAa,IAtLgCC,CAAgBtD,EAAQT,EAAWC,IAKlF,OAJIM,GACFA,EAAMyD,SAGD,WACDzD,GACFA,EAAM0D,cAGT,CAAC/D,EAAUF,IAGZ,sBAAKD,UAAS,eAAUA,GAAxB,UAEE,qBAAKA,UAAU,4BAAf,SACE,oBAAIA,UAAU,2CAAd,SACE,sBAAMA,UAAU,iCAAhB,SAAiD,cAAC,IAAD,CAAkBmE,GAAG,yCA+B1E,qBAAKnE,UAAU,YAAf,SAEE,qBAAKoE,IAAKjE,EAAUgE,GAAG,2BAA2B3B,MAAO,CAAC9B,OAAQ,iB,mECtEnE,SAAS2D,IACd,OACE,sBAAKrE,UAAU,qDAAqD,eAAa,OAAjF,UACE,qBAAKA,UAAU,YAAf,SACE,qBAAKA,UAAU,2BAAf,8BAGF,qBAAKA,UAAU,8BAEf,sBAAKA,UAAU,YAAf,UACE,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,qBAAjB,qBAEA,8BACE,yBACEA,UAAU,gCACV,kBAAgB,OAChB,mBAAiB,gBACjB,mBAAiB,OACjBsE,aAAc,IALhB,UAOE,2BACA,wBAAQjB,MAAM,IAAd,sBACA,wBAAQA,MAAM,IAAd,qBACA,wBAAQA,MAAM,IAAd,wBACA,wBAAQA,MAAM,IAAd,8BAKN,sBAAKrD,UAAU,QAAf,UACE,uBAAOA,UAAU,qBAAjB,0BAEA,sBAAKA,UAAU,SAAf,UACE,wBAAOA,UAAU,mEAAjB,UACE,uBAAOA,UAAU,mBAAmBqB,KAAK,WAAWgC,MAAM,MAC1D,sBAAMrD,UAAU,mBAAhB,uBAGF,wBAAOA,UAAU,8DAAjB,UACE,uBAAOA,UAAU,mBAAmBqB,KAAK,WAAWgC,MAAM,IAAIkB,gBAAgB,IAC9E,sBAAMvE,UAAU,mBAAhB,+BAKN,sBAAKA,UAAU,QAAf,UACE,uBAAOA,UAAU,qBAAjB,4BAEA,sBAAKA,UAAU,2EAAf,UACE,uBACEA,UAAU,mBACVqB,KAAK,WACLgC,MAAM,GACNnC,KAAK,gBACLqD,gBAAgB,IAElB,uBAAOvE,UAAU,mBAAjB,2BAIJ,sBAAKA,UAAU,6BAAf,UACE,wBACEqB,KAAK,QACLrB,UAAU,qDACV,uBAAqB,OAHvB,mBAQA,wBAAQqB,KAAK,SAASrB,UAAU,yBAAyB,uBAAqB,OAA9E,4B,uCCtEJwE,EAA+B,UAAM7J,6CAAN,wCAC/B8J,EAA4C,UAAM9J,6CAAN,2CAC5C+J,EAAwB,UAAM/J,6CAAN,iCAEvB,SAASgK,EACZ/I,EACAC,EACAwB,EACAmB,GAEA,OAAOvD,IAAM,CACXC,OAAQ,OACRC,IAAKqJ,EACLpJ,QAAS,CACP,eAAgB,qCAElBC,KAAM,CACJO,eACAC,OACAwB,gBACAmB,kBAAkD,IAA/BoG,WAAWpG,IAA4BqG,cAK3D,SAASC,EACdC,EACAnJ,EACAC,EACAmJ,EACAC,EACA/I,EACAgJ,EACAC,EACAC,GAEA,OAAOnK,IAAM,CACXC,OAAQ,OACRC,IAAKuJ,EACLtJ,QAAS,CACP,eAAgB,qCAElBC,KAAM,CACJ0J,QACAnJ,eACAC,OACAmJ,WACAC,gBACA/I,aACAgJ,SACAC,UACAC,eAKC,SAASC,EAAwChI,GACtD,OAAOpC,IAAM,CACXC,OAAQ,OACRC,IAAKsJ,EACLrJ,QAAS,CACP,eAAgB,qCAElBC,KAAM,CACJgC,mBAKN,IAAMiI,EAAmB,SAACC,EAAkBrF,GAC1C,IAAIsF,EAAqB,GACrBC,GAAc,IAAIC,MAAOC,cA6B7B,MA3BiB,YAAdzF,EACDqF,EAAKlG,KAAI,SAAChE,GACR,IAAIuE,EAAY,GAEb,IAAI8F,KAAK,IAAIA,KAAgC,IAA3BtH,SAAS/C,EAAKuK,YAAmBC,gBAAgBF,eAAiBF,IACrF7F,EAAKkG,MAAQ,IAAIJ,KAAK,IAAIA,KAAgC,IAA3BtH,SAAS/C,EAAKuK,YAAmBC,gBAAgBE,WAChFnG,EAAKoG,KAAO,IAAIN,KAAK,IAAIA,KAAgC,IAA3BtH,SAAS/C,EAAKuK,YAAmBC,gBAAgBF,cAC/E/F,EAAKqG,OAAS5K,EAAK0D,cAEnByG,EAAOxG,KAAKY,OAGM,UAAdM,GACRqF,EAAKlG,KAAI,SAAChE,GACR,IAAIuE,EAAY,GAEb,IAAI8F,KAAKrK,EAAK6K,SAASP,eAAiBF,IACzC7F,EAAKkG,MAAQ,IAAIJ,KAAKrK,EAAK6K,SAASH,WACpCnG,EAAKoG,KAAO,IAAIN,KAAKrK,EAAK6K,SAASP,cACnC/F,EAAKqG,OAAS5K,EAAK8K,eAEnBX,EAAOxG,KAAKY,OAIlBH,QAAQC,IAAI8F,GAELA,GAcHY,EAAgB,SAACC,GACrB,IAAIb,EAAqB,GAgBzB,OAdAa,EAAIhH,KAAI,SAAChE,GAGL,MAjBc,SAACgL,EAAiBhL,GACpC,IAAK,IAAIsD,EAAI,EAAGA,EAAI0H,EAAIzH,OAAQD,IAC5B,GAAG0H,EAAI1H,GAAGmH,OAASzK,EAAKyK,OAASO,EAAI1H,GAAGqH,MAAQ3K,EAAK2K,KACjD,MAAO,EAAC,EAAMrH,GAKtB,MAAO,EAAC,EAAO,MASqB2H,CAAYd,EAAQnK,GAApD,mBAAKkL,EAAL,KAAkBC,EAAlB,KACA,GAAGD,GAAwB,MAATC,EAAe,CAC7B,IAAIP,EAAS7H,SAASoH,EAAOgB,GAAOP,QAAU7H,SAAS/C,EAAK4K,QAC5DT,EAAOgB,GAAOP,OAASA,MACpB,CACH,IAAIQ,EAAQpL,EACZoL,EAAMR,OAAS7H,SAASqI,EAAMR,QAC9BT,EAAOxG,KAAKyH,OAIbjB,GAGHkB,EAAe,SAACL,GACpB,IAAIb,EAAS,CACT,CACIM,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,IACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,KACPa,UAAW,MACXV,OAAQ,GAEZ,CACIH,MAAO,KACPa,UAAW,MACXV,OAAQ,IAQhB,OAJAI,EAAIhH,KAAI,SAAChE,GACLmK,EAAOnK,EAAKyK,OAAOG,QAAUW,QAAQvL,EAAK4K,OAAL,SAAc,GAAI,KAAIY,QAAQ,OAGhErB,GAGHsB,EAAc,SAACT,GAEnB,IAAIU,EAAqB,GACrBC,EAAsB,GAO1B,OALAX,EAAIhH,KAAI,SAAChE,GACL0L,EAAO/H,KAAK3D,EAAKsL,WACjBK,EAAQhI,KAAK3D,EAAK4K,WAGf,CAACc,EAAQC,IAGLC,EAA2B,uCAAG,WAAO5J,EAAuB6C,GAA9B,qBAAA3C,EAAA,yDAIxB,UAAd2C,EAJsC,gCAKNmF,EAAwChI,GALlC,8BAKkDhC,KAAKwD,UALvD,OAKvCqI,EALuC,iCAMjB,YAAdhH,EAN+B,kCAObiH,YAA8B9J,GAPjB,QAOvC6J,EAPuC,+BASvCA,EAAoB,GATmB,eAanCE,EAAgB9B,EAAiB4B,EAAmBhH,GACpDmH,EAAajB,EAAcgB,GAC3BE,EAAYZ,EAAaW,GAfU,kBAiBlCP,EAAYQ,IAjBsB,4CAAH,wD,SClMpCC,EAAcC,OAAOD,OAEnBE,EAAQ,IAAIC,IAAMH,GAElBI,EAAkC,SAAC,GAQnC,IANF3H,EAMC,EANDA,UACA4H,EAKC,EALDA,aAEAC,GAGC,EAJDC,cAIC,EAHDD,aACAE,EAEC,EAFDA,sBAIF,EAA4BC,mBAAiB,IAA7C,mBAAO9C,EAAP,KAAe+C,EAAf,KAEA,EAA8CD,mBAAiB,IAA/D,mBAAOE,EAAP,KAAwBC,EAAxB,KACE,EAA+CH,mBAAS,CACpDI,MAAM,EACNC,SAAU,SACVC,WAAY,UAHhB,mBAAOC,EAAP,KAAsBC,EAAtB,KAKQH,EAA+BE,EAA/BF,SAAUC,EAAqBC,EAArBD,WAAYF,EAASG,EAATH,KACxBK,EAAWC,cACXC,EAAOC,cAEf,EAAkEC,aAChE,sBAAEC,EAAF,EAAEA,KAAF,MAAa,CACT9M,OAAM,UAAE8M,EAAKC,YAAP,aAAE,EAAW/M,OACnBgN,SAAQ,UAAEF,EAAKC,YAAP,aAAE,EAAWE,SACrBlE,MAAK,UAAE+D,EAAKC,YAAP,aAAE,EAAWhE,MAClB1H,cAAeyL,EAAKzL,cACpB6C,WAAY4I,EAAK5I,cACjBgJ,KAPClN,EAAP,EAAOA,OAAQgN,EAAf,EAAeA,SAAUjE,EAAzB,EAAyBA,MAAO1H,EAAhC,EAAgCA,cAAe6C,EAA/C,EAA+CA,WAU/C,SAASiJ,EAAgBC,EAAiBC,GACxClB,EAAmBiB,GACnBnB,EAAUoB,GACVb,EAAiB,CAAEJ,MAAM,EAAMC,SAAU,SAAUC,WAAY,UAC/DgB,YAAW,WACPd,EAAiB,CAAEJ,MAAM,EAAOC,SAAU,SAAUC,WAAY,YACjE,KAGL,IAAMiB,EAAiB,WACrB,OACI,cAACC,EAAA,EAAD,CACIC,aAAc,CAAEpB,WAAUC,cAE1BF,KAAMA,EACNsB,aAAc,CACd,mBAAoB,cAEpBC,QACA,uBAAMxF,GAAG,aAAT,UACmB,YAAdjE,GACG,wBAAOF,UAAU,OAAjB,UAA0BkI,EACtB,mBAAG0B,KAAI,2CAAsC1E,GAA7C,SACI,cAAC,IAAD,CAAkBf,GAAG,qCAIlB,UAAdjE,GACG,wBAAOF,UAAU,OAAjB,UAA0BkI,EACtB,mBAAG0B,KAAI,6CAAwC1E,GAA/C,SACE,cAAC,IAAD,CAAkBf,GAAG,yCAnBvC,UAEYkE,EAFZ,YAEwBC,KArC3B,SAgEYuB,EAhEZ,wFAgEH,WACEC,EACAlO,EACAC,EACAmJ,EACAC,EACA/I,GANF,eAAAqB,EAAA,sEAS6BkK,EAAMsC,IAAIC,KAAKC,sBAAsBH,GATlE,UASQI,EATR,uBAYML,EAAyBC,EAAiBlO,EAAcC,EAAMmJ,EAAUC,EAAe/I,GAZ7F,4BAccgO,EAAQC,OAdtB,OAee,QAff,QAuCe,QAvCf,gCAgBiBD,EAAQC,SACPhB,EAAgBR,EAAKyB,cAAc,CAAEjG,GAAI,+CAAiD2F,GAC1FhF,EACEC,EACAnJ,EACAC,EACAmJ,EACAC,EACA/I,EACA4N,EACAd,EACAhN,GAEDqO,MAAK,SAACC,GACFA,EAASjP,KAAKkP,YA9BrC,oCAwCcpB,EAAgBR,EAAKyB,cAAc,CAAEjG,GAAI,8CAAgD2F,GAxCvG,kEAhEG,sBA8GH,IAAMU,EAAgB,uCAAG,WACvBV,EACAlO,EACAC,EACAmJ,EACAC,EACA/I,GANuB,iBAAAqB,EAAA,6DAQjBkN,EAAO,IAAIC,IAAJ,UAAY/P,yEARF,SASK8P,EAAKE,IAAIV,sBAAsBH,GATpC,QAShBI,EATgB,QAcdA,EAAQC,QACPhB,EAAgBR,EAAKyB,cAAc,CAAEjG,GAAI,+CAAiD2F,GAC1FhF,EACEC,EACAnJ,EACAC,EACAmJ,EACAC,EACA/I,EACA4N,EACAd,EACAhN,GAEDqO,MAAK,SAACC,GACFA,EAASjP,KAAKkP,YAOnBpB,EAAgBR,EAAKyB,cAAc,CAAEjG,GAAI,8CAAgD2F,GAvB7FU,EAAiBV,EAAiBlO,EAAcC,EAAMmJ,EAAUC,EAAe/I,GAZ9D,2CAAH,gEAwChB0O,EAAsB,uCAAG,WAC7BhP,EACAsB,EACArB,EACAoK,EACA6B,EACA7C,GAN6B,qBAAA1H,EAAA,2DAS1BuK,EAAclJ,OAAS,GATG,uBAUrB6L,EAAO,IAAIC,IAAJ,UAAY/P,yEACnBkQ,EAAkB,IAAIJ,EAAKE,IAAIG,SAASC,IAAoBpQ,8CAE9DqQ,EAAgBxD,OAAOwD,SAbA,SAcJA,EAASC,QAAQ,CAAE/P,OAAQ,wBAdvB,QAcrBgQ,EAdqB,QAgBf,KAAO7N,GAA+B,YAAd6C,GAChC8K,EACCC,QAAQ,CACL/P,OAAQ,sBACRiQ,OAAQ,CACJ,CACA,KAAQD,EAAS,GACjB,GAAOvQ,6CACP,KAASkQ,EAAgBO,QAAQC,mBAC7BzP,EACAsB,EACArB,EACAoK,EACA6B,GACAwD,gBAIXjB,MAAK,SAACnF,GACHsF,EACEtF,EACAtJ,EACAC,EACAoK,EACAhB,EACA,eAGLsG,OAAM,SAACC,GACJ/L,QAAQC,IAAI8L,MA7CO,2CAAH,gEAmDtBC,EAAoB,uCAAG,WAC3B7P,EACAsB,EACArB,EACAoK,EACA6B,EACA7C,GAN2B,iBAAA1H,EAAA,yDASrBmO,EAAa,IAAIjE,EAAMuC,KAAKc,SAASa,IAAkBhR,8CAE5C,UAAduF,EAXwB,gCAYjBqH,EAAOqE,SAZU,QAcjBC,EAAUtE,EAAOuE,mBAERzO,EAEXqO,EAAWN,QAAQC,mBACjBzP,EACAsB,EACArB,EACAoK,EACA6B,GACAiE,KAAK,CAACC,KAAMH,EAASI,IAAK,MAC5B,SAAST,EAAY1B,GACdA,GACCD,EACEC,EACAlO,EACAC,EACAoK,EACAhB,EACA,UAGHuG,GACC/L,QAAQC,IAAI8L,MAIpB/C,EAAS,cAzCU,sBA4CvBA,EAAS,cA5Cc,2CAAH,gEAgD1B,OACE,sBAAKzI,UAAS,eAAUA,GAAxB,UAEE,sBAAKA,UAAU,4BAAf,UACE,oBAAIA,UAAU,2CAAd,SACE,sBAAMA,UAAU,iCAAhB,SAAiD,cAAC,IAAD,CAAkBmE,GAAG,uCAExE,sBAAKnE,UAAU,eAAf,UAEE,wBACEqB,KAAK,SACLrB,UAAU,iEACV,uBAAqB,QACrB,yBAAuB,aACvB,oBAAkB,UALpB,SAOE,cAAC,IAAD,CAAOkM,KAAK,0CAA0ClM,UAAU,iBAElE,cAACqE,EAAD,WAMF0D,GACA,qCACiB,YAAd7H,GACC,sBAAKF,UAAU,iBAAf,UACG6H,GAAeA,EAAYjJ,OAAS,EACnC,mCACGiJ,EAAYxI,KAAI,SAAChE,GAAD,OACf,qCACE,qBAAK2E,UAAU,0BAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,qBAAf,UACI,iCAAM,cAAC,IAAD,CAAkBmE,GAAG,8BAA3B,IAA0D,+BAAO9I,EAAK6B,mBACtE,uBAAM8C,UAAU,OAAhB,UAAwB4G,QAAQvL,EAAKoD,eAAL,SAAsB,GAAI,KAAIoI,QAAQ,IACpE,sBAAM7G,UAAU,OAAhB,oBAEF,sBAAMA,UAAU,OAAhB,SAAuB,cAAC,IAAD,CAAkBmE,GAAG,2CAEhD,wBACEgI,WAAY9Q,EAAKoD,eAAiB,GAClCuB,UAAU,iCACVoM,QAAS,kBAAMxB,EACbhD,EAAahM,aACbP,EAAK6B,cACL0K,EAAa/L,KACbR,EAAKyE,aAAalB,OAClBvD,EAAKyE,cACJzE,EAAKoD,eAAL,SAAsB,GAAI,KAAIoG,aATnC,SAYE,cAAC,IAAD,CAAkBV,GAAG,mCAI7B,oBAAInE,UAAU,eAAewC,MAAO,CAAE6J,UAAW,kBAKnD,qBAAKrM,UAAU,qBAAf,SACE,qBAAKA,UAAU,gCAAf,SACI,sBAAMA,UAAU,cAAhB,SAA8B,cAAC,IAAD,CAAkBmE,GAAG,wCAK5DoF,OAIU,UAAdrJ,GACC,sBAAKF,UAAU,iBAAiBwC,MAAO,CAAE8J,SAAU,QAAnD,UACGzE,GAAeA,EAAYjJ,OAAS,EACnC,mCACGiJ,EAAYxI,KAAI,SAAChE,GAAD,OACf,qCACE,qBAAK2E,UAAU,0BAAf,SACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,qBAAf,UACI,iCAAM,cAAC,IAAD,CAAkBmE,GAAG,8BAA3B,IAA0D,+BAAO9I,EAAK6B,mBACtE,uBAAM8C,UAAU,OAAhB,UAAwB4G,QAAQvL,EAAKoD,eAAL,SAAsB,GAAI,KAAIoI,QAAQ,IACpE,sBAAM7G,UAAU,OAAhB,qBAEF,sBAAMA,UAAU,OAAhB,SAAuB,cAAC,IAAD,CAAkBmE,GAAG,2CAEhD,wBACEgI,WAAY9Q,EAAKoD,eAAiB,GAClCuB,UAAU,iCACVoM,QAAS,kBAAMX,EACb7D,EAAahM,aACbP,EAAK6B,cACL0K,EAAa/L,KACbR,EAAKyE,aAAalB,OAClBvD,EAAKyE,aACJ8G,QAAQvL,EAAKoD,eAAL,SAAsB,GAAI,KAAIoI,QAAQ,IAAKhC,aATxD,SAYE,cAAC,IAAD,CAAkBV,GAAG,mCAI7B,oBAAInE,UAAU,eAAewC,MAAO,CAAE6J,UAAW,kBAKjD,qBAAKrM,UAAU,qBAAf,SACE,qBAAKA,UAAU,gCAAf,SACI,sBAAMA,UAAU,cAAhB,SAA8B,cAAC,IAAD,CAAkBmE,GAAG,wCAK9DoF,UAKRxB,GACC,qBAAK/H,UAAU,0BAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,sBAAKA,UAAU,4CAAf,UACI,sBAAMA,UAAU,oBAAhB,qBADJ,IACuD,uBACnD,sBAAMA,UAAU,OAAhB,SACI,cAACuM,EAAA,EAAD,iBCnZlBC,EAA2B,SAAC,GAAwC,IAAvCxM,EAAsC,EAAtCA,UAAWyM,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,SACzD,OACE,sBAAK1M,UAAS,eAAUA,GAAawC,MAAO,CAAE9B,OAAQ,SAAtD,UAEE,sBAAKV,UAAU,4BAAf,UACE,oBAAIA,UAAU,2CAAd,SACE,sBAAMA,UAAU,iCAAhB,SAAiD,cAAC,IAAD,CAAkBmE,GAAG,kCAExE,sBAAKnE,UAAU,eAAf,UAEE,wBACEqB,KAAK,SACLrB,UAAU,iEACV,uBAAqB,QACrB,yBAAuB,aACvB,oBAAkB,UALpB,SAOE,cAAC,IAAD,CAAOkM,KAAK,0CAA0ClM,UAAU,iBAGlE,cAACqE,EAAD,UAOJ,qBAAKrE,UAAU,iBAAf,SAEE,sBAAKA,UAAU,0BAAf,UACI,uBAAO2M,UAAQ,EAACC,aAAa,aAAaC,aAAW,EAACrK,MAAO,CAAER,MAAO,OAAQtB,OAAQ,QAASoM,UAAW,SAA1G,SAEI,wBAAQC,IAAKL,EAAUrL,KAAK,gBAEhC,qBAAKrB,UAAU,0BAAf,SACKyM,EAAYpN,KAAI,SAACuE,GAAD,OACf,mBAAG5D,UAAU,GAAb,SACK4D,kBC1CjBoJ,EAAiB,CACrB,EAAM,OACN,EAAK,WACL,EAAK,WAYDC,EAA8B,SAAC,GAO9B,IANLjN,EAMI,EANJA,UACAkN,EAKI,EALJA,WACAC,EAII,EAJJA,kBACA9P,EAGI,EAHJA,cACA6C,EAEI,EAFJA,WACA0H,EACI,EADJA,aAGMwF,EAA8B,SAClCC,EACAC,EACAC,EACAC,GAEA,OAAOH,GAAuBC,GAAqBC,GAAiBC,GAGtE,OACE,sBAAKxN,UAAS,eAAUA,GAAawC,MAAO,CAAEiL,UAAW,QAASnB,SAAU,QAA5E,UAEE,sBAAKtM,UAAU,4BAAf,UACE,oBAAIA,UAAU,2CAAd,SACE,sBAAMA,UAAU,iCAAhB,SAAiD,cAAC,IAAD,CAAkBmE,GAAG,mCAExE,sBAAKnE,UAAU,eAAf,UAEE,wBACEqB,KAAK,SACLrB,UAAU,iEACV,uBAAqB,QACrB,yBAAuB,aACvB,oBAAkB,UALpB,SAOE,cAAC,IAAD,CAAOkM,KAAK,0CAA0ClM,UAAU,iBAElE,cAACqE,EAAD,UAMJ,qBAAKrE,UAAU,iBAAf,SACA,sBAAKA,UAAU,mBAAf,UAEmB,YAAdE,GACC,uBAAOF,UAAU,+BAAjB,SAEE,kCACGkN,EAAWtO,OAAS,GACnB,mCACGsO,EAAW7N,KAAI,SAACqO,GAAD,OACd,qBACE1N,UAAS,8BAAyBoN,EAChCxF,EAAahM,aACb8R,EAAUC,WAAWxJ,GACrByD,EAAa/L,KACb6R,EAAUE,aACL,YACPxB,QAAS,WACPe,EACEO,EAAUC,WAAWxJ,GACrBuJ,EAAUE,WACVvQ,EACAqQ,EAAU7R,KAAKgS,YAZrB,UAgBE,6BACI,qBAAK7N,UAAU,0BAAf,SACI,sBAAMA,UAAU,eAAhB,SACA,qBACI+M,IAAG,UAAKpS,yDAAL,YAAkD+S,EAAUI,aAC/D9N,UAAU,yBACV+N,IAAI,WAKhB,+BACI,mBAAGnE,KAAK,IAAI5J,UAAU,mDAAtB,SACK0N,EAAUM,kBAEf,uBAAMhO,UAAU,kCAAhB,UACE,cAAC,IAAD,CAAkBmE,GAAG,wBADvB,IAEE,sBAAMnE,UAAU,OAAhB,SAAwBgN,EAAUU,EAAUE,iBAE9C,uBAAM5N,UAAU,kCAAhB,UACE,cAAC,IAAD,CAAkBmE,GAAG,2BADvB,IAEE,sBAAMnE,UAAU,OAAhB,SAAwB0N,EAAUO,wBAQ1B,GAArBf,EAAWtO,QACV,sBAAMoB,UAAU,gBAAhB,SAAgC,cAAC,IAAD,CAAkBmE,GAAG,kDAO9C,UAAdjE,GACC,uBAAOF,UAAU,+BAAjB,SAEE,kCACGkN,EAAWtO,OAAS,GACnB,mCACGsO,EAAW7N,KAAI,SAACqO,GAAD,OACd,qBACE1N,UAAS,8BAAyBoN,EAC9BxF,EAAahM,aACb8R,EAAUQ,cACVtG,EAAa/L,KACb6R,EAAUE,aACP,YACPxB,QAAS,WACPe,EACEO,EAAUQ,cACVR,EAAUE,WACVvQ,EACAqQ,EAAUS,oBAZhB,UAgBE,6BACI,qBAAKnO,UAAU,0BAAf,SACI,sBAAMA,UAAU,eAAhB,SACA,qBACI+M,IAAG,UAAKpS,yDAAL,YAAkD+S,EAAUI,aAC/D9N,UAAU,yBACV+N,IAAI,WAKhB,+BACI,mBAAGnE,KAAK,IAAI5J,UAAU,mDAAtB,SACK0N,EAAUM,kBAEf,uBAAMhO,UAAU,kCAAhB,UACE,cAAC,IAAD,CAAkBmE,GAAG,wBADvB,IAEE,sBAAMnE,UAAU,OAAhB,SAAwBgN,EAAUU,EAAUE,iBAE9C,uBAAM5N,UAAU,kCAAhB,UACE,cAAC,IAAD,CAAkBmE,GAAG,2BADvB,IAEE,sBAAMnE,UAAU,OAAhB,SAAwB0N,EAAUO,wBAO1B,GAArBf,EAAWtO,QACV,sBAAMoB,UAAU,gBAAhB,SAAgC,cAAC,IAAD,CAAkBmE,GAAG,2D,sCCwDxDiK,UAvNG,SAACC,GAEf,MAAoCrG,mBAAc,IAAlD,mBAAOkF,EAAP,KAAmBoB,EAAnB,KACA,EAAwCtG,mBAAqB,CAACpM,aAAc,KAAMC,KAAM,OAAxF,mBAAO+L,EAAP,KAAqB2G,EAArB,KACA,EAAkCvG,mBAAyB,CACvD,EAAK,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAChD,EAAK,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAFlC,mBAAO/H,EAAP,KAAkBuO,EAAlB,KAIA,EAA0CxG,mBAAqB,IAA/D,mBAAOF,EAAP,KAAsB2G,EAAtB,KACA,EAAsCzG,mBAAS,IAA/C,mBAAOH,EAAP,KAAoB6G,EAApB,KACA,EAA8B1G,oBAAkB,GAAhD,mBAAO2G,EAAP,KAAgBC,EAAhB,KACA,EAA2D5G,oBAAkB,GAA7E,mBAAQD,EAAR,KAA+B8G,EAA/B,KACA,EAA4D7G,mBAAc,MAA1E,mBAAO8G,EAAP,KAA+BC,EAA/B,KACA,GAAsD/G,mBAAqB,IAA3E,qBAAOgH,GAAP,MAA4BC,GAA5B,MACA,GAAgDjH,mBAAiB,IAAjE,qBAAOkH,GAAP,MAAyBC,GAAzB,MACM1G,GAAWC,cACXC,GAAOC,cAEb,GAA2CC,aACvC,gBAAEC,EAAF,EAAEA,KAAF,MAAa,CACXzL,cAAeyL,EAAKzL,cACpB6C,WAAY4I,EAAK5I,cACfgJ,KAJA7L,GAAR,GAAQA,cAAe6C,GAAvB,GAAuBA,WAOvBG,qBAAU,WACHhD,IAAiB6C,GACC,YAAdA,GACDkP,YAAuB/R,IACtBgN,MAAK,SAAChP,GACLiT,EAAcjT,MAEfgP,MAAK,WACJpD,EAA4B5J,GAAe6C,IAC1CmK,MAAK,SAAChP,GACHmT,GAAa,SAACa,GAIV,OAHAA,EAAEjN,EAAI/G,EAAK,GACXgU,EAAElO,EAAI9F,EAAK,GAEJgU,KAEXT,GAAW,SAGK,UAAd1O,IACRnF,YAA4B,CAACsC,KAC5BgN,MAAK,SAACC,GACFA,EAASjP,KAAKkP,SACf+D,EAAchE,EAASjP,KAAK6R,eAG/B7C,MAAK,WACJpD,EAA4B5J,GAAe6C,IAC1CmK,MAAK,SAAChP,GACHmT,GAAa,SAACa,GAIV,OAHAA,EAAEjN,EAAI/G,EAAK,GACXgU,EAAElO,EAAI9F,EAAK,GAEJgU,KAEXT,GAAW,SAKnBnG,GAAS,aAAc,CAAE6G,MAAO,CAAE3F,QAAShB,GAAKyB,cAAc,CAAEjG,GAAI,wCAE1E,IAEF9D,qBAAU,WACNkP,cACClF,KADD,uCACM,WAAOC,GAAP,eAAA/M,EAAA,sDACFwR,EAA0BzE,EAASjP,KAAKmU,0BAEpCC,EAAsBnU,KAAKoU,MAAMpF,EAASjP,KAAKsU,qBAAqBC,QAAQ,UAAW,MAE3FX,GAAuBQ,GACvBN,GAAoB7E,EAASjP,KAAKwU,oBANhC,2CADN,yDASD,IAEH,IAAM1C,GAAiB,uCAAG,WACtBvR,EACAC,EACAwB,EACAmB,GAJsB,eAAAjB,EAAA,yDAMtBsR,GAAyB,GACzBN,GAAgB,SAACc,GACb,MAAO,CACHzT,aAAcA,EACdC,KAAMA,MAIG,YAAdqE,GAdmB,iCAeQV,YAAsB5D,EAAcA,EAAeC,EAAMwB,EAAemB,GAfhF,OAeZgH,EAfY,OAgBlBiJ,EAAiBjJ,EAAOrG,UACxBuP,EAAelJ,EAAO7F,oBACtBkP,GAAyB,GAlBP,wBAmBE,UAAd3O,IACNyE,EACI/I,EACAC,EACAwB,EACAmB,GACF6L,MAAK,SAACC,GACJmE,EAAiBnE,EAASjP,KAAK8D,UAC/BuP,EAAepE,EAASjP,KAAKsE,oBAC7BkP,GAAyB,MA5BX,4CAAH,4DAiCvB,OACI,sCACMF,GACF,qCACI,sBAAK3O,UAAU,sBAAf,UACI,sBAAKA,UAAU,WAAWwC,MAAO,CAAE8J,SAAU,OAAQ5L,OAAQ,SAA7D,UACI,cAAC,EAAD,CACIV,UAAU,QACVC,UAAWA,EACXC,WAAYA,KAEhB,cAAC,EAAD,CACIF,UAAU,OACV4H,aAAcA,EACdE,cAAeA,EACfD,YAAaA,EACbE,sBAAuBA,OAG/B,qBAAK/H,UAAU,WAAf,SACI,cAAC,EAAD,CACIA,UAAU,GACVyM,YAAauC,GACbtC,SAAUwC,OAGlB,qBAAKlP,UAAU,WAAf,SACI,cAAC,EAAD,CACIA,UAAU,QACVkN,WAAYA,EACZC,kBAAmBA,GACnBvF,aAAcA,EACdvK,cAAeA,GACf6C,WAAYA,UAoCxB,sBAAKF,UAAU,iBAAf,UACI,sBAAMA,UAAU,YAAhB,SAA4B,cAAC,IAAD,CAAkBmE,GAAG,8BAChD2K,GACG,qBACI9O,UAAU,qBACVwC,MAAO,CAAEsN,gBAAgB,QAAD,OAAUnV,oEAAV,YAAkEmU,EAAuBiB,uBAAzF,OAF5B,SAII,sBAAK/P,UAAU,eAAf,UACI,sBAAMA,UAAU,kBAAhB,SAAmCgQ,IAAelB,EAAuBmB,mBAAwB,uBACjG,sBAAMzN,MAAO,CAAEC,SAAU,QAAzB,SAAoCqM,EAAuBd,6BAO9EW,GACG,qBAAK3O,UAAU,qBAAf,SACI,qBAAKA,UAAU,kBAAf,SACI,sBAAKA,UAAU,4CAAf,UACI,sBAAMA,UAAU,oBAAhB,qBADJ,IACuD,uBACnD,sBAAMA,UAAU,OAAhB,SACI,cAACuM,EAAA,EAAD","file":"static/js/6.528adaa9.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst GET_KLAYTN_TOKENS_DATA_BY_WALLET_URL = `${process.env.REACT_APP_API_URL}/get-token-balances-by-wallet.php`;\r\nconst UPDATE_USER_COVER_IMAGE_URL = `${process.env.REACT_APP_API_URL}/update-user-cover-image.php`;\r\nconst UPDATE_USER_AVATAR_IMAGE_URL = `${process.env.REACT_APP_API_URL}/update-profile-image.php`;\r\nconst TRANSFER_NFT_URL = `${process.env.REACT_APP_NODE_JS_SERVER_URL}/nft-transfer`;\r\n\r\nexport function getKlaytnTokensDataByWallet(walletAddresses: Array<any>) {\r\n    return axios({\r\n        method: 'post',\r\n        url: GET_KLAYTN_TOKENS_DATA_BY_WALLET_URL,\r\n        headers: {\r\n            'content-type': 'application/x-www-form-urlencoded',\r\n        },\r\n        data: {\r\n            walletAddresses: JSON.stringify(walletAddresses)\r\n        }\r\n    })\r\n}\r\n\r\nexport function updateUserCoverImage(formData: any) {\r\n    return axios({\r\n        method: 'post',\r\n        url: UPDATE_USER_COVER_IMAGE_URL,\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n        },\r\n        data: formData\r\n    })\r\n}\r\n\r\nexport function updateUserAvatarImage(formData: any) {\r\n    return axios({\r\n        method: 'post',\r\n        url: UPDATE_USER_AVATAR_IMAGE_URL,\r\n        headers: {\r\n            'content-type': 'multipart/form-data',\r\n        },\r\n        data: formData\r\n    })\r\n}\r\n\r\nexport const transferNFT = (\r\n    collectionID: string,\r\n    tier: string,\r\n    custWalletAddress: string,\r\n    userWalletAddress: string,\r\n    userID: string,\r\n    tokenIDs: Array<any>,\r\n    blockchain: string,\r\n    password: string\r\n) => {\r\n    return axios({\r\n        method: 'post',\r\n        url: TRANSFER_NFT_URL,\r\n        headers: {\r\n            'content-type': 'application/json',\r\n        },\r\n        data: {\r\n            collectionID,\r\n            tier,\r\n            custWalletAddress,\r\n            userWalletAddress,\r\n            userID,\r\n            tokenIDs,\r\n            blockchain,\r\n            password\r\n        }\r\n    })\r\n}","import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\r\n\r\nconst APIURL = `${process.env.REACT_APP_GRAPH_URL}`;;\r\n\r\nconst defaultOptions: any = {\r\n    watchQuery: {\r\n      fetchPolicy: 'no-cache',\r\n      errorPolicy: 'ignore',\r\n    },\r\n    query: {\r\n      fetchPolicy: 'no-cache',\r\n      errorPolicy: 'all',\r\n    },\r\n}\r\n\r\nconst client = new ApolloClient({\r\n    uri: APIURL,\r\n    cache: new InMemoryCache(),\r\n    defaultOptions: defaultOptions,\r\n})\r\n\r\ntype IGetDepositQuery = (collectionID: string | null) => string\r\n\r\nexport const getDepositQuery: IGetDepositQuery = (collectionID) => {\r\n    const depositQuery = `\r\n        query {\r\n            deposits(\r\n                where: {\r\n                    collection: \"${collectionID}\"\r\n                }\r\n            ) {\r\n                depositor\r\n                depositNumber\r\n                depositAmount\r\n                totalOwnershipOffered\r\n                txHash\r\n            }\r\n        }\r\n    `\r\n    return depositQuery\r\n}\r\n\r\ntype IGetRoyaltyClaimQuery = (tokenID: string, depositNumber: string) => string\r\n\r\nexport const getRoyaltyClaimQuery: IGetRoyaltyClaimQuery = (tokenID: string, depositNumber: string) => {\r\n    const royaltyClaimQuery = `\r\n        query {\r\n            royaltyClaims(\r\n                where: {\r\n                    tokenID: ${tokenID},\r\n                    depositNumber: ${depositNumber}\r\n                }\r\n            ) {\r\n                depositNumber\r\n                claimedAmount\r\n                claimedtokenIDs\r\n            }\r\n        }\r\n    `\r\n    return royaltyClaimQuery\r\n}\r\n\r\nexport const getTokenBalancesForWallet = (collectionID:string, tierID :string, walletAddress: string) => {\r\n    const tokenBalanceQuery = `\r\n        query {\r\n            tokenBalances(\r\n                where : {\r\n                    collection: \"${collectionID}\",\r\n                    tier: \"${tierID}\",\r\n                    walletAddress: \"${walletAddress}\",\r\n                }\r\n            ) {\r\n                tokenId\r\n                walletAddress\r\n                balance\r\n            }\r\n        }\r\n    `\r\n    return tokenBalanceQuery\r\n}\r\n\r\nexport const getDepositData = async (collectionID: string | null) => {\r\n  const depositData = await client.query({ query: gql(getDepositQuery(collectionID))})\r\n\r\n  return depositData.data.deposits\r\n}\r\n\r\nconst getRoyaltyClaimData = async (tokenID: string, depositNumber: string) => {\r\n    const royaltyClaimData = await client.query({ query: gql(getRoyaltyClaimQuery(tokenID, depositNumber))})\r\n\r\n    return royaltyClaimData.data.royaltyClaims[0]\r\n}\r\n\r\nconst getCorrectPercent = (totaltOwnershipOffered: string, collectorsCut: string) => {\r\n    const coeff = ((10000 * 10**32) / (parseInt(totaltOwnershipOffered)))\r\n    return (((coeff * parseInt(collectorsCut) * 10 **33) / 10**5) / 10**32)\r\n}\r\n\r\nconst getCollectorsCut = (depositedAmount: string, totalOwnershipOffered: string, collectorsCut: string) => {\r\n    const percent = getCorrectPercent(totalOwnershipOffered, collectorsCut);\r\n\r\n    return ((percent * parseInt(depositedAmount)) / 10**32)\r\n}\r\n\r\nconst calculateRoyaltyAmount = async (\r\n    depositedAmount: any, \r\n    depositNumber: string, \r\n    tokenList: Array<any>, \r\n    ownershipOffered: string,\r\n    totalOwnershipOffered: string\r\n) => {\r\n    let withdrawAmount = 0;\r\n    let unclaimedTokens = [];\r\n    for (let i = 0; i < tokenList.length; i++) {\r\n        let claimData: any = await getRoyaltyClaimData(tokenList[i], depositNumber);\r\n\r\n        if(claimData && claimData.claimedAmount != undefined && claimData.claimedAmount > 0) {\r\n            continue\r\n        } else {\r\n            withdrawAmount += getCollectorsCut(depositedAmount, totalOwnershipOffered, ownershipOffered)\r\n            \r\n            unclaimedTokens.push(tokenList[i])\r\n        }\r\n    }\r\n    return {withdrawAmount, unclaimedTokens};\r\n}\r\n\r\nexport const getTokenBalanceIDs = async (collectionID: string, tierID: string, walletAddress: string) => {\r\n    const tokenData = await client.query({query: gql(getTokenBalancesForWallet(collectionID, tierID, walletAddress))})\r\n    let tokenIds: Array<any> = []\r\n\r\n    tokenData.data.tokenBalances.map((balanceData: any) => {\r\n        tokenIds.push(balanceData.tokenId)\r\n    })\r\n    return tokenIds\r\n}\r\n\r\nexport const getAccountBalanceData = async (collectionID: string, tierID: string, walletAddress: string, ownershipOffered: string) => {\r\n    const depositData = await getDepositData(collectionID);\r\n    console.log(depositData)\r\n    const tokenIds = await getTokenBalanceIDs(collectionID, tierID, walletAddress);\r\n    let accountBalanceData = []\r\n\r\n    for (let i = 0; i < depositData.length; i++) {\r\n        let temp: any = {}\r\n        temp.depositNumber = depositData[i].depositNumber\r\n        const {withdrawAmount, unclaimedTokens} = await calculateRoyaltyAmount(\r\n            depositData[i].depositAmount, \r\n            depositData[i].depositNumber, \r\n            tokenIds, \r\n            ownershipOffered,\r\n            depositData[i].totalOwnershipOffered\r\n        )\r\n        console.log(withdrawAmount)\r\n        temp.withdrawAmount = withdrawAmount\r\n        temp.unclaimedIds = unclaimedTokens\r\n\r\n        accountBalanceData.push(temp)\r\n    }\r\n\r\n    return {accountBalanceData, tokenIds}\r\n}\r\n\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {useEffect, useRef, useState} from 'react'\r\nimport ApexCharts, {ApexOptions} from 'apexcharts'\r\nimport {getCSS, getCSSVariableValue} from '../../../../_metronic/assets/ts/_utils'\r\nimport { ChartDataModel } from '../models'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\ntype Props = {\r\n  className: string,\r\n  chartData: ChartDataModel,\r\n  walletName: string\r\n}\r\n\r\nconst RoyaltyChart: React.FC<Props> = ({className, chartData, walletName}) => {\r\n  const chartRef = useRef<HTMLDivElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    if (!chartRef.current) {\r\n      return\r\n    }\r\n\r\n    const height = parseInt(getCSS(chartRef.current, 'height'))\r\n\r\n    const chart = new ApexCharts(chartRef.current, getChartOptions(height, chartData, walletName))\r\n    if (chart) {\r\n      chart.render()\r\n    }\r\n\r\n    return () => {\r\n      if (chart) {\r\n        chart.destroy()\r\n      }\r\n    }\r\n  }, [chartRef, chartData])\r\n\r\n  return (\r\n    <div className={`card ${className}`}>\r\n      {/* begin::Header */}\r\n      <div className='card-header border-0 pt-5'>\r\n        <h3 className='card-title align-items-start flex-column'>\r\n          <span className='card-label fw-bolder fs-3 mb-1'><FormattedMessage id='DASHBOARD_PAGE.YEARLY_EARNINGS' /></span>\r\n        </h3>\r\n\r\n        {/* begin::Toolbar */}\r\n        {/* <div className='card-toolbar' data-kt-buttons='true'>\r\n          <a\r\n            className='btn btn-sm btn-color-muted btn-active btn-active-primary active px-4 me-1'\r\n            id='kt_charts_widget_3_year_btn'\r\n          >\r\n            Year\r\n          </a>\r\n\r\n          <a\r\n            className='btn btn-sm btn-color-muted btn-active btn-active-primary px-4 me-1'\r\n            id='kt_charts_widget_3_month_btn'\r\n          >\r\n            Month\r\n          </a>\r\n\r\n          <a\r\n            className='btn btn-sm btn-color-muted btn-active btn-active-primary px-4'\r\n            id='kt_charts_widget_3_week_btn'\r\n          >\r\n            Week\r\n          </a>\r\n        </div> */}\r\n        {/* end::Toolbar */}\r\n      </div>\r\n      {/* end::Header */}\r\n\r\n      {/* begin::Body */}\r\n      <div className='card-body'>\r\n        {/* begin::Chart */}\r\n        <div ref={chartRef} id='kt_charts_widget_3_chart' style={{height: '350px'}}></div>\r\n        {/* end::Chart */}\r\n      </div>\r\n      {/* end::Body */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {RoyaltyChart}\r\n\r\nfunction getChartOptions(height: number, chartData: ChartDataModel, walletName: string): ApexOptions {\r\n  const labelColor = getCSSVariableValue('--bs-gray-500')\r\n  const borderColor = getCSSVariableValue('--bs-gray-200')\r\n  const baseColor = getCSSVariableValue('--bs-info')\r\n  const lightColor = getCSSVariableValue('--bs-light-info')\r\n  const currencyType = walletName == 'metamask' ? 'ETH' : 'KLAY'\r\n\r\n  return {\r\n    series: [\r\n      {\r\n        name: 'Royalties Earned',\r\n        data: chartData.y,\r\n      },\r\n    ],\r\n    chart: {\r\n      fontFamily: 'inherit',\r\n      type: 'area',\r\n      height: 350,\r\n      toolbar: {\r\n        show: false,\r\n      },\r\n    },\r\n    plotOptions: {},\r\n    legend: {\r\n      show: false,\r\n    },\r\n    dataLabels: {\r\n      enabled: false,\r\n    },\r\n    fill: {\r\n      type: 'solid',\r\n      opacity: 1,\r\n    },\r\n    stroke: {\r\n      curve: 'smooth',\r\n      show: true,\r\n      width: 3,\r\n      colors: [baseColor],\r\n    },\r\n    xaxis: {\r\n      categories: chartData.x,\r\n      axisBorder: {\r\n        show: false,\r\n      },\r\n      axisTicks: {\r\n        show: false,\r\n      },\r\n      labels: {\r\n        style: {\r\n          colors: labelColor,\r\n          fontSize: '12px',\r\n        },\r\n      },\r\n      crosshairs: {\r\n        position: 'front',\r\n        stroke: {\r\n          color: baseColor,\r\n          width: 1,\r\n          dashArray: 3,\r\n        },\r\n      },\r\n      tooltip: {\r\n        enabled: true,\r\n        formatter: undefined,\r\n        offsetY: 0,\r\n        style: {\r\n          fontSize: '12px',\r\n        },\r\n      },\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        style: {\r\n          colors: labelColor,\r\n          fontSize: '12px',\r\n        },\r\n      },\r\n    },\r\n    states: {\r\n      normal: {\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n      hover: {\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n      active: {\r\n        allowMultipleDataPointsSelection: false,\r\n        filter: {\r\n          type: 'none',\r\n          value: 0,\r\n        },\r\n      },\r\n    },\r\n    tooltip: {\r\n      style: {\r\n        fontSize: '12px',\r\n      },\r\n      y: {\r\n        formatter: function (val) {\r\n          console.log('value: ', val)\r\n          return val + ' ' + currencyType\r\n        },\r\n      },\r\n    },\r\n    colors: [lightColor],\r\n    grid: {\r\n      borderColor: borderColor,\r\n      strokeDashArray: 4,\r\n      yaxis: {\r\n        lines: {\r\n          show: true,\r\n        },\r\n      },\r\n    },\r\n    markers: {\r\n      strokeColors: baseColor,\r\n      strokeWidth: 3,\r\n    },\r\n  }\r\n}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\n\r\nexport function Dropdown1() {\r\n  return (\r\n    <div className='menu menu-sub menu-sub-dropdown w-250px w-md-300px' data-kt-menu='true'>\r\n      <div className='px-7 py-5'>\r\n        <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n      </div>\r\n\r\n      <div className='separator border-gray-200'></div>\r\n\r\n      <div className='px-7 py-5'>\r\n        <div className='mb-10'>\r\n          <label className='form-label fw-bold'>Status:</label>\r\n\r\n          <div>\r\n            <select\r\n              className='form-select form-select-solid'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              defaultValue={'1'}\r\n            >\r\n              <option></option>\r\n              <option value='1'>Approved</option>\r\n              <option value='2'>Pending</option>\r\n              <option value='3'>In Process</option>\r\n              <option value='4'>Rejected</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='mb-10'>\r\n          <label className='form-label fw-bold'>Member Type:</label>\r\n\r\n          <div className='d-flex'>\r\n            <label className='form-check form-check-sm form-check-custom form-check-solid me-5'>\r\n              <input className='form-check-input' type='checkbox' value='1' />\r\n              <span className='form-check-label'>Author</span>\r\n            </label>\r\n\r\n            <label className='form-check form-check-sm form-check-custom form-check-solid'>\r\n              <input className='form-check-input' type='checkbox' value='2' defaultChecked={true} />\r\n              <span className='form-check-label'>Customer</span>\r\n            </label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='mb-10'>\r\n          <label className='form-label fw-bold'>Notifications:</label>\r\n\r\n          <div className='form-check form-switch form-switch-sm form-check-custom form-check-solid'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              value=''\r\n              name='notifications'\r\n              defaultChecked={true}\r\n            />\r\n            <label className='form-check-label'>Enabled</label>\r\n          </div>\r\n        </div>\r\n\r\n        <div className='d-flex justify-content-end'>\r\n          <button\r\n            type='reset'\r\n            className='btn btn-sm btn-white btn-active-light-primary me-2'\r\n            data-kt-menu-dismiss='true'\r\n          >\r\n            Reset\r\n          </button>\r\n\r\n          <button type='submit' className='btn btn-sm btn-primary' data-kt-menu-dismiss='true'>\r\n            Apply\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import axios from 'axios';\r\nimport { getETHRoyaltyClaimHistoryData } from '../../dropDetail/dropDetailEthereum/queries/Queries'\r\n\r\nconst GET_KLAYTN_ACCOUNT_BALANCE_DATA = `${process.env.REACT_APP_API_URL}/get-klaytn-account-balance-data.php`;\r\nconst GET_KLAYTN_ROYALTY_CLAIM_TRANSACTION_HISTORY = `${process.env.REACT_APP_API_URL}/get-klaytn-royalty-claim-histories.php`;\r\nconst SEND_ROYALTY_CLAIM_EMAIL = `${process.env.REACT_APP_API_URL}/send-royalty-claim-email.php`;\r\n\r\nexport function getKlaytnAccountBalanceData(\r\n    collectionID: string,\r\n    tier: string,\r\n    walletAddress: string,\r\n    ownershipOffered: string\r\n) {\r\n    return axios({\r\n      method: 'post',\r\n      url: GET_KLAYTN_ACCOUNT_BALANCE_DATA,\r\n      headers: {\r\n        'content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n      data: {\r\n        collectionID,\r\n        tier,\r\n        walletAddress,\r\n        ownershipOffered: (parseFloat(ownershipOffered) * 100000).toString()\r\n      }\r\n    })\r\n}\r\n\r\nexport function sendRoyaltyClaimEmail(\r\n  email: string,\r\n  collectionID: any,\r\n  tier: any,\r\n  quantity: string,\r\n  royaltyAmount: string,\r\n  blockchain: string,\r\n  txHash: string,\r\n  claimer: string,\r\n  claimerID: string,\r\n) {\r\n  return axios({\r\n    method: 'post',\r\n    url: SEND_ROYALTY_CLAIM_EMAIL,\r\n    headers: {\r\n      'content-type': 'application/x-www-form-urlencoded',\r\n    },\r\n    data: {\r\n      email,\r\n      collectionID,\r\n      tier,\r\n      quantity,\r\n      royaltyAmount,\r\n      blockchain,\r\n      txHash,\r\n      claimer,\r\n      claimerID\r\n    }\r\n  })\r\n}\r\n\r\nexport function getKlaytnRoyaltyClaimTransactionHistory(walletAddress: string) {\r\n  return axios({\r\n    method: 'post',\r\n    url: GET_KLAYTN_ROYALTY_CLAIM_TRANSACTION_HISTORY,\r\n    headers: {\r\n      'content-type': 'application/x-www-form-urlencoded'\r\n    },\r\n    data: {\r\n      walletAddress\r\n    }\r\n  });\r\n}\r\n\r\nconst getOrganizedData = (list: Array<any>, walletName: string) => {\r\n  let result: Array<any> = [];\r\n  let currentYear = new Date().getFullYear()\r\n\r\n  if(walletName == 'metamask') {\r\n    list.map((data) => {\r\n      let temp: any = {}\r\n      \r\n      if(new Date(new Date(parseInt(data.createdAt) * 1000).toDateString()).getFullYear() == currentYear) {\r\n        temp.month = new Date(new Date(parseInt(data.createdAt) * 1000).toDateString()).getMonth();\r\n        temp.year = new Date(new Date(parseInt(data.createdAt) * 1000).toDateString()).getFullYear();\r\n        temp.amount = data.claimedAmount\r\n\r\n        result.push(temp)\r\n      }\r\n    })\r\n  } else if(walletName == 'kaikas') {\r\n    list.map((data: any) => {\r\n      let temp: any = {}\r\n\r\n      if(new Date(data.created).getFullYear() == currentYear) {\r\n        temp.month = new Date(data.created).getMonth();\r\n        temp.year = new Date(data.created).getFullYear();\r\n        temp.amount = data.claimed_amount\r\n\r\n        result.push(temp)\r\n      }\r\n    })\r\n  }\r\n  console.log(result)\r\n\r\n  return result\r\n}\r\n\r\nconst existInList = (lst: Array<any>, data: any) => {\r\n  for (let i = 0; i < lst.length; i++) {\r\n      if(lst[i].month == data.month && lst[i].year == data.year) {\r\n          return [true, i]\r\n      } else {\r\n          continue\r\n      }\r\n  }\r\n  return [false, null]\r\n}\r\n\r\nconst getMergedData = (lst: Array<any>) => {\r\n  let result: Array<any> = [];\r\n\r\n  lst.map((data) => {\r\n      let temp = {}\r\n\r\n      let [recordExist, index]: any = existInList(result, data)\r\n      if(recordExist && index != null) {\r\n          let amount = parseInt(result[index].amount) + parseInt(data.amount)\r\n          result[index].amount = amount\r\n      } else {\r\n          let temp2 = data\r\n          temp2.amount = parseInt(temp2.amount)\r\n          result.push(temp2)\r\n      }\r\n  })\r\n\r\n  return result\r\n}\r\n\r\nconst getFinalData = (lst: Array<any>) => {\r\n  let result = [\r\n      {\r\n          month: '0',\r\n          monthName: 'Jan',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '1',\r\n          monthName: 'Feb',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '2',\r\n          monthName: 'Mar',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '3',\r\n          monthName: 'Apr',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '4',\r\n          monthName: 'May',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '5',\r\n          monthName: 'Jun',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '6',\r\n          monthName: 'Jul',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '7',\r\n          monthName: 'Aug',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '8',\r\n          monthName: 'Sep',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '9',\r\n          monthName: 'Oct',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '10',\r\n          monthName: 'Nov',\r\n          amount: 0\r\n      },\r\n      {\r\n          month: '11',\r\n          monthName: 'Dec',\r\n          amount: 0\r\n      }\r\n  ]\r\n\r\n  lst.map((data) => {\r\n      result[data.month].amount += Number((data.amount / 10**18).toFixed(5));\r\n  })\r\n\r\n  return result\r\n}\r\n\r\nconst extractData = (lst: Array<any>) => {\r\n\r\n  let months: Array<any> = []\r\n  let amounts: Array<any> = []\r\n\r\n  lst.map((data: any) => {\r\n      months.push(data.monthName)\r\n      amounts.push(data.amount)\r\n  })\r\n\r\n  return [months, amounts]\r\n}\r\n\r\nexport const getRoyaltyClaimDataForChart = async (walletAddress: string, walletName: string) => {\r\n\r\n  let chartDataResponse;\r\n\r\n  if(walletName == 'kaikas') {\r\n    chartDataResponse = await (await getKlaytnRoyaltyClaimTransactionHistory(walletAddress)).data.claimData\r\n  } else if(walletName == 'metamask') {\r\n    chartDataResponse = await getETHRoyaltyClaimHistoryData(walletAddress)\r\n  } else {\r\n    chartDataResponse = []\r\n  }\r\n  \r\n\r\n  const organizedData = getOrganizedData(chartDataResponse, walletName)\r\n  const mergedData = getMergedData(organizedData);\r\n  const finalData = getFinalData(mergedData)\r\n\r\n  return extractData(finalData)\r\n}","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, { useEffect, useState } from 'react'\r\nimport { CircularProgress, Snackbar } from '@mui/material'\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport Web3 from \"web3\"\r\nimport Caver from 'caver-js'\r\nimport {KTSVG} from '../../../../_metronic/helpers'\r\nimport {Dropdown1} from '../../../../_metronic/partials/content/dropdown/Dropdown1'\r\nimport { TierSelect } from '../models'\r\nimport { ethereumRoyaltyABI, royaltyABIKlaytn } from '../../contract/abi'\r\nimport { RootState } from 'setup'\r\nimport { sendRoyaltyClaimEmail } from '../api/index'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\n\r\n\r\n\r\ntype Props = {\r\n  className: string,\r\n  selectedTier: TierSelect,\r\n  ownedTokenIds: any,\r\n  royaltyData: Array<any>,\r\n  accountBalanceLoading: boolean\r\n}\r\n\r\ndeclare var window: any\r\n\r\nlet klaytn: any = window.klaytn\r\n\r\nconst caver = new Caver(klaytn);\r\n\r\nconst AccountBalance: React.FC<Props> = (\r\n  {\r\n    className, \r\n    selectedTier, \r\n    ownedTokenIds, \r\n    royaltyData,\r\n    accountBalanceLoading\r\n  }\r\n) => {\r\n\r\n  const [txHash, setTxHash] = useState<string>('');\r\n\r\n  const [snackBarContent, setSnackBarContent] = useState<string>('')\r\n    const [snackbarState, setSnackbarState]: any = useState({\r\n        open: false,\r\n        vertical: 'bottom',\r\n        horizontal: 'right'\r\n    });\r\n    const { vertical, horizontal, open } = snackbarState;\r\n    const navigate = useNavigate()\r\n    const intl = useIntl()\r\n  \r\n  const {userID, userName, email, walletAddress, walletName}: any = useSelector<RootState>(\r\n    ({auth}) => ({\r\n        userID: auth.user?.userID,\r\n        userName: auth.user?.username,\r\n        email: auth.user?.email,\r\n        walletAddress: auth.walletAddress,\r\n        walletName: auth.walletName\r\n    }), shallowEqual\r\n  )\r\n\r\n  function displaySnackbar(content: string, _txHash: string) {\r\n    setSnackBarContent(content)\r\n    setTxHash(_txHash)\r\n    setSnackbarState({ open: true, vertical: 'bottom', horizontal: 'right'});\r\n    setTimeout(() => {\r\n        setSnackbarState({ open: false, vertical: 'bottom', horizontal: 'right'});\r\n    }, 20000);\r\n  }\r\n\r\n  const renderSnackBar = () => {\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{ vertical, horizontal }}\r\n            key={`${vertical},${horizontal}`}\r\n            open={open}\r\n            ContentProps={{\r\n            'aria-describedby': 'message-id',\r\n            }}\r\n            message={\r\n            <span id=\"message-id\">\r\n                {walletName == 'metamask' && \r\n                    <label className=\"px-4\">{ snackBarContent } \r\n                        <a href={`https://rinkeby.etherscan.io/tx//${txHash}`}>\r\n                            <FormattedMessage id='COLLECTION_DETAIL_PAGE.HERE' />\r\n                        </a>\r\n                    </label>\r\n                }\r\n                {walletName == 'kaikas' && \r\n                    <label className=\"px-4\">{ snackBarContent } \r\n                        <a href={`https://baobab.scope.klaytn.com/tx/${txHash}`}>\r\n                          <FormattedMessage id='COLLECTION_DETAIL_PAGE.HERE' />\r\n                        </a>\r\n                    </label>\r\n                }\r\n            </span>\r\n            }\r\n        />\r\n    )\r\n  }\r\n\r\n  async function checkTransactionOnKlaytn(\r\n    transactionHash: any,\r\n    collectionID: any,\r\n    tier: any,\r\n    quantity: string,\r\n    royaltyAmount: string,\r\n    blockchain: string,\r\n  ) {\r\n\r\n    const receipt: any = await caver.rpc.klay.getTransactionReceipt(transactionHash)\r\n\r\n    if(!receipt) {\r\n        checkTransactionOnKlaytn(transactionHash, collectionID, tier, quantity, royaltyAmount, blockchain);\r\n    } else {\r\n        switch (receipt.status) {\r\n            case '0x1':\r\n                if(receipt.status) {\r\n                    displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_SUCCESS' }), transactionHash)\r\n                    sendRoyaltyClaimEmail(\r\n                      email,\r\n                      collectionID,\r\n                      tier,\r\n                      quantity,\r\n                      royaltyAmount,\r\n                      blockchain,\r\n                      transactionHash,\r\n                      userName,\r\n                      userID\r\n                    )\r\n                    .then((response) => {\r\n                      if(response.data.success) {\r\n\r\n                      } else {\r\n\r\n                      }\r\n                    })\r\n                }\r\n                break;\r\n            \r\n            case '0x0':\r\n                displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_FAILED' }), transactionHash)\r\n                break\r\n        }\r\n    }\r\n  }\r\n\r\n  const checkTransaction = async (\r\n    transactionHash: string,\r\n    collectionID: any,\r\n    tier: any,\r\n    quantity: string,\r\n    royaltyAmount: string,\r\n    blockchain: string,\r\n  ) => {\r\n    const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n     const receipt: any = await web3.eth.getTransactionReceipt(transactionHash);\r\n\r\n      if(!receipt) {\r\n          checkTransaction(transactionHash, collectionID, tier, quantity, royaltyAmount, blockchain)\r\n      } else {\r\n          if(receipt.status) {\r\n              displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_SUCCESS' }), transactionHash)\r\n              sendRoyaltyClaimEmail(\r\n                email,\r\n                collectionID,\r\n                tier,\r\n                quantity,\r\n                royaltyAmount,\r\n                blockchain,\r\n                transactionHash,\r\n                userName,\r\n                userID\r\n              )\r\n              .then((response) => {\r\n                if(response.data.success) {\r\n\r\n                } else {\r\n\r\n                }\r\n              })\r\n          } else {\r\n              displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_FAILED' }), transactionHash)\r\n          } \r\n      }\r\n  }\r\n\r\n  const claimRoyaltyOnEthereum = async (\r\n    collectionID: any, \r\n    depositNumber: string,\r\n    tier: string | null,\r\n    amount: string,\r\n    ownedTokenIds: Array<any>,\r\n    royaltyAmount: string\r\n  ) => {\r\n\r\n    if(ownedTokenIds.length > 0) {\r\n      const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n      const royaltyContract = new web3.eth.Contract(ethereumRoyaltyABI, process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_ETHEREUM);\r\n\r\n      let ethereum: any = window.ethereum\r\n      const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n      if(accounts[0] === walletAddress && walletName == 'metamask') {\r\n          ethereum\r\n          .request({\r\n              method: 'eth_sendTransaction',\r\n              params: [\r\n                  {\r\n                  'from': accounts[0],\r\n                  'to' : process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_ETHEREUM,\r\n                  'data' : royaltyContract.methods.claimRoyaltyAmount(\r\n                      collectionID,\r\n                      depositNumber,\r\n                      tier,\r\n                      amount,\r\n                      ownedTokenIds\r\n                    ).encodeABI()\r\n                  },\r\n              ],\r\n          })\r\n          .then((txHash: any) => {\r\n              checkTransaction(\r\n                txHash,\r\n                collectionID,\r\n                tier,\r\n                amount,\r\n                royaltyAmount,\r\n                'ethereum'\r\n              );\r\n          })\r\n          .catch((error: any) => {\r\n              console.log(error)\r\n          });\r\n      }\r\n    }\r\n  }\r\n\r\n  const claimRoyaltyOnKlaytn = async (\r\n    collectionID: string | null, \r\n    depositNumber: string,\r\n    tier: string | null,\r\n    amount: string,\r\n    ownedTokenIds: Array<any>,\r\n    royaltyAmount: string\r\n  ) => {\r\n\r\n    const myContract = new caver.klay.Contract(royaltyABIKlaytn, process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_KLAYTN)\r\n\r\n    if(walletName == 'kaikas') {\r\n        await klaytn.enable()\r\n\r\n        const account = klaytn.selectedAddress\r\n\r\n        if(account === walletAddress) {\r\n\r\n            myContract.methods.claimRoyaltyAmount(\r\n              collectionID,\r\n              depositNumber,\r\n              tier,\r\n              amount,\r\n              ownedTokenIds\r\n            ).send({from: account, gas: 8000000},\r\n            function(error: any, transactionHash: any) {\r\n                if(transactionHash) {\r\n                    checkTransactionOnKlaytn(\r\n                      transactionHash,\r\n                      collectionID,\r\n                      tier,\r\n                      amount,\r\n                      royaltyAmount,\r\n                      'klaytn'\r\n                    )\r\n                }\r\n                if(error) {\r\n                    console.log(error)\r\n                }\r\n            });\r\n        } else {\r\n            navigate('/my-wallet')\r\n        }\r\n    } else {\r\n        navigate('/my-wallet')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`card ${className}`}>\r\n      {/* begin::Header */}\r\n      <div className='card-header border-0 pt-5'>\r\n        <h3 className='card-title align-items-start flex-column'>\r\n          <span className='card-label fw-bolder fs-3 mb-1'><FormattedMessage id=\"DASHBOARD_PAGE.ACCOUNT_BALANCE\" /></span>\r\n        </h3>\r\n        <div className='card-toolbar'>\r\n          {/* begin::Menu */}\r\n          <button\r\n            type='button'\r\n            className='btn btn-sm btn-icon btn-color-primary btn-active-light-primary'\r\n            data-kt-menu-trigger='click'\r\n            data-kt-menu-placement='bottom-end'\r\n            data-kt-menu-flip='top-end'\r\n          >\r\n            <KTSVG path='/media/icons/duotune/general/gen024.svg' className='svg-icon-2' />\r\n          </button>\r\n          <Dropdown1 />\r\n          {/* end::Menu */}\r\n        </div>\r\n      </div>\r\n      {/* end::Header */}\r\n      {/* begin::Body */}\r\n      {!accountBalanceLoading && \r\n        <>\r\n          {walletName == 'metamask' &&\r\n            <div className='card-body py-5'>\r\n              {royaltyData && royaltyData.length > 0 ? (\r\n                <>\r\n                  {royaltyData.map((data) => (\r\n                    <>\r\n                      <div className='d-flex flex-column my-3'>\r\n                        <div className='d-flex'>\r\n                          <div className='d-flex flex-column'>\r\n                              <span><FormattedMessage id=\"DASHBOARD_PAGE.DEPOSIT_NO\" /> <span>{data.depositNumber}</span></span>\r\n                              <span className='fs-2'>{Number((data.withdrawAmount / 10**18).toFixed(5))} \r\n                                <span className='ms-2'>ETH</span>\r\n                              </span>\r\n                              <span className='fs-6'><FormattedMessage id=\"DASHBOARD_PAGE.AVAILABLE_TO_CLAIM\" /></span>\r\n                          </div>\r\n                          <button \r\n                            disabled={!(data.withdrawAmount > 0)} \r\n                            className='btn btn-secondary ms-auto my-5'\r\n                            onClick={() => claimRoyaltyOnEthereum(\r\n                              selectedTier.collectionID, \r\n                              data.depositNumber, \r\n                              selectedTier.tier,\r\n                              data.unclaimedIds.length,\r\n                              data.unclaimedIds,\r\n                              (data.withdrawAmount / 10**18).toString()\r\n                            )}\r\n                          >\r\n                            <FormattedMessage id=\"DASHBOARD_PAGE.WITHDRAW\" />\r\n                          </button>\r\n                      </div>\r\n                    </div>\r\n                    <hr className=\"w-25 mx-auto\" style={{ marginTop: '20px' }} />\r\n                    </>\r\n                  ))}\r\n                </>\r\n                ) : (\r\n                  <div className='d-flex flex-column'>\r\n                    <div className='d-flex justify-content-center'>\r\n                        <span className='text-center'><FormattedMessage id=\"DASHBOARD_PAGE.NO_CLIAM_AVAIL\" /></span>\r\n                    </div>\r\n                  </div>\r\n                ) \r\n              }\r\n              {renderSnackBar()}\r\n            </div>\r\n          }\r\n\r\n          {walletName == 'kaikas' && \r\n            <div className='card-body py-5' style={{ overflow: 'auto' }}>\r\n              {royaltyData && royaltyData.length > 0 ? (\r\n                <>\r\n                  {royaltyData.map((data) => (\r\n                    <>\r\n                      <div className='d-flex flex-column my-3'>\r\n                        <div className='d-flex'>\r\n                          <div className='d-flex flex-column'>\r\n                              <span><FormattedMessage id=\"DASHBOARD_PAGE.DEPOSIT_NO\" /> <span>{data.depositNumber}</span></span>\r\n                              <span className='fs-2'>{Number((data.withdrawAmount / 10**18).toFixed(5))}\r\n                                <span className='ms-2'>KLAY</span>\r\n                              </span>\r\n                              <span className='fs-6'><FormattedMessage id=\"DASHBOARD_PAGE.AVAILABLE_TO_CLAIM\" /></span>\r\n                          </div>\r\n                          <button \r\n                            disabled={!(data.withdrawAmount > 0)} \r\n                            className='btn btn-secondary ms-auto my-3'\r\n                            onClick={() => claimRoyaltyOnKlaytn(\r\n                              selectedTier.collectionID, \r\n                              data.depositNumber, \r\n                              selectedTier.tier,\r\n                              data.unclaimedIds.length,\r\n                              data.unclaimedIds,\r\n                              (Number((data.withdrawAmount / 10**18).toFixed(5))).toString()\r\n                            )}\r\n                          >\r\n                            <FormattedMessage id=\"DASHBOARD_PAGE.WITHDRAW\" />\r\n                          </button>\r\n                      </div>\r\n                    </div>\r\n                    <hr className=\"w-25 mx-auto\" style={{ marginTop: '20px' }} />\r\n                    </>\r\n                  ))}\r\n                </>\r\n                ) : (\r\n                    <div className='d-flex flex-column'>\r\n                      <div className='d-flex justify-content-center'>\r\n                          <span className='text-center'><FormattedMessage id=\"DASHBOARD_PAGE.NO_CLIAM_AVAIL\" /></span>\r\n                      </div>\r\n                    </div>\r\n                ) \r\n              }\r\n              {renderSnackBar()}\r\n            </div>\r\n          }\r\n        </>\r\n      }\r\n      {accountBalanceLoading && \r\n        <div className='d-flex w-100 h-100 mb-5'>\r\n            <div className='my-auto mx-auto'>\r\n                <div className='d-flex flex-column justify-content-center'>\r\n                    <span className='text-primary fs-3'>Loading</span> <br />\r\n                    <span className='ms-4'>\r\n                        <CircularProgress />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n      }\r\n      {/* begin::Body */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {AccountBalance}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport {KTSVG, toAbsoluteUrl} from '../../../../_metronic/helpers'\r\nimport {Dropdown1} from '../../../../_metronic/partials/content/dropdown/Dropdown1'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\ntype Props = {\r\n  className: string\r\n  description: Array<any>\r\n  videoURL: string\r\n}\r\n\r\nconst AboutUs: React.FC<Props> = ({className, description, videoURL}) => {\r\n  return (\r\n    <div className={`card ${className}`} style={{ height: '700px' }}>\r\n      {/* begin::Header */}\r\n      <div className='card-header border-0 pt-5'>\r\n        <h3 className='card-title align-items-start flex-column'>\r\n          <span className='card-label fw-bolder fs-3 mb-1'><FormattedMessage id='DASHBOARD_PAGE.TEAM_MUSIC' /></span>\r\n        </h3>\r\n        <div className='card-toolbar'>\r\n          {/* begin::Menu */}\r\n          <button\r\n            type='button'\r\n            className='btn btn-sm btn-icon btn-color-primary btn-active-light-primary'\r\n            data-kt-menu-trigger='click'\r\n            data-kt-menu-placement='bottom-end'\r\n            data-kt-menu-flip='top-end'\r\n          >\r\n            <KTSVG path='/media/icons/duotune/general/gen024.svg' className='svg-icon-2' />\r\n          </button>\r\n          {/* begin::Menu 1 */}\r\n          <Dropdown1 />\r\n          {/* end::Menu 1 */}\r\n          {/* end::Menu */}\r\n        </div>\r\n      </div>\r\n      {/* end::Header */}\r\n      {/* begin::Body */}\r\n      <div className='card-body py-3'>\r\n        {/* begin::Table container */}\r\n        <div className='d-flex flex-column px-6'>\r\n            <video controls controlsList=\"nodownload\" playsInline style={{ width: '100%', height: '400px', objectFit: 'cover' }}>\r\n                {/* <source src=\"https://api.royal.io/assets/183636fa-2cee-4208-93ae-d87336762135\" type=\"video/mp4\" /> */}\r\n                <source src={videoURL} type=\"video/mp4\" />\r\n            </video>\r\n            <div className='d-flex flex-column mt-8'>\r\n                {description.map((lines: any) => (\r\n                  <p className=''>\r\n                      {lines}\r\n                  </p>\r\n                ))}\r\n            </div>\r\n        </div>\r\n        {/* end::Table container */}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {AboutUs}\r\n\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React from 'react'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport {KTSVG, toAbsoluteUrl} from '../../../../_metronic/helpers'\r\nimport {Dropdown1} from '../../../../_metronic/partials/content/dropdown/Dropdown1'\r\nimport { TierSelect } from '../models'\r\n\r\nconst tokenType: any = {\r\n  '0' : 'Gold',\r\n  '1': 'Platinum',\r\n  '2': 'Diamond'\r\n}\r\n\r\ntype Props = {\r\n  className: string,\r\n  tokensMeta: Array<any>,\r\n  handleTokenSelect: any,\r\n  walletAddress: string,\r\n  walletName: string,\r\n  selectedTier: TierSelect\r\n}\r\n\r\nconst YourTokens: React.FC<Props> = ({\r\n  className, \r\n  tokensMeta, \r\n  handleTokenSelect, \r\n  walletAddress, \r\n  walletName,\r\n  selectedTier\r\n}) => {\r\n  \r\n  const checkMathcingCollectionTier = (\r\n    _selectedCollection: string | null,\r\n    currentCollection: string,\r\n    _selectedTier: string | null,\r\n    currentTier: string\r\n  ) => {\r\n    return _selectedCollection == currentCollection && _selectedTier == currentTier\r\n  }\r\n\r\n  return (\r\n    <div className={`card ${className}`} style={{ maxHeight: '700px', overflow: 'auto' }}>\r\n      {/* begin::Header */}\r\n      <div className='card-header border-0 pt-5'>\r\n        <h3 className='card-title align-items-start flex-column'>\r\n          <span className='card-label fw-bolder fs-3 mb-1'><FormattedMessage id='DASHBOARD_PAGE.YOUR_TOKENS' /></span>\r\n        </h3>\r\n        <div className='card-toolbar'>\r\n          {/* begin::Menu */}\r\n          <button\r\n            type='button'\r\n            className='btn btn-sm btn-icon btn-color-primary btn-active-light-primary'\r\n            data-kt-menu-trigger='click'\r\n            data-kt-menu-placement='bottom-end'\r\n            data-kt-menu-flip='top-end'\r\n          >\r\n            <KTSVG path='/media/icons/duotune/general/gen024.svg' className='svg-icon-2' />\r\n          </button>\r\n          <Dropdown1 />\r\n          {/* end::Menu */}\r\n        </div>\r\n      </div>\r\n      {/* end::Header */}\r\n      {/* begin::Body */}\r\n      <div className='card-body py-3'>\r\n      <div className='table-responsive'>\r\n          {/* begin::Table */}\r\n          {walletName == 'metamask' && \r\n            <table className='table align-middle gs-0 gy-5'>\r\n              {/* begin::Table body */}\r\n              <tbody>\r\n                {tokensMeta.length > 0 && \r\n                  <>\r\n                    {tokensMeta.map((tokenMeta) => (\r\n                      <tr \r\n                        className={`px-3 cursor-pointer ${checkMathcingCollectionTier(\r\n                          selectedTier.collectionID,\r\n                          tokenMeta.collection.id,\r\n                          selectedTier.tier,\r\n                          tokenMeta.token_tier\r\n                          ) && 'bgr-grey'}`}\r\n                        onClick={() => {\r\n                          handleTokenSelect(\r\n                            tokenMeta.collection.id, \r\n                            tokenMeta.token_tier, \r\n                            walletAddress, \r\n                            tokenMeta.tier.shareData\r\n                          )\r\n                        }}\r\n                      >\r\n                        <th>\r\n                            <div className='symbol symbol-50px mx-2'>\r\n                                <span className='symbol-label'>\r\n                                <img\r\n                                    src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${tokenMeta.token_image}`}\r\n                                    className='h-50 align-self-center'\r\n                                    alt=''\r\n                                />\r\n                                </span>\r\n                            </div>\r\n                        </th>\r\n                        <td>\r\n                            <a href='#' className='text-dark fw-bolder text-hover-primary mb-1 fs-6'>\r\n                                {tokenMeta.collection_name}\r\n                            </a>\r\n                            <span className='text-muted fw-bold d-block fs-7'>\r\n                              <FormattedMessage id='DASHBOARD_PAGE.TIER' />: \r\n                              <span className='ms-2'>{tokenType[tokenMeta.token_tier]}</span>\r\n                            </span>\r\n                            <span className='text-muted fw-bold d-block fs-7'>\r\n                              <FormattedMessage id='SETTINGS_PAGE.QUANTITY' />:\r\n                              <span className='ms-2'>{tokenMeta.balance}</span>\r\n                            </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n\r\n                  </>\r\n                }\r\n                {tokensMeta.length == 0 && \r\n                  <span className='my-10 mx-auto'><FormattedMessage id='DASHBOARD_PAGE.NO_ASSET_IN_CONN_WALLET' /></span>\r\n                }\r\n              </tbody>\r\n              {/* end::Table body */}\r\n            </table>\r\n          }\r\n\r\n          {walletName == 'kaikas' && \r\n            <table className='table align-middle gs-0 gy-5'>\r\n              {/* begin::Table body */}\r\n              <tbody>\r\n                {tokensMeta.length > 0 && \r\n                  <>\r\n                    {tokensMeta.map((tokenMeta) => (\r\n                      <tr \r\n                        className={`px-3 cursor-pointer ${checkMathcingCollectionTier(\r\n                            selectedTier.collectionID,\r\n                            tokenMeta.collection_id,\r\n                            selectedTier.tier,\r\n                            tokenMeta.token_tier\r\n                          ) && 'bgr-grey'}`}\r\n                        onClick={() => {\r\n                          handleTokenSelect(\r\n                            tokenMeta.collection_id, \r\n                            tokenMeta.token_tier, \r\n                            walletAddress, \r\n                            tokenMeta.ownership_offered\r\n                          )\r\n                        }}\r\n                      >\r\n                        <th>\r\n                            <div className='symbol symbol-50px mx-2'>\r\n                                <span className='symbol-label'>\r\n                                <img\r\n                                    src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${tokenMeta.token_image}`}\r\n                                    className='h-50 align-self-center'\r\n                                    alt=''\r\n                                />\r\n                                </span>\r\n                            </div>\r\n                        </th>\r\n                        <td>\r\n                            <a href='#' className='text-dark fw-bolder text-hover-primary mb-1 fs-6'>\r\n                                {tokenMeta.collection_name}\r\n                            </a>\r\n                            <span className='text-muted fw-bold d-block fs-7'>\r\n                              <FormattedMessage id='DASHBOARD_PAGE.TIER' />: \r\n                              <span className='ms-2'>{tokenType[tokenMeta.token_tier]}</span>\r\n                            </span>\r\n                            <span className='text-muted fw-bold d-block fs-7'>\r\n                              <FormattedMessage id='SETTINGS_PAGE.QUANTITY' />:\r\n                              <span className='ms-2'>{tokenMeta.balance}</span>\r\n                            </span>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                  </>\r\n                }\r\n                {tokensMeta.length == 0 && \r\n                  <span className='my-10 mx-auto'><FormattedMessage id='DASHBOARD_PAGE.NO_ASSET_IN_CONN_WALLET' /></span>\r\n                }\r\n              </tbody>\r\n              {/* end::Table body */}\r\n            </table>\r\n          }\r\n          {/* end::Table */}\r\n        </div>\r\n      </div>\r\n      {/* begin::Body */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {YourTokens}\r\n","import { useState, useEffect } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport { RoyaltyChart } from \"./components/RoyaltyChart\"\r\nimport { AccountBalance } from \"./components/AccountBalance\"\r\nimport { AboutUs } from \"./components/AboutUsPage\"\r\nimport { YourTokens } from \"./components/YourTokens\"\r\nimport { RootState } from 'setup'\r\nimport { tokenBalancesForWallet } from '../dropDetail/dropDetailEthereum/queries/Queries'\r\nimport { getKlaytnTokensDataByWallet } from '../profile/crud'\r\nimport { TierSelect } from './models'\r\nimport { getAccountBalanceData } from './graphQueries'\r\nimport { getKlaytnAccountBalanceData } from './api'\r\nimport { CircularProgress } from '@mui/material'\r\nimport { ChartDataModel } from './models'\r\nimport { getRoyaltyClaimDataForChart } from './api'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\nimport { getMusicianMetaForHomePage } from '../royalHomePage/api'\r\nimport { collectionType } from '../yourCollections/common/common'\r\n\r\nconst Dashboard = (props: any) => {\r\n\r\n    const [tokensMeta, setTokensMeta] = useState<any>([])\r\n    const [selectedTier, setSelectedTier] = useState<TierSelect>({collectionID: null, tier: null})\r\n    const [chartData, setChartData] = useState<ChartDataModel>({\r\n        'x': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'],\r\n        'y': [30, 40, 40, 90, 90, 70, 70]\r\n    })\r\n    const [ownedTokenIds, setOwnedTokenIds] = useState<Array<any>>([])\r\n    const [royaltyData, setRoyaltyData] = useState([]);\r\n    const [loading, setLoading] = useState<boolean>(true)\r\n    const [ accountBalanceLoading, setAccountBalanceLoading] = useState<boolean>(false)\r\n    const [featuredCollectionData, setFeaturedCollectionData] = useState<any>(null)\r\n    const [platformDescription, setPlatformDescription] = useState<Array<any>>([])\r\n    const [platformVideoURL, setPlatformVideoURL] = useState<string>(\"\")\r\n    const navigate = useNavigate()\r\n    const intl = useIntl()\r\n\r\n    const { walletAddress, walletName }: any = useSelector<RootState>(\r\n        ({auth}) => ({\r\n          walletAddress: auth.walletAddress,\r\n          walletName: auth.walletName\r\n        }), shallowEqual\r\n    )\r\n\r\n    useEffect(() => {\r\n        if(walletAddress && walletName) {\r\n            if(walletName == 'metamask') {\r\n              tokenBalancesForWallet(walletAddress)\r\n              .then((data) => {\r\n                setTokensMeta(data)\r\n              })\r\n              .then(() => {\r\n                getRoyaltyClaimDataForChart(walletAddress, walletName)\r\n                .then((data) => {\r\n                    setChartData((d) => {\r\n                        d.x = data[0]\r\n                        d.y = data[1]\r\n\r\n                        return d\r\n                    })\r\n                    setLoading(false)\r\n                })\r\n              })\r\n            } else if(walletName == 'kaikas') {\r\n              getKlaytnTokensDataByWallet([walletAddress])\r\n              .then((response) => {\r\n                if(response.data.success) {\r\n                  setTokensMeta(response.data.tokensMeta)\r\n                }\r\n              })\r\n              .then(() => {\r\n                getRoyaltyClaimDataForChart(walletAddress, walletName)\r\n                .then((data) => {\r\n                    setChartData((d) => {\r\n                        d.x = data[0]\r\n                        d.y = data[1]\r\n\r\n                        return d\r\n                    })\r\n                    setLoading(false)\r\n                })\r\n              })\r\n            }\r\n          } else {\r\n            navigate('/my-wallet', { state: { message: intl.formatMessage({ id: 'DASHBOARD_PAGE.CONN_WALLET_MSG' }) } })\r\n          }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        getMusicianMetaForHomePage()\r\n        .then(async (response) => {\r\n            setFeaturedCollectionData(response.data.featured_collection_data)\r\n\r\n            let musicianDescriptArr = JSON.parse(response.data.musician_description.replace(/&quot;/g, '\"'))\r\n\r\n            setPlatformDescription(musicianDescriptArr)\r\n            setPlatformVideoURL(response.data.musician_video_url)\r\n        })\r\n    }, [])\r\n\r\n    const handleTokenSelect = async (\r\n        collectionID: string, \r\n        tier: string, \r\n        walletAddress: string, \r\n        ownershipOffered: string\r\n    ) => {\r\n        setAccountBalanceLoading(true)\r\n        setSelectedTier((d: any) => {\r\n            return {\r\n                collectionID: collectionID,\r\n                tier: tier\r\n            }\r\n        })\r\n\r\n        if(walletName == 'metamask') {\r\n            const result: any = await getAccountBalanceData(collectionID, collectionID + tier, walletAddress, ownershipOffered);\r\n            setOwnedTokenIds(result.tokenIds);\r\n            setRoyaltyData(result.accountBalanceData);\r\n            setAccountBalanceLoading(false)\r\n        } else if(walletName == 'kaikas') {\r\n            getKlaytnAccountBalanceData(\r\n                collectionID,\r\n                tier,\r\n                walletAddress,\r\n                ownershipOffered\r\n            ).then((response: any) => {\r\n                setOwnedTokenIds(response.data.tokenIds)\r\n                setRoyaltyData(response.data.accountBalanceData)\r\n                setAccountBalanceLoading(false)\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!loading &&\r\n            <>\r\n                <div className='row g-5 g-xl-8 mx-3'>\r\n                    <div className='col-xl-4' style={{ overflow: 'auto', height: '700px' }}>\r\n                        <RoyaltyChart \r\n                            className=\"w-100\" \r\n                            chartData={chartData}\r\n                            walletName={walletName}\r\n                        />\r\n                        <AccountBalance \r\n                            className=\"mt-7\" \r\n                            selectedTier={selectedTier}\r\n                            ownedTokenIds={ownedTokenIds}\r\n                            royaltyData={royaltyData}\r\n                            accountBalanceLoading={accountBalanceLoading}\r\n                        />\r\n                    </div>\r\n                    <div className='col-xl-5'>\r\n                        <AboutUs \r\n                            className=\"\" \r\n                            description={platformDescription}\r\n                            videoURL={platformVideoURL}\r\n                        />\r\n                    </div>\r\n                    <div className='col-xl-3'>\r\n                        <YourTokens \r\n                            className=\"w-100\" \r\n                            tokensMeta={tokensMeta}\r\n                            handleTokenSelect={handleTokenSelect}\r\n                            selectedTier={selectedTier}\r\n                            walletAddress={walletAddress}\r\n                            walletName={walletName}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {/* <div className=\"d-flex w-90 mx-auto flex-warp\">\r\n                    <div className=\"d-flex flex-column\" style={{ height: '700px',  width: '30%', overflow: 'auto' }}>\r\n                        <div className=\"mb-5\" style={{ height: '500px' }}>\r\n                            <RoyaltyChart \r\n                                className=\"w-100\" \r\n                                chartData={chartData}\r\n                            />\r\n                        </div>\r\n                        <div className=\"mt-5\" style={{ height: '200px' }}>\r\n                            <AccountBalance \r\n                                className=\"\" \r\n                                selectedTier={selectedTier}\r\n                                ownedTokenIds={ownedTokenIds}\r\n                                royaltyData={royaltyData}\r\n                                accountBalanceLoading={accountBalanceLoading}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"d-flex flex-column\" style={{  width: '50%', marginLeft: '1.5%', marginRight: '1.5%' }}>\r\n                        <AboutUs className=\"\" />\r\n                    </div>\r\n                    <div className=\"d-flex\" style={{  width: '20%', height: '670px' }}>\r\n                        <YourTokens \r\n                            className=\"w-100\" \r\n                            tokensMeta={tokensMeta}\r\n                            handleTokenSelect={handleTokenSelect}\r\n                            selectedTier={selectedTier}\r\n                            walletAddress={walletAddress}\r\n                            walletName={walletName}\r\n                        />\r\n                    </div>\r\n                </div> */}\r\n                <div className='dash-container'>\r\n                    <span className='fs-4 mb-4'><FormattedMessage id='DASHBOARD_PAGE.FEATURED' /></span>\r\n                    {featuredCollectionData && \r\n                        <div \r\n                            className=\"dash-bg-image mt-4\"\r\n                            style={{ backgroundImage: `url(\"${process.env.REACT_APP_API_COLLECTION_COVER_IMAGE_URL}/${featuredCollectionData.collection_cover_image}\")` }}\r\n                        >\r\n                            <div className=\"dash-bg-text\">\r\n                                <span className=\"text-white fs-2\">{collectionType[featuredCollectionData.collection_type]}</span><br/>\r\n                                <span style={{ fontSize: '30px' }}>{featuredCollectionData.collection_name}</span>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </div>\r\n            </>\r\n            }\r\n            {loading && \r\n                <div className='d-flex w-100 h-100'>\r\n                    <div className='my-auto mx-auto'>\r\n                        <div className='d-flex flex-column justify-content-center'>\r\n                            <span className='text-primary fs-3'>Loading</span> <br />\r\n                            <span className='ms-4'>\r\n                                <CircularProgress />\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard"],"sourceRoot":""}