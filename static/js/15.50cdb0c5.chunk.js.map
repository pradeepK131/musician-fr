{"version":3,"sources":["app/modules/pages/NotVerifiedPage.tsx"],"names":["UserNotVerified","props","useState","resMessage","setResMessage","loading","setLoading","checked","setChecked","isErrorMessage","setIsErrorMessage","verifyfailed","localStorage","getItem","verifyFailedMessage","setVerifyFailedMessage","setTimeout","removeItem","email","useSelector","auth","user","shallowEqual","authToken","accessToken","disableLoading","handleSubmit","e","preventDefault","resendVerificationEmail","then","response","data","success","message","catch","error","setItem","logout","className","style","display","id","onSubmit","undefined","type"],"mappings":"iKAkIeA,UA5Hf,SAAyBC,GAErB,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAA4CN,oBAAS,GAArD,mBAAOO,EAAP,KAAuBC,EAAvB,KAEMC,EAAeC,aAAaC,QAAQ,qBAC1C,EAAsDX,mBAASS,GAA/D,mBAAOG,EAAP,KAA4BC,EAA5B,KAEkB,KAAfZ,GACCa,YAAW,WACPR,GAAW,GACXQ,YAAW,WACPZ,EAAc,MACf,OACJ,KAGJO,GACCK,YAAW,WACTJ,aAAaK,WAAW,qBACxBT,GAAW,GACXQ,YAAW,WACTD,EAAuB,MACtB,OACF,KAGP,IAAQG,EAAeC,aACnB,wBAAe,CACbD,MAAK,UADP,EAAGE,KACWC,YAAP,aAAE,EAAWH,SAEpBI,KAJIJ,MAOAK,EAAmBJ,aAC3B,kBAAe,CACXI,UADJ,EAAGH,KACiBI,eAEpBF,KAJQC,UAWFE,EAAiB,WACnBnB,GAAW,IAGf,SAASoB,EAAaC,GAClBA,EAAEC,iBARFtB,GAAW,GAUXuB,YAAwBX,EAAOK,GAC9BO,MAAK,SAACC,GACAA,EAASC,KAAKC,SACb7B,EAAc2B,EAASC,KAAKE,SAC5BxB,GAAkB,GAClBF,GAAW,GACXiB,KAEGM,EAASC,KAAKE,SACb9B,EAAc2B,EAASC,KAAKE,SAC5BxB,GAAkB,GAClBF,GAAW,GACXiB,MAEArB,EAAc,wBACdM,GAAkB,GAClBF,GAAW,GACXiB,QAKXU,OAAM,SAACC,GACJxB,aAAayB,QAAQ,iBAAkB,qBACvCpC,EAAMqC,YAId,OACI,sBAAKC,UAAU,0BAA0BC,MAAO,CAAEC,QAAS,SAA3D,UACI,qBAAKF,UAAU,gDAAf,+KAIA,sBACIG,GAAG,uBACHH,UAAU,8FACVI,SAAU,SAAChB,GAAD,OAAOD,EAAaC,IAHlC,SAKI,sBAAKY,UAAU,sDAAf,UACgB,KAAfpC,EACG,mCACCM,EACG,cAAC,IAAD,CAAayB,QAAS/B,EAAYI,QAASA,IAE3C,cAAC,IAAD,CAAc2B,QAAS/B,EAAYI,QAASA,MAGhD,KAEqB,KAAxBO,GAAsD,OAAxBA,QAAwD8B,IAAxB9B,EAC3D,cAAC,IAAD,CAAaoB,QAASpB,EAAqBP,QAASA,IACpD,KAEA,yBACImC,GAAG,0BACHG,KAAK,SACLN,UAAU,uDAHd,oCAMKlC,GACG,sBAAMkC,UAAU","file":"static/js/15.50cdb0c5.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport { useSelector, shallowEqual, connect } from \"react-redux\";\r\nimport { resendVerificationEmail } from \"../auth/redux/AuthCRUD\";\r\nimport { AlertSuccess, AlertDanger } from \"../alerts/Alerts\";\r\nimport {RootState} from \"../../../setup\"\r\n\r\nfunction UserNotVerified(props: any) {\r\n\r\n    const [resMessage, setResMessage] = useState(\"\");\r\n    const [loading, setLoading] = useState(false);\r\n    const [checked, setChecked] = useState(true);\r\n    const [isErrorMessage, setIsErrorMessage] = useState(false);\r\n\r\n    const verifyfailed = localStorage.getItem('verifynotcomplete');\r\n    const [verifyFailedMessage, setVerifyFailedMessage] = useState(verifyfailed);\r\n\r\n    if(resMessage !== \"\") {\r\n        setTimeout(() => {\r\n            setChecked(false);\r\n            setTimeout(() => {\r\n                setResMessage(\"\");\r\n            }, 200);\r\n        }, 5000);\r\n    }\r\n\r\n    if(verifyfailed) {\r\n        setTimeout(() => {\r\n          localStorage.removeItem(\"verifynotcomplete\");\r\n          setChecked(false);\r\n          setTimeout(() => {\r\n            setVerifyFailedMessage(\"\");\r\n          }, 200);\r\n        }, 5000);\r\n      }\r\n\r\n    const { email }: any = useSelector<RootState>(\r\n        ({ auth }) => ({\r\n          email: auth.user?.email,\r\n        }),\r\n        shallowEqual\r\n      );\r\n\r\n    const { authToken }: any = useSelector<RootState>(\r\n    ({ auth }) => ({\r\n        authToken: auth.accessToken,\r\n    }),\r\n    shallowEqual\r\n    );\r\n\r\n    const enableLoading = () => {\r\n        setLoading(true);\r\n    };\r\n\r\n    const disableLoading = () => {\r\n        setLoading(false);\r\n    };\r\n\r\n    function handleSubmit(e: any) {\r\n        e.preventDefault();\r\n        enableLoading();\r\n        resendVerificationEmail(email, authToken)\r\n        .then((response: any) => {\r\n            if(response.data.success) {\r\n                setResMessage(response.data.message);\r\n                setIsErrorMessage(false);\r\n                setChecked(true);\r\n                disableLoading();\r\n            } else {\r\n                if(response.data.message) {\r\n                    setResMessage(response.data.message);\r\n                    setIsErrorMessage(true);\r\n                    setChecked(true);\r\n                    disableLoading();\r\n                } else {\r\n                    setResMessage(\"Something went wrong\");\r\n                    setIsErrorMessage(true);\r\n                    setChecked(true);\r\n                    disableLoading();\r\n                }\r\n                \r\n            }\r\n        })\r\n        .catch((error: any) => {\r\n            localStorage.setItem('sessionTimeOut', \"Session timed out\");\r\n            props.logout();\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-form login-forgot\" style={{ display: \"block\" }}>\r\n            <div className=\"text-center text-danger font-weight-bold mb-4\">\r\n                Your account is not verified. Please complete the verification. Click the below button to send a verification mail to your emaill address if not received before.\r\n            </div>\r\n            \r\n            <form\r\n                id=\"kt_not_verified_form\"\r\n                className=\"form fv-plugins-bootstrap fv-plugins-framework animated animate__animated animate__backInUp\"\r\n                onSubmit={(e) => handleSubmit(e)}\r\n            >\r\n                <div className=\"form-group d-flex flex-wrap flex-column flex-center\">\r\n                {resMessage !== \"\" ? (\r\n                    <>\r\n                    {isErrorMessage ? (\r\n                        <AlertDanger message={resMessage} checked={checked} />\r\n                    ) : (\r\n                        <AlertSuccess message={resMessage} checked={checked} />\r\n                    )}\r\n                    </>\r\n                ) : null}\r\n\r\n                {verifyFailedMessage !== \"\" && verifyFailedMessage !== null && verifyFailedMessage !== undefined ? (\r\n                    <AlertDanger message={verifyFailedMessage} checked={checked} />\r\n                ) : null}\r\n\r\n                    <button\r\n                        id=\"kt_resend_verify_submit\"\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primary font-weight-bold px-9 py-4 my-3 mx-4\"\r\n                    >\r\n                        Send Verification Email\r\n                        {loading && (\r\n                            <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                        )}\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    ) \r\n}\r\n \r\nexport default UserNotVerified;"],"sourceRoot":""}