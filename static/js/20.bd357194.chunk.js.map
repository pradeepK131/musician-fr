{"version":3,"sources":["app/modules/yourCollections/components/editWizards/components/steps/Step1.tsx","app/modules/yourCollections/components/editWizards/components/steps/Step2.tsx","app/modules/yourCollections/components/editWizards/components/steps/Step3.tsx","app/modules/yourCollections/components/editWizards/components/steps/Step4.tsx","app/modules/yourCollections/components/editWizards/components/CreateAccountWizardHelper.ts","app/modules/yourCollections/components/editWizards/components/Horizontal.tsx","app/modules/yourCollections/components/editWizards/WizardsPage.tsx"],"names":["Step1","props","useState","artistData","setArtistData","dispatch","useDispatch","getArtistName","artistID","find","data","id","artist_name","useEffect","getArtistsData","then","response","_artistData","artist_data","catch","error","localStorage","setItem","auth","logout","className","value","selectedArtist","name","onChange","e","event","setSelectedArtist","target","setArtistName","map","image","src","process","imageName","URL","createObjectURL","type","accept","handleImageChange","dropCoverImage","dropCoverImageName","handleDropCoverImageChange","legalPDF","toAbsoluteUrl","handlePDFChange","placeholder","dropReleaseDateTime","min","max","preventDefault","setdropReleaseDateTime","handleDropDateTimeChange","as","setSelectedBlockchain","handleBlockhainChange","selectedBlockchain","rows","disabled","defaultChecked","selectedGoldTier","setSelectedGoldTier","r","selectedPlatinumTier","setSelectedPlatinumTier","selectedDiamondTier","setSelectedDiamondTier","Step2","intl","useIntl","formatMessage","image0","imageName0","handleTokenImage0Change","goldTierBenefitCheckboxData","firstDibsNextDrop","handleCheckBoxChange","setGoldTierStdBenefits","setGoldTierBenefitCheckboxData","artistName","goldTierStdBenefits","exclAccessToUnreleased","accessToRoyalCollectorChannel","exclusiveContent","firstDibAllDrop","goldTierBonus","bonus","index","setGoldTierBonus","s","newArr","slice","handleBonusChange","onClick","console","log","length","splice","removeBonusInput","style","background","color","borderColor","Step3","useSelector","events","ecom","image1","imageName1","handleTokenImage1Change","platinumTierBenefitCheckboxData","setPlatinumTierStdBenefits","setPlatinumTierBenefitCheckboxData","platinumTierStdBenefits","platinumTierBonus","setPlatinumTierBonus","Step4","image2","imageName2","handleTokenImage2Change","diamondTierBenefitCheckboxData","setDiamondTierStdBenefits","setDiamondTierBenefitCheckboxData","diamondTierStdBenefits","diamondTierBonus","setDiamondTierBonus","createAccountSchemas","Yup","collectionName","required","label","collectionType","collectionDescription","collectionOwner","defaultStepperOptions","startIndex","animation","animationSpeed","animationNextClass","animationPreviousClass","Horizontal","stepperRef","useRef","stepper","currentSchema","walletAddress","params","URLSearchParams","window","location","search","cid","get","loading","setLoading","screenLoading","setScreenLoading","dataAdded","setDataAdded","isMinted","setIsminted","checked","setChecked","setImage","setDropCoverImage","setImageName","setDropCoverImageName","tokenImage0","setTokenImage0","tokenImage1","setTokenImage1","tokenImage2","setTokenImage2","tokenImageName0","setTokenImageName0","tokenImageName1","setTokenImageName1","tokenImageName2","setTokenImageName2","setLegalPDF","successMessage","setSuccessMessage","errorMessage","setErrorMessage","setCollectionName","setCollectionType","setCollectionDescription","spotifyURL","setSpotifyURL","setCollectionOwner","goldTierPrice","setGoldTierPrice","platinumTierPrice","setPlatinumTierPrice","diamondTierPrice","setDiamondTierPrice","goldTierOwnershipOffered","setGoldTierOwnershipOffered","platinumTierOwnershipOffered","setPlatinumTierOwnershipOffered","diamondTierOwnershipOffered","setDiamondTierOwnershipOffered","goldTierQuantity","setGoldTierQuantity","platinumTierQuantity","setPlatinumTierQuantity","diamondTierQuantity","setDiamondTierQuantity","currentIndex","setCurrentIndex","selectedAnyTiers","setSelectedAnyTiers","current","loadStepper","step","StepperComponent","currentStepIndex","totatStepsNumber","getTokenBenefitCheckboxData","stdBenefits","tokenBenefitdefaultChecboxData","benefit","setAllMetaData","collectionMeta","a","collection_image","collection_cover_image","artist_id","collection_name","collection_type","collection_owner","colDescriptArr","JSON","parse","collection_description","replace","colDescriptStr","lines","spotify_url","blockchain","drop_release_time","is_minted","tiersData","tokenData","tier","tier_image","tier_price","ownership_offered","tier_quantity","goldBenefitsData","tier_extra_benefits","goldStdBenefits","goldCustBenefits","custBenefits","platinumBenefitsData","platinumStdBenefits","platinumCustBenefits","diamondBenefitsData","diamondStdBenefits","diamondCustBenefits","getCollectionMetaById","success","ownershipOffered0","price0","quantity0","ownershipOffered1","price1","quantity1","ownershipOffered2","price2","quantity2","initState","setInitState","setTimeout","files","authToken","accessToken","userID","user","userName","username","shallowEqual","locale","timezone","createInsance","prevStep","goPrev","getCombinedObject","stateSetter","tierBenefitCheckboxDataSetter","text","state","isRemovingElement","property","newData","toggleBenefitCheckboxData","filter","message","ref","validationSchema","initialValues","onSubmit","values","actions","goNext","parseFloat","parseInt","checkRequiredFields","formData","FormData","append","toString","split","stringify","updateCollection","goto","scrollTo","noValidate","path","undefined","CircularProgress","WizardsPage","isAdmin"],"mappings":"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","file":"static/js/20.bd357194.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC, useEffect, useState} from 'react'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport {useDispatch} from 'react-redux'\r\nimport { getArtistsData } from 'app/modules/artistWizard/api'\r\nimport * as auth from '../../../../../auth/redux/AuthRedux'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { toAbsoluteUrl } from '_metronic/helpers'\r\n\r\n\r\nconst Step1 = (props: any) => {\r\n\r\n  const [artistData, setArtistData] = useState<Array<any>>([])\r\n  const dispatch = useDispatch()\r\n  \r\n  const handleBlockhainChange = (event: any) => {\r\n    event.preventDefault()\r\n    props.setSelectedBlockchain(event.target.value)\r\n  }\r\n\r\n  const handleDropDateTimeChange = (event: any) => {\r\n    event.preventDefault()\r\n    props.setdropReleaseDateTime(event.target.value)\r\n  }\r\n\r\n  const handleArtistChange = (event: any) => {\r\n    props.setSelectedArtist(event.target.value)\r\n    props.setArtistName(getArtistName(event.target.value))\r\n  }\r\n\r\n  const getArtistName = (artistID: string) => {\r\n    const artistName = artistData.find((data) => data.id == artistID).artist_name\r\n    return artistName\r\n  }\r\n\r\n  useEffect(() => {\r\n    getArtistsData()\r\n      .then((response) => {\r\n          const _artistData = response.data.artist_data\r\n          setArtistData(_artistData)\r\n      }).catch((error) => {\r\n          localStorage.setItem('sessionTimeOut', 'Session timed out')\r\n          dispatch(auth.actions.logout())\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className='w-100'>\r\n\r\n      <div className='fv-row mb-10'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.ARTIST' /></label>\r\n\r\n            <select\r\n              value={props.selectedArtist}\r\n              className='form-select form-select-lg form-select-solid'\r\n              name='artistName'\r\n              onChange={(e) => handleArtistChange(e)}\r\n            >\r\n              {artistData.map((data: any) => (\r\n                <option key={data.id} value={data.id}>{data.artist_name}</option>\r\n              ))}\r\n            </select>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.DROP_IMAGE' />\r\n          <span className='ms-1'>(Recommended size: 900 x 900)</span>\r\n        </label>\r\n\r\n        {/* {props.image !== \"\" &&\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image)} className='w-300px mb-3' />\r\n          </div>\r\n        } */}\r\n\r\n        {props.image === \"\" ? (\r\n          <div>\r\n            <img src={`${process.env.REACT_APP_API_COLLECTION_IMAGE_URL}/${props.imageName}`} className='w-300px mb-3' />\r\n          </div>\r\n        ): (\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image)} className='w-300px mb-3' />\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <input type=\"file\" id=\"image\" accept=\"image/png, image/jpeg\" onChange={(e) => props.handleImageChange(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.DROP_COVER_IMAGE' />\r\n          <span className='ms-1'>(Recommended size: 1500 x 500)</span>\r\n        </label>\r\n\r\n            {props.dropCoverImage == \"\" ? (\r\n                <div>\r\n                    <img \r\n                        src={`${process.env.REACT_APP_API_COLLECTION_COVER_IMAGE_URL}/${props.dropCoverImageName}`} \r\n                        className='w-600px mb-3' \r\n                    />\r\n                </div>\r\n                ): (\r\n                <div>\r\n                    <img src={URL.createObjectURL(props.dropCoverImage)} className='w-600px mb-3' />\r\n                </div>\r\n            )}\r\n\r\n        <div>\r\n            <input type=\"file\" id=\"image\" accept=\"image/png, image/jpeg\" onChange={(e) => props.handleDropCoverImageChange(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required mb-3'>\r\n          Legal Document\r\n          <span className='ms-1'>(Recommended size: Below 500 KB)</span>\r\n        </label>\r\n\r\n        {/* {props.legalPDF !== \"\" &&\r\n          <div>\r\n            <img src={URL.createObjectURL(props.legalPDF)} className='w-300px mb-3' />\r\n          </div>\r\n        } */}\r\n\r\n        {props.legalPDF == \"\" ? (\r\n            <div>\r\n                <img \r\n                    src={toAbsoluteUrl('/musician/pdf.jpeg')} \r\n                    className='w-200px mb-3' \r\n                />\r\n            </div>\r\n            ): (\r\n              <div>\r\n                  <img \r\n                      src={toAbsoluteUrl('/musician/pdf.jpeg')} \r\n                      className='w-200px mb-3' \r\n                  />\r\n              </div>\r\n        )}\r\n\r\n        <div>\r\n          <input type=\"file\" id=\"image1\" accept=\".pdf\" onChange={(e) => props.handlePDFChange(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.COLLECTION_NAME' />\r\n          <span className='ms-1'>(Name your collection)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='collectionName'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          <ErrorMessage name='collectionName' />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.COLLECTION_OWNER_WALLET_ADDRESS' />\r\n          <span className='ms-1'>(Admin wallet which will receive primary sale amount)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='collectionOwner'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          <ErrorMessage name='collectionOwner' />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'><FormattedMessage id='CREATE_EDIT_COLLECTION.SPOTIFY_TRACK_URL' /></label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='spotifyURL'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          <ErrorMessage name='spotifyURL' />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'><FormattedMessage id='CREATE_EDIT_COLLECTION.DROP_RELEASE_TIME' /></label>\r\n\r\n        <input \r\n          type=\"datetime-local\" \r\n          className='form-control form-control-lg form-control-solid'\r\n          value={props.dropReleaseDateTime}\r\n          min=\"2022-06-07T00:00\" \r\n          max=\"2040-06-14T00:00\"\r\n          onChange={(event) => handleDropDateTimeChange(event)}\r\n        />\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='spotifyURL' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='fv-row mb-10'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.COLLECTION_TYPE' /></label>\r\n\r\n        <Field\r\n          as='select'\r\n          name='collectionType'\r\n          className='form-select form-select-lg form-select-solid'\r\n        >\r\n          <option value=\"\">Select collection type</option>\r\n          <option value=\"single\">Single</option>\r\n          <option value=\"single-remix\">Single & Remixes</option>\r\n          <option value=\"ep\">EP</option>\r\n        </Field>\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          <ErrorMessage name='collectionType' />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='fv-row mb-10'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.BLOCKCHAIN' /></label>\r\n\r\n        <select\r\n          className='form-select form-select-lg form-select-solid'\r\n          onChange={(event) => handleBlockhainChange(event)}\r\n          value={props.selectedBlockchain}\r\n        >\r\n          <option value=\"\">Select Blockchain</option>\r\n          <option value=\"ethereum\">Ethereum Mainnet</option>\r\n          <option value=\"klaytn\">Klaytn Mainnet</option>\r\n        </select>\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='blockchain' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.COLLECTION_DESCRIPTION' /></label>\r\n\r\n        <Field\r\n          as='textarea'\r\n          name='collectionDescription'\r\n          className='form-control form-control-lg form-control-solid'\r\n          rows={5}\r\n        ></Field>\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          <ErrorMessage name='collectionDescription' />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.SELECT_TIERS' /></label>\r\n\r\n        <div className='d-flex mt-3'>\r\n          <label className='form-check form-check-custom form-check-solid align-items-start me-3'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              disabled\r\n              defaultChecked={props.selectedGoldTier}\r\n              onChange={() =>{\r\n                props.setSelectedGoldTier((r: any) => {return !r})\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER.GOLD' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start me-3'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              disabled\r\n              defaultChecked={props.selectedPlatinumTier}\r\n              onChange={() => {\r\n                props.setSelectedPlatinumTier((r: any) => {return !r})\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER.PLATINUM' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start me-3'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              disabled\r\n              defaultChecked={props.selectedDiamondTier}\r\n              onChange={() => {\r\n                props.setSelectedDiamondTier((r: any) => {return !r})\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER.DIAMOND' /></span>\r\n            </span>\r\n          </label>\r\n        </div>\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentAbstract' /> */}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step1}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC, useEffect} from 'react'\r\nimport {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\n\r\n\r\n\r\nconst Step2 = (props: any) => {\r\n\r\n  const intl = useIntl()\r\n\r\n  const handleBonusChange = (e: any) => {\r\n    e.preventDefault();\r\n    const index = e.target.id;\r\n\r\n    props.setGoldTierBonus((s: any) => {\r\n      const newArr = s.slice();\r\n    \r\n      if(e.target.name === 'content') {\r\n        newArr[index] = e.target.value;\r\n      } else {\r\n        newArr[index] = e.target.value;\r\n      }\r\n\r\n      return newArr;\r\n    });\r\n  }\r\n\r\n  const addBonusInput = () => {\r\n    props.setGoldTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const lastId = s[s.length - 1].id;\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      } else {\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeBonusInput = (index: any) => {\r\n    console.log(index)\r\n    props.setGoldTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const newArr = s.slice();\r\n        newArr.splice(index, 1);\r\n        return [...newArr]\r\n      } else {\r\n        return s\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='w-100'>\r\n\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER' /></label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name=''\r\n          placeholder=''\r\n          value={intl.formatMessage({id: \"CREATE_EDIT_COLLECTION.TIER.GOLD\"})}\r\n          disabled={true}\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.TOKEN_IMAGE' />\r\n          <span className='ms-1'>(Recommended size: 500 x 500)</span>\r\n        </label>\r\n\r\n        {/* {props.image0 !== \"\" &&\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image0)} className='w-300px mb-3' />\r\n          </div>\r\n        } */}\r\n\r\n        {props.image0 === \"\" ? (\r\n          <div>\r\n            <img src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${props.imageName0}`} className='w-300px mb-3' />\r\n          </div>\r\n        ): (\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image0)} className='w-300px mb-3' />\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <input type=\"file\" id=\"image\" accept=\"image/png, image/jpeg\" onChange={(e) => props.handleTokenImage0Change(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.OWNERSHIP_OFFERED' /> \r\n          <span className='ms-1'>(Ownership of a single Gold tier token in %)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='ownershipOffered0'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.PRICE' /> \r\n          ({props.selectedBlockchain !== '' && props.selectedBlockchain == 'ethereum' ? 'Price of single gold tier token in ETH' : 'Price of single gold tier token in KLAY'})\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='price0'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.QUANTITY' />\r\n          <span className='ms-1'>(Total quantity of gold tier tokens)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='quantity0'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.SELECT_TOKEN_BENEFITS' /></label>\r\n\r\n        <div className='mt-3'>\r\n          <label className='form-check form-check-custom form-check-solid align-items-start mt-2 my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.goldTierBenefitCheckboxData.firstDibsNextDrop}\r\n              onChange={() =>{\r\n                props.handleCheckBoxChange(\r\n                  props.setGoldTierStdBenefits, \r\n                  props.setGoldTierBenefitCheckboxData,\r\n                  `First dibs on the next ${props.artistName ? props.artistName : ''} drop`,\r\n                  props.goldTierStdBenefits,\r\n                  props.goldTierBenefitCheckboxData.firstDibsNextDrop,\r\n                  'firstDibsNextDrop'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on the next {props.artistName ? props.artistName : ''} drop</span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.goldTierBenefitCheckboxData.exclAccessToUnreleased}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setGoldTierStdBenefits, \r\n                  props.setGoldTierBenefitCheckboxData,\r\n                  'Exclusive access to unreleased music',\r\n                  props.goldTierStdBenefits,\r\n                  props.goldTierBenefitCheckboxData.exclAccessToUnreleased,\r\n                  'exclAccessToUnreleased'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_ACCESS' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.goldTierBenefitCheckboxData.accessToRoyalCollectorChannel}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setGoldTierStdBenefits, \r\n                  props.setGoldTierBenefitCheckboxData,\r\n                  'Access to Royal collector Discord channel',\r\n                  props.goldTierStdBenefits,\r\n                  props.goldTierBenefitCheckboxData.accessToRoyalCollectorChannel,\r\n                  'accessToRoyalCollectorChannel'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.ACCESS_TO_DISCORD' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.goldTierBenefitCheckboxData.exclusiveContent}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setGoldTierStdBenefits, \r\n                  props.setGoldTierBenefitCheckboxData,\r\n                  'Exclusive Content',\r\n                  props.goldTierStdBenefits,\r\n                  props.goldTierBenefitCheckboxData.exclusiveContent,\r\n                  'exclusiveContent'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_CONTENT' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2 mb-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.goldTierBenefitCheckboxData.firstDibAllDrop}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setGoldTierStdBenefits, \r\n                  props.setGoldTierBenefitCheckboxData,\r\n                  `First dibs on all future ${props.artistName ? props.artistName : ''} drops`,\r\n                  props.goldTierStdBenefits,\r\n                  props.goldTierBenefitCheckboxData.firstDibAllDrop,\r\n                  'firstDibAllDrop'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on all future {props.artistName ? props.artistName : ''} drops</span>\r\n            </span>\r\n          </label>\r\n        </div>\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentAbstract' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_CUSTOM_BENEFITS' /></label>\r\n        {props.goldTierBonus.map((bonus: any, index: any) => (\r\n          <>\r\n          <textarea\r\n            key={bonus.id}\r\n            name=''\r\n            id={index}\r\n            className='form-control form-control-lg form-control-solid mt-4'\r\n            rows={5}\r\n            value={bonus}\r\n            onChange={(event) => handleBonusChange(event)}\r\n          ></textarea>\r\n\r\n          {/* <div className='fv-plugins-message-container invalid-feedback'>\r\n            <ErrorMessage name='collectionDescription' />\r\n          </div> */}\r\n          <button key={index} onClick={() => removeBonusInput(index)} type='button' className='btn btn-danger mt-4'>\r\n            <FormattedMessage id='CREATE_EDIT_COLLECTION.REMOVE_CUSTOM_BENEFITS' />\r\n          </button>\r\n          </>\r\n        ))}\r\n      </div>\r\n  \r\n\r\n      <button onClick={addBonusInput} type='button' style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }} className='rounded px-4 py-2'>\r\n        <FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_NEW_BENEFITS' />\r\n      </button>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step2}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC} from 'react'\r\nimport {useSelector, shallowEqual} from 'react-redux'\r\nimport {RootState} from '../../../../../../../setup'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\n\r\nconst Step3 = (props: any) => {\r\n\r\n  const intl = useIntl()\r\n\r\n  const {events}: any = useSelector<RootState>(\r\n    ({ecom}) => ({\r\n      events: ecom.events\r\n    })\r\n  )\r\n \r\n  const handleBonusChange = (e: any) => {\r\n    e.preventDefault();\r\n    const index = e.target.id;\r\n\r\n    props.setPlatinumTierBonus((s: any) => {\r\n      const newArr = s.slice();\r\n    \r\n      if(e.target.name === 'content') {\r\n        newArr[index] = e.target.value;\r\n      } else {\r\n        newArr[index] = e.target.value;\r\n      }\r\n\r\n      return newArr;\r\n    });\r\n  }\r\n\r\n  const addBonusInput = () => {\r\n    props.setPlatinumTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const lastId = s[s.length - 1].id;\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      } else {\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeBonusInput = (index: any) => {\r\n    props.setPlatinumTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const newArr = s.slice();\r\n        newArr.splice(index, 1);\r\n        return [...newArr]\r\n      } else {\r\n        return s\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='w-100 step-3-large'>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER' /></label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name=''\r\n          placeholder=''\r\n          value={intl.formatMessage({id: \"CREATE_EDIT_COLLECTION.TIER.PLATINUM\"})}\r\n          disabled={true}\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.TOKEN_IMAGE' />\r\n          <span className='ms-1'>(Recommended size: 500 x 500)</span>\r\n        </label>\r\n\r\n        {props.image1 === \"\" ? (\r\n          <div>\r\n            <img src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${props.imageName1}`} className='w-300px mb-3' />\r\n          </div>\r\n        ): (\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image1)} className='w-300px mb-3' />\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <input type=\"file\" id=\"image\" accept=\"image/png, image/jpeg\" onChange={(e) => props.handleTokenImage1Change(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.OWNERSHIP_OFFERED' /> \r\n          <span className='ms-1'>(Ownership of a single Platinum tier token in %)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='ownershipOffered1'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.PRICE' /> \r\n          ({props.selectedBlockchain !== '' && props.selectedBlockchain == 'ethereum' ? 'Price of single platinum tier token in ETH' : 'Price of single platinum tier token in KLAY'})\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='price1'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.QUANTITY' />\r\n          <span className='ms-1'>(Total quantity of platinum tier tokens)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='quantity1'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.SELECT_TOKEN_BENEFITS' /></label>\r\n\r\n        <div className='mt-3'>\r\n          <label className='form-check form-check-custom form-check-solid align-items-start mt-2 my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.platinumTierBenefitCheckboxData.firstDibsNextDrop}\r\n              onChange={() =>{\r\n                props.handleCheckBoxChange(\r\n                  props.setPlatinumTierStdBenefits, \r\n                  props.setPlatinumTierBenefitCheckboxData,\r\n                  `First dibs on the next ${props.artistName ? props.artistName : ''} drop`,\r\n                  props.platinumTierStdBenefits,\r\n                  props.platinumTierBenefitCheckboxData.firstDibsNextDrop,\r\n                  'firstDibsNextDrop'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on the next {props.artistName ? props.artistName : ''} drop</span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.platinumTierBenefitCheckboxData.exclAccessToUnreleased}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setPlatinumTierStdBenefits, \r\n                  props.setPlatinumTierBenefitCheckboxData,\r\n                  'Exclusive access to unreleased music',\r\n                  props.platinumTierStdBenefits,\r\n                  props.platinumTierBenefitCheckboxData.exclAccessToUnreleased,\r\n                  'exclAccessToUnreleased'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_ACCESS' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.platinumTierBenefitCheckboxData.accessToRoyalCollectorChannel}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setPlatinumTierStdBenefits, \r\n                  props.setPlatinumTierBenefitCheckboxData,\r\n                  'Access to Royal collector Discord channel',\r\n                  props.platinumTierStdBenefits,\r\n                  props.platinumTierBenefitCheckboxData.accessToRoyalCollectorChannel,\r\n                  'accessToRoyalCollectorChannel'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.ACCESS_TO_DISCORD' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.platinumTierBenefitCheckboxData.exclusiveContent}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setPlatinumTierStdBenefits, \r\n                  props.setPlatinumTierBenefitCheckboxData,\r\n                  'Exclusive Content',\r\n                  props.platinumTierStdBenefits,\r\n                  props.platinumTierBenefitCheckboxData.exclusiveContent,\r\n                  'exclusiveContent'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_CONTENT' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2 mb-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.platinumTierBenefitCheckboxData.firstDibAllDrop}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setPlatinumTierStdBenefits, \r\n                  props.setPlatinumTierBenefitCheckboxData,\r\n                  `First dibs on all future ${props.artistName ? props.artistName : ''} drops`,\r\n                  props.platinumTierStdBenefits,\r\n                  props.platinumTierBenefitCheckboxData.firstDibAllDrop,\r\n                  'firstDibAllDrop'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on all future {props.artistName ? props.artistName : ''} drops</span>\r\n            </span>\r\n          </label>\r\n        </div>\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentAbstract' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_CUSTOM_BENEFITS' /></label>\r\n        {props.platinumTierBonus.map((bonus: any, index: any) => (\r\n          <>\r\n          <textarea\r\n            key={bonus.id}\r\n            name=''\r\n            id={index}\r\n            className='form-control form-control-lg form-control-solid mt-4'\r\n            rows={5}\r\n            value={bonus}\r\n            onChange={(event) => handleBonusChange(event)}\r\n          ></textarea>\r\n\r\n          {/* <div className='fv-plugins-message-container invalid-feedback'>\r\n            <ErrorMessage name='collectionDescription' />\r\n          </div> */}\r\n          <button key={index} onClick={() => removeBonusInput(index)} type='button' className='btn btn-danger mt-4'>\r\n            <FormattedMessage id='CREATE_EDIT_COLLECTION.REMOVE_CUSTOM_BENEFITS' />\r\n          </button>\r\n          </>\r\n        ))}\r\n      </div>\r\n  \r\n\r\n      <button onClick={addBonusInput} type='button' style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }} className='py-2 px-4 rounded'>\r\n        <FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_NEW_BENEFITS' />\r\n      </button>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step3}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC} from 'react'\r\nimport {KTSVG, toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {Field, ErrorMessage} from 'formik'\r\nimport { FormattedMessage, useIntl } from 'react-intl'\r\n\r\nconst Step4 = (props: any) => {\r\n\r\n  const intl = useIntl()\r\n\r\n  const handleBonusChange = (e: any) => {\r\n    e.preventDefault();\r\n    const index = e.target.id;\r\n\r\n    props.setDiamondTierBonus((s: any) => {\r\n      const newArr = s.slice();\r\n    \r\n      if(e.target.name === 'content') {\r\n        newArr[index] = e.target.value;\r\n      } else {\r\n        newArr[index] = e.target.value;\r\n      }\r\n\r\n      return newArr;\r\n    });\r\n  }\r\n\r\n  const addBonusInput = () => {\r\n    props.setDiamondTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const lastId = s[s.length - 1].id;\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      } else {\r\n        return [\r\n          ...s,\r\n          \"\"\r\n        ];\r\n      }\r\n    });\r\n  };\r\n\r\n  const removeBonusInput = (index: any) => {\r\n    props.setDiamondTierBonus((s: any) => {\r\n      if(s.length > 0) {\r\n        const newArr = s.slice();\r\n        newArr.splice(index, 1);\r\n        return [...newArr]\r\n      } else {\r\n        return s\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className='w-100'>\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'><FormattedMessage id='CREATE_EDIT_COLLECTION.TIER' /></label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name=''\r\n          placeholder=''\r\n          value={intl.formatMessage({id: \"CREATE_EDIT_COLLECTION.TIER.DIAMOND\"})}\r\n          disabled={true}\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.TOKEN_IMAGE' />\r\n          <span className='ms-1'>(Recommended size: 500 x 500)</span>\r\n        </label>\r\n\r\n        {/* {props.image2 !== \"\" &&\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image2)} className='w-300px mb-3' />\r\n          </div>\r\n        } */}\r\n\r\n        {props.image2 === \"\" ? (\r\n          <div>\r\n            <img src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${props.imageName2}`} className='w-300px mb-3' />\r\n          </div>\r\n        ): (\r\n          <div>\r\n            <img src={URL.createObjectURL(props.image2)} className='w-300px mb-3' />\r\n          </div>\r\n        )}\r\n\r\n        <div>\r\n          <input type=\"file\" id=\"image\" accept=\"image/png, image/jpeg\" onChange={(e) => props.handleTokenImage2Change(e)} />\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.OWNERSHIP_OFFERED' /> \r\n          <span className='ms-1'>(Ownership of a single Diamond tier token in %)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='ownershipOffered2'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.PRICE' /> \r\n          ({props.selectedBlockchain !== '' && props.selectedBlockchain == 'ethereum' ? 'Price of single diamond tier token in ETH' : 'Price of single diamond tier token in KLAY'})\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='price2'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label mb-3 required'>\r\n          <FormattedMessage id='CREATE_EDIT_COLLECTION.QUANTITY' />\r\n          <span className='ms-1'>(Total quantity of diamond tier tokens)</span>\r\n        </label>\r\n\r\n        <Field\r\n          type='text'\r\n          className='form-control form-control-lg form-control-solid'\r\n          name='quantity2'\r\n          placeholder=''\r\n        />\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentName' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.SELECT_TOKEN_BENEFITS' /></label>\r\n\r\n        <div className='mt-3'>\r\n          <label className='form-check form-check-custom form-check-solid align-items-start mt-2 my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.diamondTierBenefitCheckboxData.firstDibsNextDrop}\r\n              onChange={() =>{\r\n                props.handleCheckBoxChange(\r\n                  props.setDiamondTierStdBenefits, \r\n                  props.setDiamondTierBenefitCheckboxData,\r\n                  `First dibs on the next ${props.artistName ? props.artistName : ''} drop`,\r\n                  props.diamondTierStdBenefits,\r\n                  props.diamondTierBenefitCheckboxData.firstDibsNextDrop,\r\n                  'firstDibsNextDrop'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on the next {props.artistName ? props.artistName : ''} drop</span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.diamondTierBenefitCheckboxData.exclAccessToUnreleased}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setDiamondTierStdBenefits, \r\n                  props.setDiamondTierBenefitCheckboxData,\r\n                  'Exclusive access to unreleased music',\r\n                  props.diamondTierStdBenefits,\r\n                  props.diamondTierBenefitCheckboxData.exclAccessToUnreleased,\r\n                  'exclAccessToUnreleased'\r\n                )\r\n              }}\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_ACCESS' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.diamondTierBenefitCheckboxData.accessToRoyalCollectorChannel}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setDiamondTierStdBenefits, \r\n                  props.setDiamondTierBenefitCheckboxData,\r\n                  'Access to Royal collector Discord channel',\r\n                  props.diamondTierStdBenefits,\r\n                  props.diamondTierBenefitCheckboxData.accessToRoyalCollectorChannel,\r\n                  'accessToRoyalCollectorChannel'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.ACCESS_TO_DISCORD' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.diamondTierBenefitCheckboxData.exclusiveContent}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setDiamondTierStdBenefits, \r\n                  props.setDiamondTierBenefitCheckboxData,\r\n                  'Exclusive Content',\r\n                  props.diamondTierStdBenefits,\r\n                  props.diamondTierBenefitCheckboxData.exclusiveContent,\r\n                  'exclusiveContent'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'><FormattedMessage id='CREATE_EDIT_COLLECTION.EXCLUSIVE_CONTENT' /></span>\r\n            </span>\r\n          </label>\r\n\r\n          <label className='form-check form-check-custom form-check-solid align-items-start my-2 mb-2'>\r\n            <input\r\n              className='form-check-input'\r\n              type='checkbox'\r\n              name='email-preferences[]'\r\n              defaultChecked={props.diamondTierBenefitCheckboxData.firstDibAllDrop}\r\n              onChange={() => {\r\n                props.handleCheckBoxChange(\r\n                  props.setDiamondTierStdBenefits, \r\n                  props.setDiamondTierBenefitCheckboxData,\r\n                  `First dibs on all future${props.artistName ? props.artistName : ''} drops`,\r\n                  props.diamondTierStdBenefits,\r\n                  props.diamondTierBenefitCheckboxData.firstDibAllDrop,\r\n                  'firstDibAllDrop'\r\n                )\r\n              }\r\n              }\r\n            />\r\n\r\n            <span className='form-check-label d-flex flex-column align-items-start'>\r\n              <span className='fw-bold fs-5 mb-0'>First dibs on all future {props.artistName ? props.artistName : ''} drops</span>\r\n            </span>\r\n          </label>\r\n        </div>\r\n\r\n        <div className='fv-plugins-message-container invalid-feedback'>\r\n          {/* <ErrorMessage name='patentAbstract' /> */}\r\n        </div>\r\n      </div>\r\n\r\n      <div className='mb-10 fv-row'>\r\n        <label className='form-label required'><FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_CUSTOM_BENEFITS' /></label>\r\n        {props.diamondTierBonus.map((bonus: any, index: any) => (\r\n          <>\r\n          <textarea\r\n            key={bonus.id}\r\n            name=''\r\n            id={index}\r\n            className='form-control form-control-lg form-control-solid mt-4'\r\n            rows={5}\r\n            value={bonus}\r\n            onChange={(event) => handleBonusChange(event)}\r\n          ></textarea>\r\n\r\n          {/* <div className='fv-plugins-message-container invalid-feedback'>\r\n            <ErrorMessage name='collectionDescription' />\r\n          </div> */}\r\n          <button key={index} onClick={() => removeBonusInput(index)} type='button' className='btn btn-danger mt-4'>\r\n            <FormattedMessage id='CREATE_EDIT_COLLECTION.REMOVE_CUSTOM_BENEFITS' />\r\n          </button>\r\n          </>\r\n        ))}\r\n      </div>\r\n  \r\n      <button onClick={addBonusInput} type='button' style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }} className='py-2 px-4 rounded'>\r\n        <FormattedMessage id='CREATE_EDIT_COLLECTION.ADD_NEW_BENEFITS' />\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {Step4}\r\n","import * as Yup from 'yup'\r\n\r\nexport interface ICreateAccount {\r\n  // artistName: string\r\n  collectionName: string\r\n  spotifyURL: string\r\n  collectionType: string\r\n  blockchain: string\r\n  collectionDescription: string\r\n  collectionOwner: string\r\n  // patentStatus: string\r\n  // startPrice: string\r\n  // buyoutPrice: string\r\n  ownershipOffered0: string\r\n  price0: string\r\n  quantity0: string \r\n  ownershipOffered1: string\r\n  price1: string\r\n  quantity1: string \r\n  ownershipOffered2: string\r\n  price2: string\r\n  quantity2: string \r\n}\r\n\r\nexport interface ITokenBenefitCheckboxData {\r\n  firstDibsNextDrop: boolean\r\n  firstDibAllDrop: boolean\r\n  accessToRoyalCollectorChannel: boolean\r\n  exclusiveContent: boolean\r\n  exclAccessToUnreleased: boolean\r\n}\r\n\r\nconst createAccountSchemas = [\r\n  Yup.object({\r\n    // artistName: Yup.string().required().label('Artist Name'),\r\n    collectionName: Yup.string().required().label('Collection Name'),\r\n    collectionType: Yup.string().required().label('Collection type'),\r\n    collectionDescription: Yup.string().required().label('Collection Description'),\r\n    collectionOwner: Yup.string().required().label('Collection Owner')\r\n    // patentStatus: Yup.string().required().label('Patent Status'),\r\n    // startPrice: Yup.string().required().label('Current Price'),\r\n    // buyoutPrice: Yup.string().required().label('Buyout Price'),\r\n  }),\r\n  // Yup.object({\r\n  //   patentAbstract: Yup.string().required().label('Patent Abstract'),\r\n  //   patentSummary: Yup.string().required().label('Patent summary'),\r\n  //   fillingInfo: Yup.string().required().label('Filling information'),\r\n  //   appStatus: Yup.string().required().label('Application status'),\r\n  // }),\r\n  // Yup.object({\r\n  //   proHist1: Yup.date().required().label('Date'),\r\n  //   proHist2: Yup.date().required().label('Date'),\r\n  //   proHist3: Yup.date().required().label('Date'),\r\n  // }),\r\n  // Yup.object({\r\n  //   businessName: Yup.string().required().label('Business Name'),\r\n  //   businessDescriptor: Yup.string().required().label('Shortened Descriptor'),\r\n  //   businessType: Yup.string().required().label('Corporation Type'),\r\n  //   businessEmail: Yup.string().required().label('Contact Email'),\r\n  // }),\r\n  // Yup.object({\r\n  //   nameOnCard: Yup.string().required().label('Name On Card'),\r\n  //   cardNumber: Yup.string().required().label('Card Number'),\r\n  //   cardExpiryMonth: Yup.string().required().label('Expiration Month'),\r\n  //   cardExpiryYear: Yup.string().required().label('Expiration Year'),\r\n  //   cardCvv: Yup.string().required().label('CVV'),\r\n  // }),\r\n]\r\n\r\n\r\n\r\n\r\nexport {\r\n  createAccountSchemas\r\n}\r\n","import React, {FC, useEffect, useRef, useState} from 'react'\r\nimport {useSelector, shallowEqual, useDispatch} from 'react-redux'\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport {Step1} from './steps/Step1'\r\nimport {Step2} from './steps/Step2'\r\nimport {Step3} from './steps/Step3'\r\nimport { Step4 } from './steps/Step4'\r\nimport {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {StepperComponent, IStepperOptions} from '../../../../../../_metronic/assets/ts/components'\r\nimport {Formik, Form, FormikValues} from 'formik'\r\nimport {\r\n  createAccountSchemas, \r\n  ICreateAccount,\r\n  ITokenBenefitCheckboxData\r\n} from './CreateAccountWizardHelper'\r\nimport { updateCollection } from '../../../crud/collectionCRUD'; \r\nimport {RootState} from '../../../../../../setup'\r\nimport {AlertDanger, AlertSuccess} from '../../../../alerts/Alerts'\r\nimport * as auth from '../../../../auth/redux/AuthRedux'\r\nimport {actions} from '../../../../explore/redux/ecomRedux'\r\nimport { getCollectionMetaById } from 'app/modules/yourCollections/crud/collectionCRUD'\r\nimport { FormattedMessage } from 'react-intl';\r\n\r\n\r\nconst defaultStepperOptions: IStepperOptions = {\r\n  startIndex: 1,\r\n  animation: false,\r\n  animationSpeed: '0.3s',\r\n  animationNextClass: 'animate__animated animate__slideInRight animate__fast',\r\n  animationPreviousClass: 'animate__animated animate__slideInLeft animate__fast',\r\n}\r\n\r\nconst Horizontal: FC = () => {\r\n  const stepperRef = useRef<HTMLDivElement | null>(null)\r\n  const stepper = useRef<StepperComponent | null>(null)\r\n  const [currentSchema, setCurrentSchema] = useState(createAccountSchemas[0])\r\n\r\n  const {walletAddress} : any = useSelector<RootState>(\r\n    ({auth}) => ({\r\n      walletAddress: auth.walletAddress\r\n    })\r\n  )\r\n\r\n  const params = new URLSearchParams(window.location.search);\r\n  const cid: string | null = params.get(\"id\");\r\n\r\n  const [loading, setLoading] = useState<boolean>(false)\r\n  const [screenLoading, setScreenLoading] = useState<boolean>(true)\r\n  const [dataAdded, setDataAdded] = useState<boolean>(false)\r\n  const [isMinted, setIsminted] = useState<string>('')\r\n  // const [collectionMeta, setCollectionMeta] = useState<any>(null)\r\n\r\n  const [checked, setChecked] = useState<boolean>(false)\r\n\r\n  const [image, setImage] = useState<any>(\"\")\r\n  const [dropCoverImage, setDropCoverImage] = useState<any>(\"\")\r\n  const [imageName, setImageName] = useState<any>(\"\")\r\n  const [dropCoverImageName, setDropCoverImageName] = useState<any>(\"\")\r\n  const [tokenImage0, setTokenImage0] = useState<any>(\"\")\r\n  const [tokenImage1, setTokenImage1] = useState<any>(\"\")\r\n  const [tokenImage2, setTokenImage2] = useState<any>(\"\")\r\n  const [tokenImageName0, setTokenImageName0] = useState<any>(\"\")\r\n  const [tokenImageName1, setTokenImageName1] = useState<any>(\"\")\r\n  const [tokenImageName2, setTokenImageName2] = useState<any>(\"\")\r\n  const [legalPDF, setLegalPDF] = useState<any>(\"\")\r\n  const [successMessage, setSuccessMessage] = useState<string>(\"\")\r\n  const [errorMessage, setErrorMessage] = useState<any>(\"\")\r\n  const dispatch = useDispatch()\r\n\r\n  const [artistName, setArtistName] = useState<string>('')\r\n  const [selectedArtist, setSelectedArtist] = useState<string>('')\r\n  const [collectionName, setCollectionName] = useState<string>('')\r\n  const [collectionType, setCollectionType] = useState<string>('')\r\n  const [collectionDescription, setCollectionDescription] = useState<string>('')\r\n  const [spotifyURL, setSpotifyURL] = useState<string>('')\r\n  const [collectionOwner, setCollectionOwner] = useState<string>('')\r\n\r\n  const [selectedGoldTier, setSelectedGoldTier] = useState<boolean>(false)\r\n  const [selectedPlatinumTier, setSelectedPlatinumTier] = useState<boolean>(false)\r\n  const [selectedDiamondTier, setSelectedDiamondTier] = useState<boolean>(false)\r\n  const [selectedBlockchain, setSelectedBlockchain] = useState<string>('')\r\n\r\n  const [goldTierStdBenefits, setGoldTierStdBenefits] = useState<Array<any>>([])\r\n  const [platinumTierStdBenefits, setPlatinumTierStdBenefits] = useState<Array<string>>([])\r\n  const [diamondTierStdBenefits, setDiamondTierStdBenefits] = useState<Array<string>>([])\r\n\r\n  const [goldTierBonus, setGoldTierBonus] = useState<Array<any>>([])\r\n  const [platinumTierBonus, setPlatinumTierBonus] = useState<Array<string>>([])\r\n  const [diamondTierBonus, setDiamondTierBonus] = useState<Array<string>>([])\r\n\r\n  const [goldTierPrice, setGoldTierPrice] = useState<string>(\"\")\r\n  const [platinumTierPrice, setPlatinumTierPrice] = useState<string>(\"\")\r\n  const [diamondTierPrice, setDiamondTierPrice] = useState<string>(\"\")\r\n\r\n  const [goldTierOwnershipOffered, setGoldTierOwnershipOffered] = useState<string>(\"\")\r\n  const [platinumTierOwnershipOffered, setPlatinumTierOwnershipOffered] = useState<string>(\"\")\r\n  const [diamondTierOwnershipOffered, setDiamondTierOwnershipOffered] = useState<string>(\"\")\r\n\r\n  const [goldTierQuantity, setGoldTierQuantity] = useState<string>(\"\")\r\n  const [platinumTierQuantity, setPlatinumTierQuantity] = useState<string>(\"\")\r\n  const [diamondTierQuantity, setDiamondTierQuantity] = useState<string>(\"\")\r\n\r\n  const [currentIndex, setCurrentIndex] = useState<any>(null)\r\n  const [dropReleaseDateTime, setdropReleaseDateTime] = useState(\"2018-06-12T19:30\")\r\n  const [selectedAnyTiers, setSelectedAnyTiers] = useState<boolean>(selectedGoldTier || selectedPlatinumTier || selectedDiamondTier)\r\n\r\n  const [goldTierBenefitCheckboxData, setGoldTierBenefitCheckboxData] = useState<any>({})\r\n  const [platinumTierBenefitCheckboxData, setPlatinumTierBenefitCheckboxData] = useState<any>({})\r\n  const [diamondTierBenefitCheckboxData, setDiamondTierBenefitCheckboxData] = useState<any>({})\r\n  useEffect(() => {\r\n    if (!stepperRef.current) {\r\n      console.log('No stepper')\r\n      return\r\n    }\r\n\r\n    loadStepper()\r\n  }, [stepperRef])\r\n\r\n  useEffect(() => {\r\n    if (!stepperRef.current) {\r\n      return\r\n    }\r\n\r\n    let step = new StepperComponent(stepperRef.current as HTMLDivElement, defaultStepperOptions)\r\n    stepper.current = step\r\n\r\n    setSelectedAnyTiers(selectedGoldTier || selectedPlatinumTier || selectedDiamondTier)\r\n  }, [selectedGoldTier, selectedPlatinumTier, selectedDiamondTier])\r\n\r\n  useEffect(() => {\r\n    if(stepper.current?.currentStepIndex && stepper.current.totatStepsNumber) {\r\n      setCurrentIndex(stepper.current?.currentStepIndex)\r\n    }\r\n  }, [stepper.current])\r\n\r\n  const getTokenBenefitCheckboxData = (stdBenefits: Array<any>, artistName: string) => {\r\n    let tokenBenefitdefaultChecboxData: ITokenBenefitCheckboxData = {\r\n      firstDibsNextDrop: false,\r\n      firstDibAllDrop: false,\r\n      accessToRoyalCollectorChannel: false,\r\n      exclusiveContent: false,\r\n      exclAccessToUnreleased: false\r\n    }\r\n\r\n    stdBenefits.map((benefit: any) => {\r\n      if(benefit == `First dibs on the next ${artistName ? artistName : ''} drop`) {\r\n        tokenBenefitdefaultChecboxData.firstDibsNextDrop = true\r\n      }\r\n      if(benefit == 'Exclusive access to unreleased music') {\r\n        tokenBenefitdefaultChecboxData.exclAccessToUnreleased = true\r\n      }\r\n      if(benefit == 'Access to Royal collector Discord channel') {\r\n        tokenBenefitdefaultChecboxData.accessToRoyalCollectorChannel = true\r\n      }\r\n      if(benefit == 'Exclusive Content') {\r\n        tokenBenefitdefaultChecboxData.exclusiveContent = true\r\n      }\r\n      if(benefit == `First dibs on all future ${artistName ? artistName : ''} drops`) {\r\n        tokenBenefitdefaultChecboxData.firstDibAllDrop = true\r\n      }\r\n    })\r\n    return tokenBenefitdefaultChecboxData\r\n  }\r\n\r\n  const setAllMetaData = async (collectionMeta: any, artistName: any) => {\r\n    setImageName(collectionMeta.collection_image)\r\n    setDropCoverImageName(collectionMeta.collection_cover_image)\r\n    setSelectedArtist(collectionMeta.artist_id)\r\n    setArtistName(artistName)\r\n    setCollectionName(collectionMeta.collection_name)\r\n    setCollectionType(collectionMeta.collection_type)\r\n    setCollectionOwner(collectionMeta.collection_owner)\r\n\r\n    let colDescriptArr = JSON.parse(collectionMeta.collection_description.replace(/&quot;/g, '\"'))\r\n    let colDescriptStr = \"\"\r\n\r\n    await colDescriptArr.map((lines : any) => {\r\n      colDescriptStr += lines + '\\n'\r\n    })\r\n\r\n    setCollectionDescription(colDescriptStr)\r\n    setSpotifyURL(collectionMeta.spotify_url ? collectionMeta.spotify_url : '')\r\n    setSelectedBlockchain(collectionMeta.blockchain)\r\n    setdropReleaseDateTime(collectionMeta.drop_release_time)\r\n    setIsminted(collectionMeta.is_minted)\r\n    setLegalPDF(collectionMeta.id + \"_legal_docs.pdf\")\r\n\r\n    collectionMeta.tiersData.map((tokenData: any) => {\r\n      if(tokenData.tier == '0') {\r\n        setSelectedGoldTier(true)\r\n        setTokenImageName0(tokenData.tier_image)\r\n        setGoldTierPrice(tokenData.tier_price)\r\n        setGoldTierOwnershipOffered(tokenData.ownership_offered)\r\n        setGoldTierQuantity(tokenData.tier_quantity)\r\n        let goldBenefitsData = JSON.parse(tokenData.tier_extra_benefits.replace(/&quot;/g, '\"'))\r\n        const goldStdBenefits = goldBenefitsData.stdBenefits\r\n        const goldCustBenefits = goldBenefitsData.custBenefits\r\n        setGoldTierStdBenefits(goldStdBenefits)\r\n        setGoldTierBonus(goldCustBenefits)\r\n        setGoldTierBenefitCheckboxData(getTokenBenefitCheckboxData(goldStdBenefits, artistName))\r\n      } else if(tokenData.tier == '1') {\r\n        setSelectedPlatinumTier(true)\r\n        setTokenImageName1(tokenData.tier_image)\r\n        setPlatinumTierPrice(tokenData.tier_price)\r\n        setPlatinumTierOwnershipOffered(tokenData.ownership_offered)\r\n        setPlatinumTierQuantity(tokenData.tier_quantity)\r\n        let platinumBenefitsData = JSON.parse(tokenData.tier_extra_benefits.replace(/&quot;/g, '\"'))\r\n        console.log(platinumBenefitsData)\r\n        const platinumStdBenefits = platinumBenefitsData.stdBenefits\r\n        const platinumCustBenefits = platinumBenefitsData.custBenefits\r\n        console.log(platinumStdBenefits)\r\n        setPlatinumTierStdBenefits(platinumStdBenefits)\r\n        setPlatinumTierBonus(platinumCustBenefits)\r\n        setPlatinumTierBenefitCheckboxData(getTokenBenefitCheckboxData(platinumStdBenefits, artistName))\r\n      } else if(tokenData.tier == '2') {\r\n        setSelectedDiamondTier(true)\r\n        setTokenImageName2(tokenData.tier_image)\r\n        setDiamondTierPrice(tokenData.tier_price)\r\n        setDiamondTierOwnershipOffered(tokenData.ownership_offered)\r\n        setDiamondTierQuantity(tokenData.tier_quantity)\r\n        let diamondBenefitsData = JSON.parse(tokenData.tier_extra_benefits.replace(/&quot;/g, '\"'))\r\n        const diamondStdBenefits = diamondBenefitsData.stdBenefits\r\n        const diamondCustBenefits = diamondBenefitsData.custBenefits\r\n        setDiamondTierStdBenefits(diamondStdBenefits)\r\n        setDiamondTierBonus(diamondCustBenefits)\r\n        setDiamondTierBenefitCheckboxData(getTokenBenefitCheckboxData(diamondStdBenefits, artistName))\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n      getCollectionMetaById(cid)\r\n      .then(async (response) => {\r\n          if(response.data.success) {\r\n              await setAllMetaData(response.data.collectionMeta, response.data.artistName)\r\n              setScreenLoading(false)\r\n          }\r\n      })\r\n  }, [])\r\n\r\n  let inits: ICreateAccount = {\r\n    collectionName: '',\r\n    spotifyURL: '',\r\n    collectionType: '',\r\n    blockchain: '',\r\n    collectionDescription: '',\r\n    collectionOwner: '',\r\n    ownershipOffered0: '',\r\n    price0: '',\r\n    quantity0: '',\r\n    ownershipOffered1: '',\r\n    price1: '',\r\n    quantity1: '',\r\n    ownershipOffered2: '',\r\n    price2: '',\r\n    quantity2: '' \r\n  }\r\n\r\n  const [initState, setInitState] = useState(inits)\r\n\r\n  useEffect(() => {\r\n    if(!screenLoading) {\r\n      setInitState({\r\n        collectionName: collectionName,\r\n        spotifyURL: spotifyURL,\r\n        collectionType: collectionType,\r\n        blockchain: selectedBlockchain,\r\n        collectionDescription: collectionDescription,\r\n        collectionOwner: collectionOwner,\r\n        ownershipOffered0: goldTierOwnershipOffered,\r\n        price0: goldTierPrice,\r\n        quantity0: goldTierQuantity,\r\n        ownershipOffered1: platinumTierOwnershipOffered,\r\n        price1: platinumTierPrice,\r\n        quantity1: platinumTierQuantity,\r\n        ownershipOffered2: diamondTierOwnershipOffered,\r\n        price2: diamondTierPrice,\r\n        quantity2: diamondTierQuantity \r\n      })\r\n\r\n\r\n      setDataAdded(true)\r\n    }\r\n  }, [screenLoading])\r\n\r\n  useEffect(() => {\r\n    if(dataAdded) {\r\n      if (!stepperRef.current) {\r\n        return\r\n      }\r\n  \r\n      let step = new StepperComponent(stepperRef.current as HTMLDivElement, defaultStepperOptions)\r\n      stepper.current = step\r\n  \r\n      setSelectedAnyTiers(selectedGoldTier || selectedPlatinumTier || selectedDiamondTier)\r\n    }\r\n  }, [dataAdded])\r\n  \r\n  if(successMessage !== \"\") {\r\n    setTimeout(() => {\r\n      setChecked(false);\r\n      setTimeout(() => {\r\n        setSuccessMessage(\"\");\r\n      }, 200);\r\n    }, 5000);\r\n  }\r\n\r\n  if(errorMessage !== \"\") {\r\n    setTimeout(() => {\r\n      setChecked(false);\r\n      setTimeout(() => {\r\n        setErrorMessage(\"\");\r\n      }, 200);\r\n    }, 5000);\r\n  }\r\n\r\n  const handleImageChange = (e: any) => {\r\n    setImage(e.target.files[0])\r\n  };\r\n\r\n  const handleDropCoverImageChange = (e: any) => {\r\n    setDropCoverImage(e.target.files[0])\r\n  };\r\n\r\n  const handleTokenImage0Change = (e: any) => {\r\n    setTokenImage0(e.target.files[0])\r\n  };\r\n\r\n  const handleTokenImage1Change = (e: any) => {\r\n    setTokenImage1(e.target.files[0])\r\n  };\r\n\r\n  const handleTokenImage2Change = (e: any) => {\r\n    setTokenImage2(e.target.files[0])\r\n  };\r\n\r\n  const handlePDFChange = (e: any) => {\r\n    setLegalPDF(e.target.files[0])\r\n  }\r\n\r\n  const {authToken, userID, userName, locale, timezone}: any = useSelector<RootState>(\r\n    ({auth}) => ({\r\n      authToken: auth.accessToken,\r\n      userID: auth.user?.userID,\r\n      userName: auth.user?.username\r\n    }), shallowEqual\r\n  )\r\n\r\n  const loadStepper = () => {\r\n    stepper.current = StepperComponent.createInsance(stepperRef.current as HTMLDivElement)\r\n    console.log(stepper.current)\r\n    console.log(\"stepper loaded\")\r\n  }\r\n\r\n  const prevStep = () => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n\r\n    stepper.current.goPrev()\r\n    setCurrentIndex((index: any) => {return index - 1})\r\n\r\n    // setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex - 1])\r\n  }\r\n\r\n  const toggleBenefitCheckboxData = (tierBenefitCheckboxDataSetter: any ,property: any) => {\r\n    switch (property) {\r\n      case 'firstDibsNextDrop':\r\n        tierBenefitCheckboxDataSetter((data: any) => {\r\n          let newData = data\r\n          newData.firstDibsNextDrop = !data.firstDibsNextDrop\r\n          return newData\r\n        })\r\n        break;\r\n      case 'firstDibAllDrop':\r\n        tierBenefitCheckboxDataSetter((data: any) => {\r\n          let newData = data\r\n          newData.firstDibAllDrop = !data.firstDibAllDrop\r\n          return newData\r\n        })\r\n        break;\r\n      case 'accessToRoyalCollectorChannel':\r\n        tierBenefitCheckboxDataSetter((data: any) => {\r\n          let newData = data\r\n          newData.accessToRoyalCollectorChannel = !data.accessToRoyalCollectorChannel\r\n          return newData\r\n        })\r\n        break;\r\n      case 'exclusiveContent':\r\n        tierBenefitCheckboxDataSetter((data: any) => {\r\n          let newData = data\r\n          newData.exclusiveContent = !data.exclusiveContent\r\n          return newData\r\n        })\r\n        break;\r\n      case 'exclAccessToUnreleased':\r\n        tierBenefitCheckboxDataSetter((data: any) => {\r\n          let newData = data\r\n          newData.exclAccessToUnreleased = !data.exclAccessToUnreleased\r\n          return newData\r\n        })\r\n        break;\r\n    }\r\n  }\r\n\r\n  const checkRequiredFields = (\r\n    collectionName: string, \r\n    collectionType: string, \r\n    spotifyURL: string, \r\n    collectionDescription: string,\r\n    goldTierPrice: any,\r\n    platinumTierPrice: any,\r\n    diamondTierPrice: any,\r\n    ownershipOffered0: any,\r\n    ownershipOffered1: any,\r\n    ownershipOffered2: any,\r\n    quantity0: any,\r\n    quantity1: any,\r\n    quantity2: any,\r\n  ) => {\r\n    if(artistName === '' || selectedBlockchain === '') {\r\n      return false\r\n    }\r\n    if(collectionName === '' || collectionType === '' || collectionDescription === '') {\r\n      return false\r\n    }\r\n    if(selectedGoldTier) {\r\n      if(goldTierPrice === '' || ownershipOffered0 === '' || quantity0 === '') {\r\n        if(parseFloat(goldTierPrice) < 0 || parseFloat(ownershipOffered0) < 0 || parseInt(quantity0) < 0) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    if(selectedPlatinumTier) {\r\n      if(platinumTierPrice === '' || ownershipOffered1 === '' || quantity1 === '') {\r\n        if(parseFloat(platinumTierPrice) < 0 || parseFloat(ownershipOffered1) < 0 || parseInt(quantity1) < 0) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    if(selectedDiamondTier) {\r\n      if(diamondTierPrice === '' || ownershipOffered2 === '' || quantity2 === '') {\r\n        if(parseFloat(diamondTierPrice) < 0 || parseFloat(ownershipOffered2) < 0 || parseInt(quantity2) < 0) {\r\n          return false\r\n        }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  const getCombinedObject = (stdBenefits: Array<any>, custBenefits: Array<any>) => {\r\n    return {\r\n      \"stdBenefits\" : stdBenefits,\r\n      \"custBenefits\": custBenefits\r\n    }\r\n  }\r\n\r\n  const handleCheckBoxChange = (\r\n    stateSetter: any, \r\n    tierBenefitCheckboxDataSetter: any,\r\n    text: any, \r\n    state: Array<any>, \r\n    isRemovingElement: boolean, \r\n    property: any\r\n  ) => {\r\n\r\n    toggleBenefitCheckboxData(tierBenefitCheckboxDataSetter, property)\r\n\r\n    if(!isRemovingElement) {\r\n      stateSetter((state: any) => {\r\n        return [...state, text]\r\n      })\r\n    } else {\r\n        let newState = state.filter((data) => data !== text)\r\n        stateSetter(newState);\r\n    }\r\n  }\r\n\r\n  const submitStep = (values: ICreateAccount, actions: FormikValues) => {\r\n    if (!stepper.current) {\r\n      return\r\n    }\r\n    console.log(\"step changed\")\r\n\r\n    // setCurrentSchema(createAccountSchemas[stepper.current.currentStepIndex])\r\n\r\n    if(!(selectedGoldTier || selectedPlatinumTier || selectedDiamondTier)) {\r\n      return\r\n    }\r\n\r\n    if (stepper.current.currentStepIndex !== stepper.current.totatStepsNumber) {\r\n      if(stepper.current.currentStepIndex == 1 ) {\r\n        if(\r\n          values.collectionName === '' || \r\n          values.collectionType === '' ||\r\n          values.collectionDescription === '' ||\r\n          values.collectionOwner === '' \r\n        ) {\r\n          setErrorMessage(\"Please fill out the required fields\")\r\n          setChecked(true)\r\n          setLoading(false)\r\n          return\r\n        }\r\n      }\r\n      stepper.current.goNext()\r\n      setCurrentIndex((index: any) => {return index + 1})\r\n    } else {\r\n      setLoading(true)\r\n      if(checkRequiredFields(\r\n        values.collectionName,\r\n        values.collectionType,\r\n        values.spotifyURL,\r\n        values.collectionDescription,\r\n        values.price0,\r\n        values.price1,\r\n        values.price2,\r\n        values.ownershipOffered0,\r\n        values.ownershipOffered1,\r\n        values.ownershipOffered2,\r\n        values.quantity0,\r\n        values.quantity1,\r\n        values.quantity2\r\n      )) {      \r\n        const formData = new FormData()\r\n        formData.append('authToken', authToken)\r\n        formData.append('collectionID', cid ? cid.toString() : '')\r\n        formData.append('image', image)\r\n        formData.append('dropCoverImage', dropCoverImage)\r\n        formData.append('artistID', selectedArtist)\r\n        formData.append('collectionName', values.collectionName)\r\n        formData.append('collectionOwner', values.collectionOwner)\r\n        formData.append('spotifyURL', values.spotifyURL)\r\n        formData.append('dropReleaseDateTime', dropReleaseDateTime)\r\n        formData.append('collectionType', values.collectionType)\r\n        formData.append('blockchain', selectedBlockchain)\r\n\r\n        let colDescriptArr = values.collectionDescription.split('\\n')\r\n        formData.append('collectionDescription', JSON.stringify(colDescriptArr))\r\n        formData.append('hasGoldTier', selectedGoldTier.toString())\r\n        formData.append('hasPlatinumTier', selectedPlatinumTier.toString())\r\n        formData.append('hasDiamondTier', selectedDiamondTier.toString())\r\n        if(selectedGoldTier) {\r\n          formData.append('goldTokenImage', tokenImage0)\r\n          formData.append('ownershipOfferedForGoldTier', values.ownershipOffered0)\r\n          formData.append('goldTierPrice', values.price0)\r\n          formData.append('goldTierQuantity', values.quantity0)\r\n          formData.append('goldTierBenefits', JSON.stringify(getCombinedObject(goldTierStdBenefits, goldTierBonus)))\r\n        }\r\n        if(selectedPlatinumTier) {\r\n          formData.append('platinumTokenImage', tokenImage1)\r\n          formData.append('ownershipOfferedForPlatinumTier', values.ownershipOffered1)\r\n          formData.append('platinumTierPrice', values.price1)\r\n          formData.append('platinumTierQuantity', values.quantity1)\r\n          formData.append('platinumTierBenefits', JSON.stringify(getCombinedObject(platinumTierStdBenefits, platinumTierBonus)))\r\n        }\r\n        if(selectedDiamondTier) {\r\n          formData.append('diamondTokenImage', tokenImage2)\r\n          formData.append('ownershipOfferedForDiamondTier', values.ownershipOffered2)\r\n          formData.append('diamondTierPrice', values.price2)\r\n          formData.append('diamondTierQuantity', values.quantity2)\r\n          formData.append('diamondTierBenefits', JSON.stringify(getCombinedObject(diamondTierStdBenefits, diamondTierBonus)))\r\n        }\r\n\r\n        updateCollection(\r\n          formData\r\n        ).then(\r\n          (response) => {\r\n            if(response.data.success) {\r\n              setSuccessMessage(response.data.message)\r\n              getCollectionMetaById(cid)\r\n              .then(async (response) => {\r\n                  if(response.data.success) {\r\n                      await setAllMetaData(response.data.collectionMeta, response.data.artistName)\r\n                      setArtistName(response.data.artistName)\r\n                      setScreenLoading(false)\r\n                  }\r\n              })\r\n            } else {\r\n              if(response.data.message) {\r\n                setErrorMessage(response.data.message)\r\n              } else {\r\n                setErrorMessage(<FormattedMessage id=\"CREATE_EDIT_COLLECTION.COLLECTION_UPDATE_FAILED\" />)\r\n              }\r\n            }\r\n            setChecked(true)\r\n            setLoading(false)\r\n            stepper.current?.goto(1)\r\n            window.scrollTo(0,0)\r\n            setCurrentIndex(1)\r\n          }\r\n        ).catch((error) => {\r\n          localStorage.setItem('sessionTimeOut', 'Session timed out')\r\n          dispatch(auth.actions.logout())\r\n        })\r\n      } else {\r\n        window.scrollTo(0,0)\r\n        setErrorMessage(<FormattedMessage id=\"CREATE_EDIT_COLLECTION.FILL_OUT_DETAILS\" />)\r\n        setChecked(true)\r\n        setLoading(false)\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {successMessage !== \"\" ? (\r\n          <AlertSuccess message={successMessage} checked={checked} />\r\n    ) : null }\r\n\r\n    {errorMessage !== \"\" ? (\r\n      <AlertDanger message={errorMessage} checked={checked} />\r\n      ) : null }\r\n    {dataAdded && isMinted == '0' &&\r\n      <div className='card'>\r\n        <div className='card-body'>\r\n          <div\r\n            ref={stepperRef}\r\n            className='stepper stepper-links d-flex flex-column pt-15'\r\n            id='kt_create_account_stepper'\r\n          >\r\n            <div className='stepper-nav mb-5'>\r\n              <div className='stepper-item current' data-kt-stepper-element='nav'>\r\n                <h3 className='stepper-title'><FormattedMessage id=\"CREATE_EDIT_COLLECTION.COLLECTION_INFO\" /></h3>\r\n              </div>\r\n\r\n              {selectedGoldTier && \r\n                <div className='stepper-item' data-kt-stepper-element='nav'>\r\n                  <h3 className='stepper-title'><FormattedMessage id=\"CREATE_EDIT_COLLECTION.GOLD_TIER_INFO\" /></h3>\r\n                </div>\r\n              }\r\n\r\n              {selectedPlatinumTier && \r\n                <div className='stepper-item' data-kt-stepper-element='nav'>\r\n                  <h3 className='stepper-title'><FormattedMessage id=\"CREATE_EDIT_COLLECTION.PLATINUM_TIER_INFO\" /></h3>\r\n                </div>\r\n              }\r\n\r\n              {selectedDiamondTier && \r\n                <div className='stepper-item' data-kt-stepper-element='nav'>\r\n                  <h3 className='stepper-title'><FormattedMessage id=\"CREATE_EDIT_COLLECTION.DIAMOND_TIER_INFO\" /></h3>\r\n                </div>\r\n              }\r\n            </div>\r\n\r\n            <Formik validationSchema={currentSchema} initialValues={initState} onSubmit={submitStep}>\r\n              {() => (\r\n                <Form\r\n                  className='mx-auto mw-600px w-100 pt-15 pb-10'\r\n                  noValidate\r\n                  id='kt_create_account_form'\r\n                >\r\n                  <div className='current' data-kt-stepper-element='content'>\r\n                    <Step1 \r\n                      handleImageChange={handleImageChange} \r\n                      image={image}\r\n                      imageName={imageName}\r\n                      handlePDFChange={handlePDFChange}\r\n                      legalPDF={legalPDF}\r\n                      handleDropCoverImageChange={handleDropCoverImageChange}\r\n                      dropCoverImage={dropCoverImage}\r\n                      dropCoverImageName={dropCoverImageName}\r\n                      artistName={artistName}\r\n                      setArtistName={setArtistName}\r\n                      selectedArtist={selectedArtist}\r\n                      setSelectedArtist={setSelectedArtist}\r\n                      selectedGoldTier={selectedGoldTier}\r\n                      selectedPlatinumTier={selectedPlatinumTier}\r\n                      selectedDiamondTier={selectedDiamondTier}\r\n                      setSelectedGoldTier={setSelectedGoldTier}\r\n                      setSelectedPlatinumTier={setSelectedPlatinumTier}\r\n                      setSelectedDiamondTier={setSelectedDiamondTier}\r\n                      selectedBlockchain={selectedBlockchain}\r\n                      setSelectedBlockchain={setSelectedBlockchain}\r\n                      dropReleaseDateTime={dropReleaseDateTime}\r\n                      setdropReleaseDateTime={setdropReleaseDateTime}\r\n                    />\r\n                  </div>\r\n\r\n                  {selectedGoldTier &&\r\n                    <div data-kt-stepper-element='content'>\r\n                      <Step2 \r\n                        image0={tokenImage0}\r\n                        imageName0={tokenImageName0}\r\n                        handleTokenImage0Change={handleTokenImage0Change}\r\n                        artistName={artistName}\r\n                        selectedBlockchain={selectedBlockchain}\r\n                        goldTierBonus={goldTierBonus}\r\n                        setGoldTierBonus={setGoldTierBonus}\r\n                        setGoldTierBenefitCheckboxData={setGoldTierBenefitCheckboxData}\r\n                        goldTierBenefitCheckboxData={goldTierBenefitCheckboxData}\r\n                        setGoldTierStdBenefits={setGoldTierStdBenefits}\r\n                        goldTierStdBenefits={goldTierStdBenefits}\r\n                        handleCheckBoxChange={handleCheckBoxChange}\r\n                      />\r\n                    </div>\r\n                  }\r\n\r\n                  {selectedPlatinumTier &&\r\n                    <div data-kt-stepper-element='content'>\r\n                      <Step3 \r\n                        image1={tokenImage1}\r\n                        imageName1={tokenImageName1}\r\n                        handleTokenImage1Change={handleTokenImage1Change}\r\n                        artistName={artistName}\r\n                        selectedBlockchain={selectedBlockchain}\r\n                        platinumTierBonus={platinumTierBonus}\r\n                        setPlatinumTierBonus={setPlatinumTierBonus}\r\n                        setPlatinumTierBenefitCheckboxData={setPlatinumTierBenefitCheckboxData}\r\n                        platinumTierBenefitCheckboxData={platinumTierBenefitCheckboxData}\r\n                        setPlatinumTierStdBenefits={setPlatinumTierStdBenefits}\r\n                        platinumTierStdBenefits={platinumTierStdBenefits}\r\n                        handleCheckBoxChange={handleCheckBoxChange}\r\n                      />\r\n                    </div>\r\n                  }\r\n\r\n                  {selectedDiamondTier &&\r\n                    <div data-kt-stepper-element='content'>\r\n                      <Step4 \r\n                        image2={tokenImage2}\r\n                        imageName2={tokenImageName2}\r\n                        artistName={artistName}\r\n                        handleTokenImage2Change={handleTokenImage2Change}\r\n                        selectedBlockchain={selectedBlockchain}\r\n                        diamondTierBonus={diamondTierBonus}\r\n                        setDiamondTierBonus={setDiamondTierBonus}\r\n                        setDiamondTierBenefitCheckboxData={setDiamondTierBenefitCheckboxData}\r\n                        diamondTierBenefitCheckboxData={diamondTierBenefitCheckboxData}\r\n                        setDiamondTierStdBenefits={setDiamondTierStdBenefits}\r\n                        diamondTierStdBenefits={diamondTierStdBenefits}\r\n                        handleCheckBoxChange={handleCheckBoxChange}\r\n                      />\r\n                    </div>\r\n                  }\r\n\r\n                  <div className='d-flex flex-stack pt-15'>\r\n                    <div className='mr-2'>\r\n                      <button\r\n                        onClick={prevStep}\r\n                        type='button'\r\n                        className='btn btn-lg btn-light-primary me-3'\r\n                        data-kt-stepper-action='previous'\r\n                      >\r\n                        <KTSVG\r\n                          path='/media/icons/duotone/Navigation/Left-2.svg'\r\n                          className='svg-icon-4 me-1'\r\n                        />\r\n                        <FormattedMessage id=\"CREATE_EDIT_COLLECTION.BACK\" />\r\n                      </button>\r\n                    </div>\r\n\r\n                    <div>\r\n                      {loading && (\r\n                            <button \r\n                              type='submit' \r\n                              style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }}\r\n                              className='py-2 px-4 me-3 rounded'\r\n                            >\r\n                              <FormattedMessage id=\"CREATE_EDIT_COLLECTION.UPDATING\" />..\r\n                              <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n                            </button>\r\n                        )\r\n                      }\r\n\r\n                      {!loading && (\r\n                          <button \r\n                            type='submit' \r\n                            style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }} \r\n                            className='py-2 px-4 me-3 rounded' \r\n                            disabled={!selectedAnyTiers}\r\n                          >\r\n                          <span className='indicator-label'>\r\n                            {currentIndex !== undefined &&\r\n                              currentIndex !==\r\n                              stepper.current?.totatStepsNumber! && <FormattedMessage id=\"CREATE_EDIT_COLLECTION.CONTINUE\" />}\r\n                            {\r\n                              currentIndex === undefined && <FormattedMessage id=\"CREATE_EDIT_COLLECTION.CONTINUE\" />}\r\n                              \r\n                            {currentIndex !== undefined &&\r\n                              currentIndex ==\r\n                              stepper.current?.totatStepsNumber! && <FormattedMessage id=\"CREATE_EDIT_COLLECTION.UPDATE\" />}\r\n                            <KTSVG\r\n                              path='/media/icons/duotone/Navigation/Right-2.svg'\r\n                              className='svg-icon-3 ms-2 me-0'\r\n                            />\r\n                          </span>\r\n                        </button>\r\n                        )}\r\n                    </div>\r\n                  </div>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    }\r\n    {!dataAdded && \r\n        <div className='d-flex w-100 h-100'>\r\n            <div className='my-auto mx-auto'>\r\n                <div className='d-flex flex-column justify-content-center'>\r\n                    <span className='text-primary fs-3'>Loading</span> <br />\r\n                    <span className='ms-4'>\r\n                        <CircularProgress />\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    }\r\n    \r\n    </>\r\n  )\r\n}\r\n\r\nexport {Horizontal}\r\n","import React from 'react'\r\nimport { useSelector, shallowEqual } from 'react-redux'\r\nimport { RootState } from 'setup'\r\nimport {PageLink} from '../../../../../_metronic/layout/core'\r\nimport {Horizontal} from './components/Horizontal'\r\n\r\nconst wizardsBreadCrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'Wizards',\r\n    path: '/crafted/pages/wizards/horizontal',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst WizardsPage: React.FC = () => {\r\n\r\n  const { isAdmin }: any = useSelector<RootState>(\r\n    ({ auth }) => ({\r\n        isAdmin: auth.user?.isAdmin\r\n    }),\r\n    shallowEqual\r\n  );\r\n  \r\n  return (\r\n    <>\r\n      {isAdmin == '1' && \r\n        <Horizontal />\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WizardsPage\r\n"],"sourceRoot":""}