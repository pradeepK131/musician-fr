{"version":3,"sources":["app/modules/dashboard/graphQueries/index.ts","app/modules/yourCollections/components/TopSection.tsx","app/modules/yourCollections/components/TokenSection.tsx","app/modules/yourCollections/components/AboutSection.tsx","app/modules/yourCollections/components/DepositDetails.tsx","../node_modules/@mui/material/DialogActions/dialogActionsClasses.js","../node_modules/@mui/material/DialogActions/DialogActions.js","app/modules/yourCollections/components/DepositDialogBox.tsx","app/modules/yourCollections/DropDetailPreviewPage.tsx"],"names":["APIURL","process","client","ApolloClient","uri","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","getDepositQuery","collectionID","getRoyaltyClaimQuery","tokenID","depositNumber","getTokenBalancesForWallet","tierID","walletAddress","getDepositData","a","gql","depositData","data","deposits","getRoyaltyClaimData","royaltyClaimData","royaltyClaims","getCollectorsCut","depositedAmount","totalOwnershipOffered","collectorsCut","percent","totaltOwnershipOffered","parseInt","getCorrectPercent","calculateRoyaltyAmount","tokenList","ownershipOffered","withdrawAmount","unclaimedTokens","i","length","claimData","undefined","claimedAmount","push","getTokenBalanceIDs","tokenData","tokenIds","tokenBalances","map","balanceData","tokenId","getAccountBalanceData","console","log","accountBalanceData","temp","depositAmount","unclaimedIds","DropDetailTopSection","props","className","style","width","height","src","imageName","alt","top","left","borderRadius","artistImage","id","href","artistID","fontWeight","artistName","collectionType","collectionName","JSON","parse","collectionDescription","replace","description","spotifyURL","frameBorder","allow","title","DropDetailTokenSection","optimizeTokenBenefitsList","jsonList","stdTknBftList","stdBenefits","custTknBftList","custBenefits","splice","marginTop","tokenNum","getClass","tiersData","tierData","index","tier_image","tier","background","parseFloat","ownership_offered","tier_price","blockchain","Number","fiatPrice","toFixed","overflow","tier_extra_benefits","content","symbol","onClick","handleReadMoreClick","tier_quantity","amount","DropDetailAboutSection","useNavigate","blockchainAbbr","xmlns","fill","viewBox","stroke","d","DropDetailDepositData","depositor","txHash","deposit_number","deposit_amount","tx_hash","getDialogActionsUtilityClass","slot","generateUtilityClass","generateUtilityClasses","_excluded","DialogActionsRoot","styled","name","overridesResolver","styles","ownerState","root","disableSpacing","spacing","_extends","display","alignItems","padding","justifyContent","flex","marginLeft","DialogActions","React","inProps","ref","useThemeProps","other","_objectWithoutPropertiesLoose","classes","slots","composeClasses","useUtilityClasses","_jsx","clsx","klaytn","window","caver","Caver","DepositDialogBox","displaySnackbar","setOpenDialog","openDialog","useState","setDepositAmount","depositing","setDepositing","navigate","useSelector","auth","walletName","shallowEqual","checkTransactionOnKlaytn","transactionHash","rpc","klay","getTransactionReceipt","receipt","status","checkTransaction","web3","Web3","eth","depositRoyaltyOnEthereum","royaltyContract","Contract","ethereumRoyaltyABI","ethereum","request","method","accounts","params","utils","toHex","toWei","methods","depositRoyaltyAmount","encodeABI","then","catch","error","depositRoyaltyOnKlaytn","myContract","royaltyABIKlaytn","enable","account","selectedAddress","send","from","value","toPeb","toString","gas","Dialog","open","onClose","DialogTitle","DialogContent","type","placeholder","onChange","event","preventDefault","target","handleDepositAmountChange","DropDetailPreviewPage","cid","URLSearchParams","location","search","get","ethereumContractAddress","loading","setLoading","minting","setMinting","setTxHash","collectionMeta","setCollectionMeta","setArtistName","setArtistImage","setDepositData","setFiatPrice","intl","useIntl","readMoreDialogOpen","setReadMoreDialogOpen","readMoreImage","setReadMoreImage","readMoreTier","setReadMoreTier","readMoreBlockchain","setReadMoreBlockchain","readMoreBenefits","setReadMoreBenefits","snackBarContent","setSnackBarContent","vertical","horizontal","snackbarState","setSnackbarState","isAdmin","user","_txHash","setTimeout","useEffect","getCollectionMetaById","response","success","fiat_price_in_usd","getKlayDepositData","deposit_data","getTokenData","blockchainData","tiers","amounts","prices","initialTokenIds","formatMessage","updateMintStatus","checkTransactionOnEthereum","message","err","mintCollectionOnKlaytn","collectionOwner","klaytnABI","mintCollection","mintCollectionOnEthereum","nftContract","contractAbi","collection_owner","is_minted","color","borderColor","collection_image","collection_name","collection_type","collection_description","spotify_url","artist_id","extras","ReadMoreDialog","CircularProgress","Snackbar","anchorOrigin","ContentProps"],"mappings":"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","file":"static/js/8.15f1c5a6.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\r\n\r\nconst APIURL = `${process.env.REACT_APP_GRAPH_URL}`;;\r\n\r\nconst defaultOptions: any = {\r\n    watchQuery: {\r\n      fetchPolicy: 'no-cache',\r\n      errorPolicy: 'ignore',\r\n    },\r\n    query: {\r\n      fetchPolicy: 'no-cache',\r\n      errorPolicy: 'all',\r\n    },\r\n}\r\n\r\nconst client = new ApolloClient({\r\n    uri: APIURL,\r\n    cache: new InMemoryCache(),\r\n    defaultOptions: defaultOptions,\r\n})\r\n\r\ntype IGetDepositQuery = (collectionID: string | null) => string\r\n\r\nexport const getDepositQuery: IGetDepositQuery = (collectionID) => {\r\n    const depositQuery = `\r\n        query {\r\n            deposits(\r\n                where: {\r\n                    collection: \"${collectionID}\"\r\n                }\r\n            ) {\r\n                depositor\r\n                depositNumber\r\n                depositAmount\r\n                totalOwnershipOffered\r\n                txHash\r\n            }\r\n        }\r\n    `\r\n    return depositQuery\r\n}\r\n\r\ntype IGetRoyaltyClaimQuery = (tokenID: string, depositNumber: string) => string\r\n\r\nexport const getRoyaltyClaimQuery: IGetRoyaltyClaimQuery = (tokenID: string, depositNumber: string) => {\r\n    const royaltyClaimQuery = `\r\n        query {\r\n            royaltyClaims(\r\n                where: {\r\n                    tokenID: ${tokenID},\r\n                    depositNumber: ${depositNumber}\r\n                }\r\n            ) {\r\n                depositNumber\r\n                claimedAmount\r\n                claimedtokenIDs\r\n            }\r\n        }\r\n    `\r\n    return royaltyClaimQuery\r\n}\r\n\r\nexport const getTokenBalancesForWallet = (collectionID:string, tierID :string, walletAddress: string) => {\r\n    const tokenBalanceQuery = `\r\n        query {\r\n            tokenBalances(\r\n                where : {\r\n                    collection: \"${collectionID}\",\r\n                    tier: \"${tierID}\",\r\n                    walletAddress: \"${walletAddress}\",\r\n                }\r\n            ) {\r\n                tokenId\r\n                walletAddress\r\n                balance\r\n            }\r\n        }\r\n    `\r\n    return tokenBalanceQuery\r\n}\r\n\r\nexport const getDepositData = async (collectionID: string | null) => {\r\n  const depositData = await client.query({ query: gql(getDepositQuery(collectionID))})\r\n\r\n  return depositData.data.deposits\r\n}\r\n\r\nconst getRoyaltyClaimData = async (tokenID: string, depositNumber: string) => {\r\n    const royaltyClaimData = await client.query({ query: gql(getRoyaltyClaimQuery(tokenID, depositNumber))})\r\n\r\n    return royaltyClaimData.data.royaltyClaims[0]\r\n}\r\n\r\nconst getCorrectPercent = (totaltOwnershipOffered: string, collectorsCut: string) => {\r\n    const coeff = ((10000 * 10**32) / (parseInt(totaltOwnershipOffered)))\r\n    return (((coeff * parseInt(collectorsCut) * 10 **33) / 10**5) / 10**32)\r\n}\r\n\r\nconst getCollectorsCut = (depositedAmount: string, totalOwnershipOffered: string, collectorsCut: string) => {\r\n    const percent = getCorrectPercent(totalOwnershipOffered, collectorsCut);\r\n\r\n    return ((percent * parseInt(depositedAmount)) / 10**32)\r\n}\r\n\r\nconst calculateRoyaltyAmount = async (\r\n    depositedAmount: any, \r\n    depositNumber: string, \r\n    tokenList: Array<any>, \r\n    ownershipOffered: string,\r\n    totalOwnershipOffered: string\r\n) => {\r\n    let withdrawAmount = 0;\r\n    let unclaimedTokens = [];\r\n    for (let i = 0; i < tokenList.length; i++) {\r\n        let claimData: any = await getRoyaltyClaimData(tokenList[i], depositNumber);\r\n\r\n        if(claimData && claimData.claimedAmount != undefined && claimData.claimedAmount > 0) {\r\n            continue\r\n        } else {\r\n            withdrawAmount += getCollectorsCut(depositedAmount, totalOwnershipOffered, ownershipOffered)\r\n            \r\n            unclaimedTokens.push(tokenList[i])\r\n        }\r\n    }\r\n    return {withdrawAmount, unclaimedTokens};\r\n}\r\n\r\nexport const getTokenBalanceIDs = async (collectionID: string, tierID: string, walletAddress: string) => {\r\n    const tokenData = await client.query({query: gql(getTokenBalancesForWallet(collectionID, tierID, walletAddress))})\r\n    let tokenIds: Array<any> = []\r\n\r\n    tokenData.data.tokenBalances.map((balanceData: any) => {\r\n        tokenIds.push(balanceData.tokenId)\r\n    })\r\n    return tokenIds\r\n}\r\n\r\nexport const getAccountBalanceData = async (collectionID: string, tierID: string, walletAddress: string, ownershipOffered: string) => {\r\n    const depositData = await getDepositData(collectionID);\r\n    console.log(depositData)\r\n    const tokenIds = await getTokenBalanceIDs(collectionID, tierID, walletAddress);\r\n    let accountBalanceData = []\r\n\r\n    for (let i = 0; i < depositData.length; i++) {\r\n        let temp: any = {}\r\n        temp.depositNumber = depositData[i].depositNumber\r\n        const {withdrawAmount, unclaimedTokens} = await calculateRoyaltyAmount(\r\n            depositData[i].depositAmount, \r\n            depositData[i].depositNumber, \r\n            tokenIds, \r\n            ownershipOffered,\r\n            depositData[i].totalOwnershipOffered\r\n        )\r\n        console.log(withdrawAmount)\r\n        temp.withdrawAmount = withdrawAmount\r\n        temp.unclaimedIds = unclaimedTokens\r\n\r\n        accountBalanceData.push(temp)\r\n    }\r\n\r\n    return {accountBalanceData, tokenIds}\r\n}\r\n\r\n","\r\nimport { collectionType } from \"../common/common\"\r\nimport { FormattedMessage } from \"react-intl\"\r\n\r\nexport const DropDetailTopSection = (props: any) => {\r\n    return (\r\n        <>\r\n            <div className=\"mt-5 W-100\">\r\n                <div className=\"d-flex md-flex-column W-100\">\r\n                    <div className=\"detail-image-section position-relative\">\r\n                        <img \r\n                            style={{ width: '100%', height: '100%' }}\r\n                            src={`${process.env.REACT_APP_API_COLLECTION_IMAGE_URL}/${props.imageName}`} \r\n                            alt=\"\"\r\n                        />\r\n                         <div \r\n                            className=\"d-flex position-absolute\"\r\n                            style={{\r\n                                top: '20px',\r\n                                left: '40px'\r\n                            }}\r\n                        >\r\n                            <div className=\"\">\r\n                                <img \r\n                                    className=\"w-50px\"\r\n                                    style={{ borderRadius: '50%' }}\r\n                                    src={`${process.env.REACT_APP_API_ARTIST_IMAGE_URL}/${props.artistImage}`} \r\n                                    alt=\"Artist\" \r\n                                />\r\n                            </div>\r\n                            <div className=\"d-flex flex-column ms-3\">   \r\n                                <span className=\"text-white text-muted\"><FormattedMessage id=\"CREATE_EDIT_COLLECTION.ARTIST\" /></span>\r\n                                <a \r\n                                    href={`artist-detail?id=${props.artistID}`}\r\n                                    className=\"text-white text-muted\"\r\n                                    style={{ fontWeight: '700' }}\r\n                                >\r\n                                    {props.artistName}\r\n                                </a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"detail-content-section my-auto\">\r\n                        <div className=\"w-75 mx-auto\">\r\n                            <span className=\"asset-type ms-2\">{collectionType[props.collectionType]}</span> <br/>\r\n                            <span className=\"asset-name \">{props.collectionName}</span> <br/>\r\n                            {/* <p className=\"asset-description mt-4 text-start\">\r\n                                {props.collectionDescription}\r\n                            </p>  */}\r\n                            {JSON.parse(props.collectionDescription.replace(/&quot;/g, '\"')).map((description: any) => (\r\n                                <p className=\"asset-description mt-4 text-start\">\r\n                                    {description}\r\n                                </p> \r\n                            ))}\r\n                            <br/>\r\n                            <div className=\"mt-xl-5\">\r\n                                {props.spotifyURL != '' && \r\n                                    <iframe \r\n                                        src={props.spotifyURL} \r\n                                        width=\"100%\" \r\n                                        height=\"80\" \r\n                                        frameBorder=\"0\" \r\n                                        allow=\"encrypted-media\" \r\n                                        title={props.collectionName}\r\n                                    ></iframe>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <hr className=\"w-100 p-0 m-0\" />\r\n            </div>\r\n        </>\r\n    )\r\n}","import { FormattedMessage } from \"react-intl\"\r\n\r\n\r\nexport const DropDetailTokenSection = (props: any) => {\r\n\r\n    const getClass = (tokenNum: number) => {\r\n        switch (tokenNum) {\r\n            case 1:\r\n                return 'justify-content-center'\r\n            case 2:\r\n                return 'justify-content-around'\r\n            case 3:\r\n                return 'justify-content-between'\r\n            default:\r\n                return 'justify-content-center';\r\n        }\r\n    }\r\n\r\n    const renderGoldSection = () => {\r\n        return (\r\n            <figcaption \r\n                className=\"px-4 pt-4\" \r\n                style={{ background: 'linear-gradient(87.65deg, rgb(234, 209, 168) -1.34%, rgba(234, 209, 168, 0.2) 73.33%, rgb(234, 209, 168) 104.02%)' }}\r\n            >\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <h6>GOLD</h6>\r\n                    <h6>SINGLE</h6>\r\n                </div>\r\n            </figcaption>\r\n        )\r\n    }\r\n\r\n    const renderPlatinumSection = () => {\r\n        return (\r\n            <figcaption \r\n                className=\"px-4 pt-4\" \r\n                style={{ background: 'linear-gradient(87.65deg, rgb(207, 216, 226) -1.34%, rgba(207, 216, 226, 0.2) 73.33%, rgb(207, 216, 226) 104.02%)' }}\r\n            >\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <h6>PLATINUM</h6>\r\n                    <h6>SINGLE</h6>\r\n                </div>\r\n            </figcaption>\r\n        )\r\n    }\r\n\r\n    const renderDiamondSection = () => {\r\n        return (\r\n            <figcaption \r\n                className=\"px-4 pt-4\" \r\n                style={{ background: 'linear-gradient(87.65deg, rgb(193, 222, 228) -1.34%, rgba(193, 222, 228, 0.2) 73.33%, rgb(193, 222, 228) 104.02%)' }}\r\n            >\r\n                <div className=\"d-flex justify-content-between\">\r\n                <h6>Diamond</h6>\r\n                <h6>SINGLE</h6>\r\n                </div>\r\n            </figcaption>\r\n        )\r\n    }\r\n\r\n    const optimizeTokenBenefitsList = (jsonList: any) => {\r\n        let stdTknBftList = JSON.parse(jsonList.replace(/&quot;/g, '\"')).stdBenefits\r\n        let custTknBftList = JSON.parse(jsonList.replace(/&quot;/g, '\"')).custBenefits\r\n        let tknBnfts = []\r\n\r\n        if(stdTknBftList.length > 3) {\r\n            stdTknBftList.splice(3)\r\n        }\r\n\r\n\r\n        if(custTknBftList.length > 2) {\r\n            custTknBftList.splice(2)\r\n        }\r\n\r\n        tknBnfts = [...stdTknBftList, ...custTknBftList]\r\n\r\n        return tknBnfts\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div \r\n                className=\"d-flex flex-column mx-auto w-100\"\r\n                style={{ marginTop: '50px' }}\r\n            >\r\n                <span className=\"asset-type\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.TOKENS\" /></span>\r\n                <span className=\"asset-description my-3\" style={{ width: '70%' }}>\r\n                    Royal tokens give you partial ownership of a song's streaming royalty rights, plus access to \r\n                    exclusive content and other benefits. \r\n                    Ownership percentage and extras vary across each tier. \r\n                    Royal will notify collectors when royalties are available to claim after the artist gets paid.\r\n                </span>\r\n  \r\n                <div \r\n                    className={`d-flex flex-wrap ${getClass(props.tiersData.length)}`}\r\n                    style={{ marginTop:'30px' }}\r\n                >\r\n                    {props.tiersData.map((tierData: any, index: any) => (\r\n                        <div key={tierData.amount} className=\"token-card d-flex flex-column\">\r\n                            <div className=\"shadow-xl\">\r\n                                <figure \r\n                                    className=\"\" \r\n                                    style={{ width: '100%' }}\r\n                                >\r\n                                    <img \r\n                                        className=\"w-100\" \r\n                                        src={`${process.env.REACT_APP_API_TOKEN_IMAGE_URL}/${tierData.tier_image}`}\r\n                                    />\r\n                                    {tierData.tier == '0' && \r\n                                        renderGoldSection()\r\n                                    }\r\n                                    {tierData.tier == '1' && \r\n                                        renderPlatinumSection()\r\n                                    }\r\n                                    {tierData.tier == '2' && \r\n                                        renderDiamondSection()\r\n                                    }\r\n                                </figure>\r\n        \r\n                                <div className=\"d-flex flex-column\">\r\n                                    <div className=\"d-flex flex-column ms-3 mb-3\">\r\n                                        <span className=\"fs-3 fw-bold\">{parseFloat(tierData.ownership_offered)} %</span>\r\n                                        <span className=\"fs-6 fw-bolder fst-italic\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.OWNERSHIP_PER_TOKEN\" /></span>\r\n                                    </div> \r\n                                    <hr />\r\n                                    <span className=\"fs-5 fst-italic text-primary ms-3 mb-3\">\r\n                                        {tierData.tier_price} {props.blockchain === 'ethereum' ? 'ETH' : 'KLAY'}\r\n                                    </span>\r\n                                    <span className=\"fs-5 fst-italic text-primary ms-3 mb-3\">\r\n                                        {Number(parseFloat(tierData.tier_price) * parseFloat(props.fiatPrice)).toFixed(2)} USD\r\n                                    </span>\r\n                                    <div className=\"mx-auto drop-token-access-content\" style={{ width: '90%' }}>\r\n                                        <div \r\n                                            className=\"d-flex flex-column\"\r\n                                            style={{ overflow: 'auto', height: '300px' }}\r\n                                        >\r\n                                            {/* {JSON.parse(tierData.tier_extra_benefits.replace(/&quot;/g, '\"')).stdBenefits.map((content: any) => (\r\n                                                <div className=\"d-flex my-2\">\r\n                                                    <span style={{ marginTop: '2px' }} className=\"fs-6 me-2\">{content.symbol}</span>\r\n                                                    <span className=\"asset-description\">{content}</span>\r\n                                                </div>\r\n                                            ))}  \r\n                                            {JSON.parse(tierData.tier_extra_benefits.replace(/&quot;/g, '\"')).custBenefits.map((content: any) => (\r\n                                                <div className=\"d-flex my-2\">\r\n                                                    <span style={{ marginTop: '2px' }} className=\"fs-6 me-2\">{content.symbol}</span>\r\n                                                    <span className=\"asset-description\">{content}</span>\r\n                                                </div>\r\n                                            ))} */}\r\n                                            {optimizeTokenBenefitsList(tierData.tier_extra_benefits).map((content: any) => (\r\n                                                <div className=\"d-flex my-2\">\r\n                                                    <span style={{ marginTop: '2px' }} className=\"fs-6 me-2\">{content.symbol}</span>\r\n                                                    <span className=\"asset-description\">{content}</span>\r\n                                                </div>\r\n                                            ))}\r\n                                        </div>\r\n                                    </div>\r\n                                    {/* <div className=\"mx-auto my-4\">\r\n                                        <a className=\"text-decoration-none fs-5 fw-bolder fst-italic\" href=\"#\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.READ_MORE\" /></a>\r\n                                    </div> */}\r\n                                    <div className=\"mx-auto my-4\">\r\n                                        <a \r\n                                            className=\"text-decoration-none fs-5 fw-bolder fst-italic\" \r\n                                            href=\"#\"\r\n                                            onClick={() => props.handleReadMoreClick(\r\n                                                    tierData.tier_image, \r\n                                                    tierData.tier, \r\n                                                    props.blockchain, \r\n                                                    [\r\n                                                        ...JSON.parse(tierData.tier_extra_benefits.replace(/&quot;/g, '\"')).stdBenefits,\r\n                                                        ...JSON.parse(tierData.tier_extra_benefits.replace(/&quot;/g, '\"')).custBenefits\r\n                                                    ]\r\n                                                )\r\n                                            }\r\n                                        >\r\n                                            <FormattedMessage id='ADMIN_COLLECTION_PREVIEW.READ_MORE' />\r\n                                        </a>\r\n                                    </div>\r\n                                </div>\r\n                            </div> \r\n                            <span className=\"text-center py-3\">{tierData.tier_quantity} <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.TOKENS_AVAILABLE\" /></span>\r\n                        </div>\r\n                    ))}\r\n            \r\n                </div>\r\n                <hr style={{ marginTop: '50px' }}/> \r\n            </div>\r\n        </>\r\n    )\r\n}","\r\nimport { blockchainAbbr } from \"../common/common\"\r\nimport { FormattedMessage } from \"react-intl\"\r\nimport { useNavigate } from \"react-router-dom\"\r\n\r\nexport const DropDetailAboutSection = (props: any) => {\r\n    const navigate = useNavigate()\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '50px' }}>\r\n                <span className=\"flex-start asset-type\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.ABOUT\" /></span>\r\n\r\n                <div className=\"d-flex flex-column mt-5\">\r\n                    <div className=\"d-flex justify-content-between mt-2\">\r\n                        <span className=\"fs-6\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.EDITION\" /></span>\r\n                        <span className=\"fs-6\">{props.collectionName}</span>\r\n                    </div> \r\n                    <div className=\"d-flex justify-content-between mt-2\">\r\n                        <span className=\"fs-6\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.BLOCKCHAIN\" /></span>\r\n                        <span className=\"fs-6\">{blockchainAbbr[props.blockchain]}</span>\r\n                    </div>\r\n                    <div className=\"d-flex justify-content-between mt-2\">\r\n                        <span className=\"fs-6\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.LEGAL\" /></span>\r\n                        <a \r\n                            className=\"text-decoration-none cursor-pointer fs-6\"\r\n                            href={`${process.env.REACT_APP_LEGAL_DOCUMENTS_URL}/${props.collectionID + '_legal_docs.pdf'}`}\r\n                            // onClick={() => navigate('/legal-documents', { state: props.collectionID })}\r\n                        >\r\n                            <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.READ_NOW\" />\r\n                            <span>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" aria-hidden=\"true\" className=\"cursor-pointer ml-1 h-svg w-svg\">\r\n                                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 7l5 5m0 0l-5 5m5-5H6\"></path>\r\n                            </svg>\r\n                            </span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                <hr className=\"w-25 mx-auto\" style={{ marginTop: '50px' }} />\r\n            </div>\r\n        </>\r\n    )\r\n}","import { FormattedMessage } from \"react-intl\"\r\n\r\n\r\nexport const DropDetailDepositData = (props: any) => {\r\n\r\n    const ethExpUrl = (txHash: string) => {\r\n        return `https://goerli.etherscan.io/tx//${txHash}`\r\n    }\r\n\r\n    const klayExpUrl = (txHash: string) => {\r\n        return `https://baobab.scope.klaytn.com/tx/${txHash}`\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div style={{ marginTop: '50px' }}>\r\n                <span className=\"flex-start asset-type\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSITS\" /></span>\r\n\r\n                {props.blockchain == 'ethereum' && \r\n                    <>\r\n                        {props.depositData && props.depositData.length > 0 ? (\r\n                        <>\r\n                            {props.depositData.map((data: any) => (\r\n                                <div className=\"d-flex flex-column mt-5\">\r\n                                    <div className=\"d-flex justify-content-between mt-2\">\r\n                                        <div className='d-flex flex-column'>\r\n                                            <span className=\"fs-6\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT_NO\" /> \r\n                                                <span className=\"ms-2\">{data.depositNumber}</span>\r\n                                            </span>\r\n                                            <span><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSITOR\" />: \r\n                                                <span className=\"ms-2\">{data.depositor}</span>\r\n                                            </span>\r\n                                            <span><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT_AMOUNT\" />: \r\n                                                <span className=\"ms-2\">{parseFloat(data.depositAmount) / 10 ** 18} ETH</span>\r\n                                            </span>\r\n                                        </div>\r\n                                        \r\n                                        <a \r\n                                            href={ethExpUrl(data.txHash)}\r\n                                            className=\"btn btn-secondary\"\r\n                                            style={{ height: '40px' }}\r\n                                        >\r\n                                            <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.VIEW_TRANSACTION\" />\r\n                                        </a>\r\n                                    </div> \r\n                                </div>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"d-flex flex-column mt-5\">\r\n                            <div className='d-flex justify-content-center mt-2'>\r\n                                <span className=\"text-center\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.NO_DEPOSIT\" /></span>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    </>\r\n                }\r\n\r\n                {props.blockchain == 'klaytn' && \r\n                    <>\r\n                        {props.depositData && props.depositData.length > 0 ? (\r\n                        <>\r\n                            {props.depositData.map((data: any) => (\r\n                                <div className=\"d-flex flex-column mt-5\">\r\n                                    <div className=\"d-flex justify-content-between mt-2\">\r\n                                        <div className=''>\r\n                                            <span className=\"fs-6\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT_NO\" />. \r\n                                                <span className=\"ms-2\">{data.deposit_number}</span>\r\n                                            </span>\r\n                                            <br />\r\n                                            <span><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSITOR\" />: \r\n                                                <span className=\"ms-2\">{data.depositor}</span>\r\n                                            </span>\r\n                                            <br />\r\n                                            <span><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT_AMOUNT\" />: \r\n                                                <span className=\"ms-2\">{parseFloat(data.deposit_amount) / 10 ** 18} KLAY</span>\r\n                                            </span>\r\n                                        </div>\r\n                                        \r\n                                        <a \r\n                                            href={klayExpUrl(data.tx_hash)}\r\n                                            className=\"btn btn-secondary\"\r\n                                            style={{ height: '40px' }}\r\n                                        >\r\n                                            <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.VIEW_TRANSACTION\" />\r\n                                        </a>\r\n                                    </div> \r\n                                </div>\r\n                            ))}\r\n                        </>\r\n                    ) : (\r\n                        <div className=\"d-flex flex-column mt-5\">\r\n                            <div className='d-flex justify-content-center mt-2'>\r\n                                <span className=\"text-center\"><FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.NO_DEPOSIT\" /></span>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    </>\r\n                }\r\n\r\n                <hr className=\"w-25 mx-auto\" style={{ marginTop: '50px' }} />\r\n            </div>\r\n        </>\r\n    )\r\n}","import { generateUtilityClass, generateUtilityClasses } from '@mui/base';\nexport function getDialogActionsUtilityClass(slot) {\n  return generateUtilityClass('MuiDialogActions', slot);\n}\nconst dialogActionsClasses = generateUtilityClasses('MuiDialogActions', ['root', 'spacing']);\nexport default dialogActionsClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"disableSpacing\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport { getDialogActionsUtilityClass } from './dialogActionsClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    disableSpacing\n  } = ownerState;\n  const slots = {\n    root: ['root', !disableSpacing && 'spacing']\n  };\n  return composeClasses(slots, getDialogActionsUtilityClass, classes);\n};\n\nconst DialogActionsRoot = styled('div', {\n  name: 'MuiDialogActions',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    return [styles.root, !ownerState.disableSpacing && styles.spacing];\n  }\n})(({\n  ownerState\n}) => _extends({\n  display: 'flex',\n  alignItems: 'center',\n  padding: 8,\n  justifyContent: 'flex-end',\n  flex: '0 0 auto'\n}, !ownerState.disableSpacing && {\n  '& > :not(:first-of-type)': {\n    marginLeft: 8\n  }\n}));\nconst DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiDialogActions'\n  });\n\n  const {\n    className,\n    disableSpacing = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const ownerState = _extends({}, props, {\n    disableSpacing\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(DialogActionsRoot, _extends({\n    className: clsx(classes.root, className),\n    ownerState: ownerState,\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   * @default false\n   */\n  disableSpacing: PropTypes.bool,\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default DialogActions;","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport React, {FC, useEffect, useRef, useState} from 'react'\r\nimport { shallowEqual, useSelector } from 'react-redux'\r\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar } from '@mui/material'\r\nimport { RootState } from 'setup/redux/RootReducer'\r\nimport Web3 from \"web3\"\r\nimport Caver from 'caver-js'\r\nimport {KTSVG, toAbsoluteUrl} from '../../../../_metronic/helpers'\r\nimport { ethereumRoyaltyABI, royaltyABIKlaytn } from '../../contract/abi'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { FormattedMessage } from 'react-intl'\r\n\r\ntype Props = {\r\n    collectionID: string | null,\r\n    displaySnackbar: any,\r\n    setOpenDialog: any,\r\n    openDialog: any,\r\n    blockchain: any\r\n}\r\n\r\ndeclare var window: any\r\n\r\nlet klaytn: any = window.klaytn\r\n\r\nconst caver = new Caver(klaytn);\r\n\r\nconst DepositDialogBox: FC<Props> = ({ collectionID, displaySnackbar, setOpenDialog, openDialog, blockchain }) => {\r\n    \r\n    const [depositAmount, setDepositAmount] = useState<string>('')\r\n    const [depositing, setDepositing] = useState<boolean>(false)\r\n    const navigate = useNavigate()\r\n\r\n    const {walletAddress, walletName}: any = useSelector<RootState>(\r\n        ({auth}) => ({\r\n            walletAddress: auth.walletAddress,\r\n            walletName: auth.walletName\r\n        }), shallowEqual\r\n    )\r\n\r\n    const handleDepositAmountChange = (event: any) => {\r\n        event.preventDefault()\r\n        setDepositAmount(event.target.value)\r\n    }\r\n\r\n    async function checkTransactionOnKlaytn(transactionHash: any) {\r\n\r\n        const receipt: any = await caver.rpc.klay.getTransactionReceipt(transactionHash)\r\n\r\n        if(!receipt) {\r\n            checkTransactionOnKlaytn(transactionHash);\r\n        } else {\r\n            switch (receipt.status) {\r\n                case '0x1':\r\n                    if(receipt.status) {\r\n                        displaySnackbar('Transaction Success! Please check your transaction ', transactionHash)\r\n                    }\r\n                    setDepositing(false)\r\n                    break;\r\n                \r\n                case '0x0':\r\n                    displaySnackbar('Transaction Failed! Please check your transaction ', transactionHash)\r\n                    setDepositing(false)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n   const checkTransaction = async (transactionHash: string) => {\r\n        const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n         const receipt: any = await web3.eth.getTransactionReceipt(transactionHash);\r\n\r\n        if(!receipt) {\r\n            checkTransaction(transactionHash)\r\n        } else {\r\n            if(receipt.status) {\r\n                setDepositing(false)\r\n                displaySnackbar('Transaction Success! Please check your transaction ', transactionHash)\r\n            } else {\r\n                setDepositing(false)\r\n                displaySnackbar('Transaction Failed! Please check your transaction ', transactionHash)\r\n            } \r\n        }\r\n    }\r\n\r\n    const depositRoyaltyOnEthereum = async (collectionID: string | null) => {\r\n        if(collectionID && parseFloat(depositAmount) > 0) {\r\n            const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n            const royaltyContract = new web3.eth.Contract(ethereumRoyaltyABI, process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_ETHEREUM);\r\n\r\n            let ethereum: any = window.ethereum\r\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n            if(accounts[0] === walletAddress && walletName == 'metamask') {\r\n    \r\n                setDepositing(true)\r\n                ethereum\r\n                .request({\r\n                    method: 'eth_sendTransaction',\r\n                    params: [\r\n                        {\r\n                        'from': accounts[0],\r\n                        'to' : process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_ETHEREUM,\r\n                        'value': web3.utils.toHex(web3.utils.toWei(depositAmount, 'ether')),\r\n                        'data' : royaltyContract.methods.depositRoyaltyAmount(collectionID).encodeABI()\r\n                        },\r\n                    ],\r\n                })\r\n                .then((txHash: any) => {\r\n                    checkTransaction(txHash);\r\n                })\r\n                .catch((error: any) => {\r\n                    console.log(error)\r\n                });\r\n            } else {\r\n                navigate('/my-wallet')\r\n            }\r\n        }\r\n    }\r\n\r\n    const depositRoyaltyOnKlaytn = async (collectionID: string | null) => {\r\n        const myContract = new caver.klay.Contract(royaltyABIKlaytn, process.env.REACT_APP_ROYALTY_CONTRACT_ADDRESS_KLAYTN)\r\n\r\n        if(walletName == 'kaikas') {\r\n            await klaytn.enable()\r\n\r\n            const account = klaytn.selectedAddress\r\n\r\n            if(account === walletAddress) {\r\n                setDepositing(true)\r\n\r\n                myContract.methods.depositRoyaltyAmount(\r\n                    collectionID\r\n                ).send({from: account, value: caver.utils.toPeb(depositAmount.toString(), 'KLAY'), gas: 8000000},\r\n                function(error: any, transactionHash: any) {\r\n                    if(transactionHash) {\r\n                        checkTransactionOnKlaytn(transactionHash)\r\n                    }\r\n                    if(error) {\r\n                        console.log(error)\r\n                        setDepositing(false)\r\n                    }\r\n                });\r\n            } else {\r\n                navigate('/my-wallet')\r\n            }\r\n        } else {\r\n            navigate('/my-wallet')\r\n        }\r\n    }\r\n\r\n    const depositRoyaltyAmount = (collectionID: string | null) => {\r\n        if(blockchain == 'ethereum') {\r\n            depositRoyaltyOnEthereum(collectionID)\r\n        } else if(blockchain == 'klaytn') {\r\n            depositRoyaltyOnKlaytn(collectionID)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            open={openDialog}\r\n            onClose={() => setOpenDialog(false)}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\">{\"Deposit Royalty Amount\"}</DialogTitle>\r\n            <DialogContent>\r\n                <div className='my-5 mx-10 fv-row'>\r\n                    <label className='form-label mb-3 required'>\r\n                        <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT_AMOUNT\" />\r\n                        <span>{blockchain == 'ethereum' ? '(in ETH)' : '(in KLAY)'}</span>\r\n                    </label>\r\n\r\n                    <input\r\n                        type='text'\r\n                        className='form-control form-control-lg form-control-solid'\r\n                        placeholder='Enter the amount'\r\n                        value={depositAmount}\r\n                        onChange={(event) => handleDepositAmountChange(event)}\r\n                    />\r\n                </div>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <div className='d-flex flex-stack pt-15'>\r\n                    <div className='mr-2'>\r\n                        <button\r\n                            type='button'\r\n                            className='btn btn-secondary me-3'\r\n                            onClick={() => setOpenDialog(false)}\r\n                        >\r\n                            <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.COLSE\" />\r\n                        </button>\r\n                        {!depositing && \r\n                            <button\r\n                                onClick={() => depositRoyaltyAmount(collectionID)}\r\n                                type='button'\r\n                                className='btn btn-primary me-3'\r\n                            >\r\n                                <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSIT\" />\r\n                            </button>\r\n                        }\r\n                        {depositing &&\r\n                            <button\r\n                                type='button'\r\n                                className='btn btn-primary me-3'\r\n                            >\r\n                                <FormattedMessage id=\"ADMIN_COLLECTION_PREVIEW.DEPOSITING\" />...\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </DialogActions>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport {DepositDialogBox}\r\n","import { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useSelector, shallowEqual } from 'react-redux';\r\nimport CircularProgress from '@mui/material/CircularProgress';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Caver from 'caver-js'\r\nimport Web3 from \"web3\"\r\nimport { DropDetailTopSection } from './components/TopSection'\r\nimport { DropDetailTokenSection } from './components/TokenSection'\r\nimport { DropDetailAboutSection } from './components/AboutSection';\r\nimport { DropDetailDepositData } from './components/DepositDetails';\r\nimport { getCollectionMetaById } from './crud/collectionCRUD'\r\nimport { contractAbi, klaytnABI } from '../contract/abi';\r\nimport { RootState } from 'setup';\r\nimport { updateMintStatus } from './crud/collectionCRUD'\r\nimport { DepositDialogBox } from './components/DepositDialogBox'\r\nimport { getDepositData } from '../dashboard/graphQueries'\r\nimport { getKlayDepositData } from './crud/collectionCRUD'\r\nimport { FormattedMessage, useIntl } from 'react-intl';\r\nimport { ReadMoreDialog } from '../dropDetail/ReadMoreDialog'\r\n\r\ndeclare var window: any\r\n\r\nlet klaytn: any = window.klaytn\r\n\r\nconst caver = new Caver(klaytn);\r\n\r\nconst web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n\r\nconst DropDetailPreviewPage = () => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const cid: string | null = params.get(\"id\");\r\n    const klaytnContractAddress: any = process.env.REACT_APP_NFT_CONTRACT_ADDRESS_KLAYTN\r\n    const ethereumContractAddress: any = process.env.REACT_APP_NFT_CONTRACT_ADDRESS_ETHEREUM\r\n\r\n    const [loading, setLoading] = useState<boolean>(true)\r\n    const [openDialog, setOpenDialog] = useState<boolean>(false)\r\n    const [minting, setMinting] = useState<boolean>(false)\r\n    const [txHash, setTxHash] = useState<string>('');\r\n    const [collectionMeta, setCollectionMeta] = useState<any>(null)\r\n    const [artistName, setArtistName] = useState<string>('')\r\n    const [artistImage, setArtistImage] = useState<string>('')\r\n    const [depositData, setDepositData] = useState<any>(null)\r\n\r\n    const [fiatPrice, setFiatPrice] = useState<any>(null)\r\n    const navigate = useNavigate()\r\n    const intl = useIntl()\r\n\r\n    const [readMoreDialogOpen, setReadMoreDialogOpen] = useState<boolean>(false)\r\n    const [readMoreImage, setReadMoreImage] = useState<any>('330.png')\r\n    const [readMoreTier, setReadMoreTier] = useState<any>('0')\r\n    const [readMoreBlockchain, setReadMoreBlockchain] = useState<any>('ethereum')\r\n    const [readMoreBenefits, setReadMoreBenefits] = useState<any>([''])\r\n\r\n    const [snackBarContent, setSnackBarContent] = useState<string>('')\r\n    const [snackbarState, setSnackbarState]: any = useState({\r\n        open: false,\r\n        vertical: 'bottom',\r\n        horizontal: 'right'\r\n    });\r\n    const { vertical, horizontal, open } = snackbarState;\r\n\r\n    const {walletAddress, walletName, isAdmin}: any = useSelector<RootState>(\r\n        ({auth}) => ({\r\n            walletAddress: auth.walletAddress,\r\n            walletName: auth.walletName,\r\n            isAdmin: auth.user?.isAdmin\r\n        }), shallowEqual\r\n    )\r\n\r\n    function displaySnackbar(content: any, _txHash: string) {\r\n        setSnackBarContent(content)\r\n        setTxHash(_txHash)\r\n        setSnackbarState({ open: true, vertical: 'bottom', horizontal: 'right'});\r\n        setTimeout(() => {\r\n            setSnackbarState({ open: false, vertical: 'bottom', horizontal: 'right'});\r\n        }, 20000);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCollectionMetaById(cid)\r\n        .then((response) => {\r\n            if(response.data.success) {\r\n                setCollectionMeta(response.data.collectionMeta)\r\n                setArtistName(response.data.artistName)\r\n                setFiatPrice(response.data.fiat_price_in_usd)\r\n                setArtistImage(response.data.artistImage)\r\n                if(response.data.collectionMeta.blockchain == 'ethereum') {\r\n                    getDepositData(cid)\r\n                    .then((data) => {\r\n                        setDepositData(data)\r\n                        setLoading(false)\r\n                    })\r\n                } else if(response.data.collectionMeta.blockchain == 'klaytn') {\r\n                    getKlayDepositData(cid)\r\n                    .then((response) => {\r\n                        if(response.data.success) {\r\n                            setDepositData(response.data.deposit_data)\r\n                            setLoading(false)\r\n                        }\r\n                    })\r\n                }\r\n            } \r\n        })\r\n    }, [])\r\n\r\n    const getTokenData = (blockchain: string) => {\r\n\r\n        let blockchainData: any = {\r\n            tiers: [],\r\n            amounts: [],\r\n            ownershipOffered: [],\r\n            prices: [],\r\n            initialTokenIds: []\r\n        }\r\n        collectionMeta.tiersData.map((tierData: any, index: number) => {\r\n            blockchainData.tiers[index] = tierData.tier\r\n            blockchainData.amounts[index] = tierData.tier_quantity\r\n            blockchainData.ownershipOffered[index] = parseFloat(tierData.ownership_offered) * 100000\r\n            blockchainData.initialTokenIds[index] = parseInt(cid + tierData.tier + tierData.tier_quantity)\r\n\r\n            if(blockchain == 'klaytn') {\r\n                blockchainData.prices[index] = caver.utils.toPeb(tierData.tier_price, 'KLAY')\r\n            } else if(blockchain == 'ethereum') {\r\n                blockchainData.prices[index] = web3.utils.toWei(tierData.tier_price, 'ether')\r\n            }\r\n        })\r\n        return blockchainData\r\n    }\r\n\r\n    async function checkTransactionOnKlaytn(transactionHash: any) {\r\n\r\n        const receipt: any = await caver.rpc.klay.getTransactionReceipt(transactionHash)\r\n\r\n        if(!receipt) {\r\n            checkTransactionOnKlaytn(transactionHash);\r\n        } else {\r\n            switch (receipt.status) {\r\n                case '0x1':\r\n                    if(receipt.status) {\r\n                        displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_SUCCESS' }), transactionHash)\r\n                        updateMintStatus(collectionMeta.id, transactionHash)\r\n                        .then((response) => {\r\n                            if(response.data.success) {\r\n                                //\r\n                            } else {\r\n                                //\r\n                            }\r\n                        })\r\n                    }\r\n                    setMinting(false)\r\n                    break;\r\n                \r\n                case '0x0':\r\n                    displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_FAILED' }), transactionHash)\r\n                    setMinting(false)\r\n                    break\r\n            }\r\n        }\r\n    }\r\n\r\n    async function checkTransactionOnEthereum(transactionHash: string) {\r\n        const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n        const receipt: any = await web3.eth.getTransactionReceipt(transactionHash);\r\n\r\n        if(!receipt) {\r\n            checkTransactionOnEthereum(transactionHash)\r\n        } else {\r\n            if(receipt.status) {\r\n                displaySnackbar(intl.formatMessage({ id: 'COLLECTION_DETAIL_PAGE.TRANSACTION_SUCCESS' }), transactionHash)\r\n                updateMintStatus(collectionMeta.id, transactionHash)\r\n                .then((response) => {\r\n                    if(response.data.success) {\r\n                        console.log(response.data.message)\r\n                    } else {\r\n                        console.log(response.data.message)\r\n                    }\r\n                })\r\n                .catch((err) => console.log(err))\r\n                setMinting(false)\r\n            } else {\r\n                setMinting(false)\r\n            } \r\n        }\r\n    }\r\n\r\n    const mintCollectionOnKlaytn = async (\r\n        cid: any,\r\n        collectionOwner: string, \r\n        blockchainData: any,\r\n    ) => {\r\n        const myContract = new caver.klay.Contract(klaytnABI, klaytnContractAddress)\r\n\r\n        if(walletName == 'kaikas') {\r\n            await klaytn.enable()\r\n\r\n            const account = klaytn.selectedAddress\r\n\r\n            if(account === walletAddress) {\r\n                setMinting(true)\r\n\r\n                myContract.methods.mintCollection(\r\n                    cid,\r\n                    blockchainData.tiers,\r\n                    blockchainData.amounts,\r\n                    blockchainData.ownershipOffered,\r\n                    blockchainData.prices,\r\n                    collectionOwner,\r\n                    blockchainData.initialTokenIds\r\n                ).send({from: account, gas: 8000000},\r\n                function(error: any, transactionHash: any) {\r\n                    if(transactionHash) {\r\n                        checkTransactionOnKlaytn(transactionHash)\r\n                    }\r\n                    if(error) {\r\n                        console.log(error)\r\n                        setMinting(false)\r\n                    }\r\n                });\r\n            } else {\r\n                navigate('/my-wallet')\r\n            }\r\n        } else {\r\n            navigate('/my-wallet')\r\n        }\r\n    }\r\n\r\n    const  mintCollectionOnEthereum = async (cid: string, collectionOwner: string, blockchainData: any) => {\r\n\r\n        const web3 = new Web3(`${process.env.REACT_APP_INFURA_URL}`);\r\n        // const contractAddress = process.env.REACT_APP_NFT_CONTRACT_ADDRESS;\r\n        const nftContract = new web3.eth.Contract(contractAbi, ethereumContractAddress);\r\n\r\n        let ethereum: any = window.ethereum\r\n        const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\r\n\r\n        if(accounts[0] === walletAddress && walletName == 'metamask') {\r\n            setMinting(true)\r\n\r\n            ethereum\r\n            .request({\r\n                method: 'eth_sendTransaction',\r\n                params: [\r\n                    {\r\n                    'from': accounts[0],\r\n                    'to' : ethereumContractAddress,\r\n                    'data' : nftContract.methods.mintCollection(\r\n                                    cid,\r\n                                    blockchainData.tiers,\r\n                                    blockchainData.amounts,\r\n                                    blockchainData.ownershipOffered,\r\n                                    blockchainData.prices,\r\n                                    collectionOwner,\r\n                                    blockchainData.initialTokenIds\r\n                                ).encodeABI()\r\n                    },\r\n                ],\r\n            })\r\n            .then((txHash: any) => {\r\n                checkTransactionOnEthereum(txHash);\r\n            })\r\n            .catch((error: any) => {\r\n                console.log(error)\r\n                setMinting(false)\r\n            });\r\n        } else {\r\n            navigate('/my-wallet')\r\n        }\r\n    }\r\n\r\n    const mintCollection = async (blockchain: string) => {\r\n        if(blockchain == 'ethereum') {\r\n            if(cid && collectionMeta) {\r\n                let blockchainData = getTokenData(blockchain)\r\n                console.log(blockchainData)\r\n                await mintCollectionOnEthereum(cid, collectionMeta.collection_owner, blockchainData)\r\n            }\r\n        } else if(blockchain == 'klaytn') {\r\n            if(cid && collectionMeta) {\r\n                let blockchainData = getTokenData(blockchain)\r\n                console.log(blockchainData)\r\n                await mintCollectionOnKlaytn(cid, collectionMeta.collection_owner, blockchainData)\r\n            }\r\n        }\r\n    }\r\n\r\n    const renderSnackBar = () => {\r\n        return (\r\n            <Snackbar\r\n                anchorOrigin={{ vertical, horizontal }}\r\n                key={`${vertical},${horizontal}`}\r\n                open={open}\r\n                ContentProps={{\r\n                'aria-describedby': 'message-id',\r\n                }}\r\n                message={\r\n                <span id=\"message-id\">\r\n                    {collectionMeta && collectionMeta.blockchain == 'ethereum' && \r\n                        <label className=\"px-4\">{ snackBarContent } \r\n                            <a href={`https://goerli.etherscan.io/tx/${txHash}`}>\r\n                                here\r\n                            </a>\r\n                        </label>\r\n                    }\r\n                    {collectionMeta && collectionMeta.blockchain == 'klaytn' && \r\n                        <label className=\"px-4\">{ snackBarContent } \r\n                            <a href={`https://baobab.scope.klaytn.com/tx/${txHash}?tabId=nftTransfer`}>\r\n                                here\r\n                            </a>\r\n                        </label>\r\n                    }\r\n                </span>\r\n                }\r\n            />\r\n        )\r\n    }\r\n\r\n    const handleReadMoreClick = (\r\n        imageName: string,\r\n        tier: string,\r\n        blockchain: string,\r\n        extras: Array<any>\r\n    ) => {\r\n        setReadMoreImage(imageName)\r\n        setReadMoreTier(tier)\r\n        setReadMoreBlockchain(blockchain)\r\n        setReadMoreBenefits(extras)\r\n        setReadMoreDialogOpen(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isAdmin == '1' && \r\n                <>\r\n                    {!loading && collectionMeta &&\r\n                        <>\r\n                        \r\n                            {collectionMeta.is_minted == '0' && \r\n                                <div className='d-flex' style={{ marginTop: '-20px' }}>\r\n                                    <span className='d-flex px-3 ms-auto'>\r\n                                        <span className='me-3'>\r\n                                            <button className=\"btn btn-secondary\" onClick={() => navigate(`/update-collection?id=${cid}`)}>Update</button>\r\n                                        </span>\r\n                                        <span>\r\n                                            {!minting && \r\n                                                <button \r\n                                                    className=\"py-3 px-3 rounded\"\r\n                                                    style={{ background: '#ffd600', color: '#000', borderColor: '#0000' }} \r\n                                                    onClick={() => mintCollection(collectionMeta.blockchain)}\r\n                                                >\r\n                                                    <FormattedMessage id='ADMIN_COLLECTION_PREVIEW.MINT' />\r\n                                                </button>\r\n                                            }\r\n                                            {minting &&\r\n                                                <button className=\"btn btn-primary\">\r\n                                                    <FormattedMessage id='ADMIN_COLLECTION_PREVIEW.MINTING' />...\r\n                                                </button>\r\n                                            }\r\n                                        </span>\r\n                                    </span>\r\n                                </div>\r\n                            } \r\n                            {collectionMeta.is_minted == '1' && \r\n                                <div className='d-flex' style={{ marginTop: '-20px' }}>\r\n                                    <span className='d-flex px-3 ms-auto'>\r\n                                        <span className='me-3'>\r\n                                            <span\r\n                                                className='btn btn-sm btn-primary'\r\n                                                onClick={() => setOpenDialog(true)}\r\n                                            >\r\n                                                <FormattedMessage id='ADMIN_COLLECTION_PREVIEW.INITIATE_DEPOSIT' />\r\n                                            </span>\r\n                                        </span>\r\n                                    </span>\r\n                                </div>\r\n                            } \r\n                        <div className=\"container-fluid bg-white\">\r\n                            <div style={{ marginTop: '10px' }} className=\"d-flex flex-column justify-content-center\">\r\n                                <DropDetailTopSection \r\n                                    imageName={collectionMeta.collection_image}\r\n                                    collectionName={collectionMeta.collection_name}\r\n                                    collectionType={collectionMeta.collection_type}\r\n                                    collectionDescription={collectionMeta.collection_description}\r\n                                    spotifyURL={collectionMeta.spotify_url}\r\n                                    artistName={artistName}\r\n                                    artistImage={artistImage}\r\n                                    artistID={collectionMeta.artist_id}\r\n                                />\r\n        \r\n                            \r\n                                <div className=\"mx-auto\" style={{ width: '70%' }}>\r\n                                    \r\n                                    <DropDetailTokenSection \r\n                                        tiersData={collectionMeta.tiersData}\r\n                                        blockchain={collectionMeta.blockchain}\r\n                                        handleReadMoreClick={handleReadMoreClick}\r\n                                        fiatPrice={fiatPrice}\r\n                                    />\r\n        \r\n                                    <DropDetailAboutSection \r\n                                        collectionName={collectionMeta.collection_name}\r\n                                        blockchain={collectionMeta.blockchain}\r\n                                        collectionID={cid}\r\n                                    />\r\n        \r\n                                    <DropDetailDepositData \r\n                                        blockchain={collectionMeta.blockchain}\r\n                                        depositData={depositData}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <DepositDialogBox \r\n                            collectionID={cid} \r\n                            displaySnackbar={displaySnackbar}\r\n                            openDialog={openDialog}\r\n                            setOpenDialog={setOpenDialog}\r\n                            blockchain={collectionMeta.blockchain}\r\n                        />\r\n                        <ReadMoreDialog \r\n                            readMoreDialogOpen={readMoreDialogOpen}\r\n                            setReadMoreDialogOpen={setReadMoreDialogOpen}\r\n                            readMoreImage={readMoreImage}\r\n                            readMoreTier={readMoreTier}\r\n                            readMoreBlockchain={readMoreBlockchain}\r\n                            readMoreBenefits={readMoreBenefits}\r\n                        />\r\n                        </>\r\n                    }\r\n                    {loading && \r\n                        <div className='d-flex w-100 h-100'>\r\n                            <div className='my-auto mx-auto'>\r\n                                <div className='d-flex flex-column justify-content-center'>\r\n                                    <span className='text-primary fs-3'>Loading</span> <br />\r\n                                    <span className='ms-4'>\r\n                                        <CircularProgress />\r\n                                    </span>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                    {renderSnackBar()}\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DropDetailPreviewPage"],"sourceRoot":""}