{"version":3,"sources":["app/modules/wallets/api/index.ts","app/modules/wallets/WalletLoginNew.tsx"],"names":["UPDATE_WALLET_URL","process","updateWallet","userID","walletAddress","walletName","axios","method","url","headers","data","ethChainIdMap","klayNetworkMap","WalletLoginNew","state","useLocation","useState","message","setMessage","length","getCheckStatus","checked","setChecked","metamaskConnecting","setMetamaskConnecting","kaikasConnecting","setKaikasConnecting","useNavigate","useSelector","auth","user","chainID","custWalletEth","userWalletList","ethCustodialWallet","custWalletKlay","klayCustodialWallet","shallowEqual","dispatch","useDispatch","setMetaMaskAccountInfo","accounts","a","console","log","ethereum","window","request","chainId","then","response","success","metamaskWallet","metamask_wallet","kaikasWallet","kaikas_wallet","actions","setUserWalletList","setTimeout","handleKaikasLogin2","klaytn","enable","setKaikasAccountInfo","location","href","undefined","account","selectedAddress","networkVersion","className","style","marginBottom","id","width","height","src","toAbsoluteUrl","background","border","onClick","signOutWallet","catch","err","code","error"],"mappings":"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","file":"static/js/16.37e1e3f0.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst UPDATE_WALLET_URL = `${process.env.REACT_APP_API_URL}/update-connected-wallet-for-user.php`;\r\n\r\n\r\nexport function updateWallet(userID: string, walletAddress: string, walletName: string) {\r\n    return axios({\r\n      method: 'post',\r\n      url: UPDATE_WALLET_URL,\r\n      headers: {\r\n        'content-type': 'application/x-www-form-urlencoded',\r\n      },\r\n      data: {\r\n        userID,\r\n        walletAddress,\r\n        walletName\r\n      }\r\n    })\r\n}","import { useState } from \"react\";\r\nimport { shallowEqual, useSelector, useDispatch } from \"react-redux\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\"\r\nimport { RootState } from \"setup\";\r\nimport { WalletOptionDialogBox } from \"./components/WalletOtionsDialog\"\r\nimport {actions} from '../auth/redux/AuthRedux'\r\nimport { toAbsoluteUrl } from \"_metronic/helpers\";\r\nimport { updateWallet } from './api'\r\nimport { FormattedMessage } from 'react-intl'\r\nimport { AlertDanger } from \"../alerts/Alerts\";\r\n\r\ndeclare var window: any\r\n\r\nconst ethChainIdMap: any = {\r\n    '0x1': 'Ethereum Main Network (Mainnet)',\r\n    '0x3': 'Ropsten Test Network',\r\n    '0x4': 'Rinkeby Test Network',\r\n    '0x5': 'Goerli Test Network',\r\n    '0x2a': 'Kovan Test Network'\r\n}\r\n\r\nconst klayNetworkMap: any = {\r\n    '8217' : 'Cypress Mainnet',\r\n    '1001' : 'Baobab Testnet'\r\n}\r\n\r\nconst getCheckStatus = (state: any) => {\r\n    if(state && state.message && state.message.length > 0) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n\r\nconst WalletLoginNew = () => {\r\n\r\n    const { state }: any = useLocation()\r\n\r\n    const [message, setMessage] = useState<string>(state && state.message ? state.message : '')\r\n    const [checked, setChecked] = useState<boolean>(getCheckStatus(state))\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const [metamaskConnecting, setMetamaskConnecting] = useState<boolean>(false)\r\n    const [kaikasConnecting, setKaikasConnecting] = useState<boolean>(false)\r\n    const navigate = useNavigate()\r\n    const {walletAddress, walletName, userID, chainID, custWalletEth, custWalletKlay,}: any = useSelector<RootState>(\r\n        ({auth}) => ({\r\n            walletAddress: auth.walletAddress,\r\n            walletName: auth.walletName,\r\n            userID: auth.user?.userID,\r\n            chainID: auth.chainID,\r\n            custWalletEth: auth.userWalletList.ethCustodialWallet,\r\n            custWalletKlay: auth.userWalletList.klayCustodialWallet,\r\n        }), shallowEqual\r\n    )\r\n    const dispatch = useDispatch()\r\n\r\n    if(message !== \"\") {\r\n        setTimeout(() => {\r\n          setChecked(false);\r\n          setTimeout(() => {\r\n            setMessage(\"\");\r\n          }, 200);\r\n        }, 5000);\r\n    }\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true);\r\n    }\r\n\r\n    function handleClose() {\r\n        setOpen(false);\r\n    }\r\n\r\n    function signOutWallet() {\r\n        dispatch(actions.signOutWallet())\r\n    }\r\n\r\n    async function setMetaMaskAccountInfo(accounts: any) {\r\n        if (accounts.length === 0) {\r\n            // MetaMask is locked or the user has not connected any accounts\r\n            console.log('Please connect to MetaMask.');\r\n        } else if (accounts[0] !== walletAddress) {\r\n            let ethereum: any = window.ethereum\r\n            const chainId = await ethereum.request({ method: 'eth_chainId' });\r\n            updateWallet(userID, accounts[0], 'metamask')\r\n            .then((response) => {\r\n                if(response.data.success) {\r\n                    setMetamaskConnecting(false)\r\n                    // dispatch(actions.setWalletAddress(accounts[0], 'metamask', chainId))\r\n                    const userWalletList = {\r\n                        ethCustodialWallet: response.data.custWalletEth,\r\n                        klayCustodialWallet: response.data.custWalletKlay,\r\n                        metamaskWallet: response.data.metamask_wallet,\r\n                        kaikasWallet: response.data.kaikas_wallet\r\n                    }\r\n                    dispatch(actions.setUserWalletList(userWalletList, accounts[0], 'metamask', chainId))\r\n                } else {\r\n                    if(response.data.message) {\r\n                        setChecked(true)\r\n                        setMessage(response.data.message)\r\n                    } else {\r\n                        setChecked(true)\r\n                        setMessage('Cannot connect with a wallet, please try with another wallet')\r\n                    }\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    function handleMetaMaskLogin() {\r\n        setMetamaskConnecting(true)\r\n        if(window.ethereum != undefined) {\r\n            let ethereum: any = window.ethereum\r\n            ethereum\r\n            .request({ method: 'eth_requestAccounts' })\r\n            .then(setMetaMaskAccountInfo)\r\n            .catch((err: any) => {\r\n                if (err.code === 4001) {\r\n                    console.log(err)\r\n                } else {\r\n                    console.error(err);\r\n                }\r\n            });\r\n        } else {\r\n            window.location.href = \"https://metamask.io/download/\"\r\n        }\r\n    }\r\n\r\n    async function handleKaikasLogin() {\r\n        setKaikasConnecting(true)\r\n        const { klaytn } = window\r\n\r\n        if (klaytn) {\r\n            try {\r\n                // if(klaytn.selectedAddress) {\r\n\r\n                //     const account = klaytn.selectedAddress\r\n                //     const networkVersion = klaytn.networkVersion\r\n                //     console.log(account)\r\n                    \r\n                //     updateWallet(userID, account, 'kaikas')\r\n                //     .then((response) => {\r\n                //         if(response.data.success) {\r\n\r\n                //             const userWalletList = {\r\n                //                 ethCustodialWallet: response.data.custWalletEth,\r\n                //                 klayCustodialWallet: response.data.custWalletKlay,\r\n                //                 metamaskWallet: response.data.metamask_wallet,\r\n                //                 kaikasWallet: response.data.kaikas_wallet\r\n                //             }\r\n\r\n                //             // dispatch(actions.setWalletAddress(account, 'kaikas'))\r\n                //             dispatch(actions.setUserWalletList(userWalletList, account, 'kaikas', networkVersion))\r\n                //         } else {\r\n                //             if(response.data.message) {\r\n                //                 setChecked(true)\r\n                //                 setMessage(response.data.message)\r\n                //             } else {\r\n                //                 setChecked(true)\r\n                //                 setMessage('Cannot connect with a wallet, please try with another wallet')\r\n                //             }\r\n                //         }\r\n                //     })\r\n                // } else {\r\n                //     await klaytn.enable()\r\n                // }\r\n                await klaytn.enable()\r\n                // setKaikasAccountInfo()\r\n                const account = await klaytn.selectedAddress\r\n                console.log(account)\r\n        \r\n                if(account) {\r\n                    const networkVersion = await klaytn.networkVersion\r\n\r\n                    updateWallet(userID, account, 'kaikas')\r\n                    .then((response) => {\r\n                        if(response.data.success) {\r\n\r\n                            const userWalletList = {\r\n                                ethCustodialWallet: response.data.custWalletEth,\r\n                                klayCustodialWallet: response.data.custWalletKlay,\r\n                                metamaskWallet: response.data.metamask_wallet,\r\n                                kaikasWallet: response.data.kaikas_wallet\r\n                            }\r\n\r\n                            dispatch(actions.setUserWalletList(userWalletList, account, 'kaikas', networkVersion))\r\n                            setKaikasConnecting(false)\r\n                        } else {\r\n                            if(response.data.message) {\r\n                                setChecked(true)\r\n                                setMessage(response.data.message)\r\n                            } else {\r\n                                setChecked(true)\r\n                                setMessage('Cannot connect with a wallet, please try with another wallet')\r\n                            }\r\n                            setKaikasConnecting(false)\r\n                        }\r\n                    })\r\n                } else {\r\n                    handleKaikasLogin()\r\n                }\r\n            } catch (error) {\r\n                console.log('User denied account access')\r\n            }\r\n        } else {\r\n            window.location.href = \"https://chrome.google.com/webstore/detail/kaikas/jblndlipeogpafnldhgmapagcccfchpi\"\r\n        }\r\n    }\r\n\r\n    const handleKaikasLogin2 = async () => {\r\n        setKaikasConnecting(true)\r\n        const { klaytn } = window\r\n\r\n        if(klaytn) {\r\n            try {\r\n                await klaytn.enable()\r\n                setKaikasAccountInfo()\r\n            } catch (error) {\r\n                console.log('User denied account access')\r\n            }\r\n        } else {\r\n            window.location.href = \"https://chrome.google.com/webstore/detail/kaikas/jblndlipeogpafnldhgmapagcccfchpi\"\r\n        }\r\n    }\r\n\r\n    const setKaikasAccountInfo = () => {\r\n        const { klaytn } = window\r\n        if (klaytn === undefined) return\r\n\r\n        const account = klaytn.selectedAddress\r\n        const networkVersion = klaytn.networkVersion\r\n\r\n        updateWallet(userID, account, 'kaikas')\r\n        .then((response) => {\r\n            if(response.data.success) {\r\n\r\n                const userWalletList = {\r\n                    ethCustodialWallet: response.data.custWalletEth,\r\n                    klayCustodialWallet: response.data.custWalletKlay,\r\n                    metamaskWallet: response.data.metamask_wallet,\r\n                    kaikasWallet: response.data.kaikas_wallet\r\n                }\r\n\r\n                dispatch(actions.setUserWalletList(userWalletList, account, 'kaikas', networkVersion))\r\n                setKaikasConnecting(false)\r\n            } else {\r\n                if(response.data.message) {\r\n                    setChecked(true)\r\n                    setMessage(response.data.message)\r\n                } else {\r\n                    setChecked(true)\r\n                    setMessage('Cannot connect with a wallet, please try with another wallet')\r\n                }\r\n                setKaikasConnecting(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {message && message != '' && \r\n                <AlertDanger message={message} checked={checked} />\r\n            }\r\n\r\n            <div className='card mb-5 mb-xl-10'>\r\n                <>\r\n                    <div className=\"d-flex w-100 justify-content-center pt-5\">\r\n                        <div className='mb-10 fv-row w-50'>\r\n                            <div style={{ marginBottom: '50px' }}>\r\n                                <h4><FormattedMessage id=\"SETTINGS_PAGE.WALLETS\" /></h4>\r\n                                <hr className=\"w-25 mb-10\" />\r\n\r\n                                <span className=\"mb-10\">\r\n                                    <FormattedMessage id=\"SETTINGS_PAGE.WALLETS.INFO\" />\r\n                                </span>\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '50px' }}>\r\n                                <h4><FormattedMessage id=\"SETTINGS_PAGE.CUSTODIAL_WALLETS\" /></h4>\r\n                                <hr className=\"w-25 mb-10\" />\r\n\r\n                                {custWalletEth && \r\n                                    <div className=\"d-flex\">\r\n                                        <div>\r\n                                            <img \r\n                                                style={{ width: '35px', height: '35px' }}\r\n                                                src={toAbsoluteUrl(\"/musician/logo.png\")} \r\n                                                className=\"rounded\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column ms-6\">\r\n                                            <span>\r\n                                                Ethereum\r\n                                            </span>\r\n                                            <span>\r\n                                                {custWalletEth}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n\r\n                                {custWalletKlay && \r\n                                    <div className=\"d-flex mt-5\">\r\n                                        <div>\r\n                                            <img \r\n                                                style={{ width: '35px', height: '35px' }}\r\n                                                src={toAbsoluteUrl(\"/musician/logo.png\")} \r\n                                                className=\"rounded\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column ms-6\">\r\n                                            <span>\r\n                                                Klaytn\r\n                                            </span>\r\n                                            <span>\r\n                                                {custWalletKlay}\r\n                                            </span>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n\r\n                                {!custWalletEth && !custWalletKlay && \r\n                                    <span><FormattedMessage id=\"SETTINGS_PAGE.NO_CUSTODIAL_WALLETS\" /></span>\r\n                                }\r\n                            </div>\r\n\r\n                            <div style={{ marginBottom: '50px' }}>\r\n                                <h4>\r\n                                    <FormattedMessage id=\"SETTINGS_PAGE.CONNECTED_WALLETS\" />\r\n                                </h4>\r\n                                <hr className=\"w-25 mb-10\" />\r\n\r\n                                {walletAddress && \r\n                                    <div className=\"d-flex\">\r\n                                        <div>\r\n                                            {walletName == 'metamask' ? (\r\n                                                <img \r\n                                                    style={{ width: '100px', height: '100px' }}\r\n                                                    src={toAbsoluteUrl(\"/media/wallet-icons/metamask.png\")} \r\n                                                    className=\"rounded\"\r\n                                                />\r\n                                            ) : (\r\n                                                <img \r\n                                                    style={{ width: '50px', height: '50px' }}\r\n                                                    src={toAbsoluteUrl(\"/media/wallet-icons/klaytn.png\")} \r\n                                                    className=\"rounded\"\r\n                                                />\r\n                                            )}\r\n                                            \r\n                                        </div>\r\n                                        <div className=\"d-flex flex-column ms-3\">\r\n                                            <span>\r\n                                                {walletName && walletName == 'metamask' ? 'Ethereum' : 'Klaytn' }\r\n                                            </span>\r\n                                            <span>\r\n                                                {walletName == 'metamask' ? ethChainIdMap[chainID] : klayNetworkMap[chainID]}\r\n                                            </span>\r\n                                            <span>\r\n                                                {walletAddress}\r\n                                            </span>\r\n\r\n                                            <button\r\n                                                className=\"py-1 w-50 mt-2\"\r\n                                                style={{\r\n                                                    background: '#ffd600',\r\n                                                    border: '#0000',\r\n                                                }}\r\n                                                onClick={signOutWallet}\r\n                                            >\r\n                                                <FormattedMessage id=\"SETTINGS_PAGE.REMOVE_WALLET\" />\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                }\r\n\r\n                                {!walletAddress && \r\n                                    <>\r\n                                        <div className=\"d-flex mb-5\">\r\n                                            <div>\r\n                                                <img \r\n                                                    style={{ width: '70px', height: '70px' }}\r\n                                                    src={toAbsoluteUrl(\"/media/wallet-icons/metamask.png\")} \r\n                                                    className=\"rounded\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-column ms-3\">\r\n                                                <span className=\"mb-3\">\r\n                                                    <FormattedMessage id=\"SETTINGS_PAGE.ADD_ETH_WALLET1\" />\r\n                                                </span>\r\n                                                <button\r\n                                                    className=\"py-1\"\r\n                                                    style={{\r\n                                                        background: '#ffd600',\r\n                                                        border: '#0000',\r\n                                                    }}\r\n                                                    onClick={handleMetaMaskLogin}\r\n                                                >\r\n                                                    \r\n                                                    <FormattedMessage id=\"SETTINGS_PAGE.ADD_ETH_WALLET2\" />\r\n                                                    {metamaskConnecting && \r\n                                                        <span className='spinner-border spinner-border-sm align-middle ms-3'></span>\r\n                                                    }\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n\r\n                                        <div className=\"d-flex ms-3\">\r\n                                            <div>\r\n                                                <img \r\n                                                    style={{ width: '50px', height: '50px' }}\r\n                                                    src={toAbsoluteUrl(\"/media/wallet-icons/klaytn.png\")} \r\n                                                    className=\"rounded\"\r\n                                                />\r\n                                            </div>\r\n                                            <div className=\"d-flex flex-column ms-6\">\r\n                                                <span className=\"mb-3\"><FormattedMessage id=\"SETTINGS_PAGE.ADD_KLAY_WALLET1\" /></span>\r\n                                                <button \r\n                                                    className=\"py-1\"\r\n                                                    style={{\r\n                                                        background: '#ffd600',\r\n                                                        border: '#0000',\r\n                                                    }}\r\n                                                    onClick={handleKaikasLogin2}\r\n                                                >\r\n                                                    <FormattedMessage id=\"SETTINGS_PAGE.ADD_KLAY_WALLET2\" />\r\n                                                    {kaikasConnecting && \r\n                                                        <span className='spinner-border spinner-border-sm align-middle ms-3'></span>\r\n                                                    }\r\n                                                </button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default WalletLoginNew"],"sourceRoot":""}